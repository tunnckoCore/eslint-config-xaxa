{
  "configs": [
    {
      "name": "eslint/defaults/languages",
      "languageOptions": {
        "sourceType": "module",
        "ecmaVersion": "latest",
        "parserOptions": {}
      },
      "linterOptions": {
        "reportUnusedDisableDirectives": 1
      },
      "index": 0
    },
    {
      "name": "eslint/defaults/ignores",
      "ignores": [
        "**/node_modules/",
        ".git/"
      ],
      "index": 1
    },
    {
      "name": "eslint/defaults/files",
      "files": [
        "**/*.js",
        "**/*.mjs"
      ],
      "index": 2
    },
    {
      "name": "eslint/defaults/files-cjs",
      "files": [
        "**/*.cjs"
      ],
      "languageOptions": {
        "sourceType": "commonjs",
        "ecmaVersion": "latest"
      },
      "index": 3
    },
    {
      "name": "antfu/gitignore",
      "ignores": [
        "**/node_modules",
        "**/.pnp",
        "**/.pnp.js",
        "**/.cache",
        "**/.eslintcache",
        "**/.env",
        "**/.env.local",
        "**/.env.development.local",
        "**/.env.test.local",
        "**/.env.production.local",
        "**/coverage",
        "**/.turbo",
        "**/.vercel",
        "**/.next/",
        "**/out/",
        "**/build",
        "**/dist",
        "**/npm-debug.log*",
        "**/yarn-debug.log*",
        "**/yarn-error.log*",
        "**/.DS_Store",
        "**/*.pem",
        "**/blob/"
      ],
      "index": 4
    },
    {
      "ignores": [
        "**/node_modules",
        "**/dist",
        "**/package-lock.json",
        "**/yarn.lock",
        "**/pnpm-lock.yaml",
        "**/bun.lockb",
        "**/output",
        "**/coverage",
        "**/temp",
        "**/.temp",
        "**/tmp",
        "**/.tmp",
        "**/.history",
        "**/.vitepress/cache",
        "**/.nuxt",
        "**/.next",
        "**/.svelte-kit",
        "**/.vercel",
        "**/.changeset",
        "**/.idea",
        "**/.cache",
        "**/.output",
        "**/.vite-inspect",
        "**/.yarn",
        "**/vite.config.*.timestamp-*",
        "**/CHANGELOG*.md",
        "**/*.min.*",
        "**/LICENSE*",
        "**/__snapshots__",
        "**/auto-import?(s).d.ts",
        "**/components.d.ts"
      ],
      "name": "antfu/ignores",
      "index": 5
    },
    {
      "name": "antfu/eslint-comments/rules",
      "plugins": {
        "eslint-comments": {}
      },
      "rules": {
        "eslint-comments/no-aggregating-enable": "error",
        "eslint-comments/no-duplicate-disable": "error",
        "eslint-comments/no-unlimited-disable": "error",
        "eslint-comments/no-unused-enable": "error"
      },
      "index": 6
    },
    {
      "name": "@eslint/js/recommended",
      "rules": {
        "constructor-super": "error",
        "for-direction": "error",
        "getter-return": "error",
        "no-async-promise-executor": "error",
        "no-case-declarations": "error",
        "no-class-assign": "error",
        "no-compare-neg-zero": "error",
        "no-cond-assign": "error",
        "no-const-assign": "error",
        "no-constant-binary-expression": "error",
        "no-constant-condition": "error",
        "no-control-regex": "error",
        "no-debugger": "error",
        "no-delete-var": "error",
        "no-dupe-args": "error",
        "no-dupe-class-members": "error",
        "no-dupe-else-if": "error",
        "no-dupe-keys": "error",
        "no-duplicate-case": "error",
        "no-empty": "error",
        "no-empty-character-class": "error",
        "no-empty-pattern": "error",
        "no-empty-static-block": "error",
        "no-ex-assign": "error",
        "no-extra-boolean-cast": "error",
        "no-fallthrough": "error",
        "no-func-assign": "error",
        "no-global-assign": "error",
        "no-import-assign": "error",
        "no-invalid-regexp": "error",
        "no-irregular-whitespace": "error",
        "no-loss-of-precision": "error",
        "no-misleading-character-class": "error",
        "no-new-native-nonconstructor": "error",
        "no-nonoctal-decimal-escape": "error",
        "no-obj-calls": "error",
        "no-octal": "error",
        "no-prototype-builtins": "error",
        "no-redeclare": "error",
        "no-regex-spaces": "error",
        "no-self-assign": "error",
        "no-setter-return": "error",
        "no-shadow-restricted-names": "error",
        "no-sparse-arrays": "error",
        "no-this-before-super": "error",
        "no-undef": "error",
        "no-unexpected-multiline": "error",
        "no-unreachable": "error",
        "no-unsafe-finally": "error",
        "no-unsafe-negation": "error",
        "no-unsafe-optional-chaining": "error",
        "no-unused-labels": "error",
        "no-unused-private-class-members": "error",
        "no-unused-vars": "error",
        "no-useless-backreference": "error",
        "no-useless-catch": "error",
        "no-useless-escape": "error",
        "no-with": "error",
        "require-yield": "error",
        "use-isnan": "error",
        "valid-typeof": "error"
      },
      "index": 7
    },
    {
      "files": [
        "**/*.?([cm])[jt]s?(x)"
      ],
      "languageOptions": {
        "ecmaVersion": 2022,
        "globals": {
          "AggregateError": false,
          "Array": false,
          "ArrayBuffer": false,
          "Atomics": false,
          "BigInt": false,
          "BigInt64Array": false,
          "BigUint64Array": false,
          "Boolean": false,
          "DataView": false,
          "Date": false,
          "decodeURI": false,
          "decodeURIComponent": false,
          "encodeURI": false,
          "encodeURIComponent": false,
          "Error": false,
          "escape": false,
          "eval": false,
          "EvalError": false,
          "FinalizationRegistry": false,
          "Float16Array": false,
          "Float32Array": false,
          "Float64Array": false,
          "Function": false,
          "globalThis": false,
          "Infinity": false,
          "Int16Array": false,
          "Int32Array": false,
          "Int8Array": false,
          "Intl": false,
          "isFinite": false,
          "isNaN": false,
          "Iterator": false,
          "JSON": false,
          "Map": false,
          "Math": false,
          "NaN": false,
          "Number": false,
          "Object": false,
          "parseFloat": false,
          "parseInt": false,
          "Promise": false,
          "Proxy": false,
          "RangeError": false,
          "ReferenceError": false,
          "Reflect": false,
          "RegExp": false,
          "Set": false,
          "SharedArrayBuffer": false,
          "String": false,
          "Symbol": false,
          "SyntaxError": false,
          "TypeError": false,
          "Uint16Array": false,
          "Uint32Array": false,
          "Uint8Array": false,
          "Uint8ClampedArray": false,
          "undefined": false,
          "unescape": false,
          "URIError": false,
          "WeakMap": false,
          "WeakRef": false,
          "WeakSet": false,
          "AbortController": false,
          "AbortSignal": false,
          "AbsoluteOrientationSensor": false,
          "AbstractRange": false,
          "Accelerometer": false,
          "addEventListener": false,
          "ai": false,
          "AI": false,
          "AICreateMonitor": false,
          "AITextSession": false,
          "alert": false,
          "AnalyserNode": false,
          "Animation": false,
          "AnimationEffect": false,
          "AnimationEvent": false,
          "AnimationPlaybackEvent": false,
          "AnimationTimeline": false,
          "AsyncDisposableStack": false,
          "atob": false,
          "Attr": false,
          "Audio": false,
          "AudioBuffer": false,
          "AudioBufferSourceNode": false,
          "AudioContext": false,
          "AudioData": false,
          "AudioDecoder": false,
          "AudioDestinationNode": false,
          "AudioEncoder": false,
          "AudioListener": false,
          "AudioNode": false,
          "AudioParam": false,
          "AudioParamMap": false,
          "AudioProcessingEvent": false,
          "AudioScheduledSourceNode": false,
          "AudioSinkInfo": false,
          "AudioWorklet": false,
          "AudioWorkletGlobalScope": false,
          "AudioWorkletNode": false,
          "AudioWorkletProcessor": false,
          "AuthenticatorAssertionResponse": false,
          "AuthenticatorAttestationResponse": false,
          "AuthenticatorResponse": false,
          "BackgroundFetchManager": false,
          "BackgroundFetchRecord": false,
          "BackgroundFetchRegistration": false,
          "BarcodeDetector": false,
          "BarProp": false,
          "BaseAudioContext": false,
          "BatteryManager": false,
          "BeforeUnloadEvent": false,
          "BiquadFilterNode": false,
          "Blob": false,
          "BlobEvent": false,
          "Bluetooth": false,
          "BluetoothCharacteristicProperties": false,
          "BluetoothDevice": false,
          "BluetoothRemoteGATTCharacteristic": false,
          "BluetoothRemoteGATTDescriptor": false,
          "BluetoothRemoteGATTServer": false,
          "BluetoothRemoteGATTService": false,
          "BluetoothUUID": false,
          "blur": false,
          "BroadcastChannel": false,
          "BrowserCaptureMediaStreamTrack": false,
          "btoa": false,
          "ByteLengthQueuingStrategy": false,
          "Cache": false,
          "caches": false,
          "CacheStorage": false,
          "cancelAnimationFrame": false,
          "cancelIdleCallback": false,
          "CanvasCaptureMediaStream": false,
          "CanvasCaptureMediaStreamTrack": false,
          "CanvasGradient": false,
          "CanvasPattern": false,
          "CanvasRenderingContext2D": false,
          "CaptureController": false,
          "CaretPosition": false,
          "CDATASection": false,
          "ChannelMergerNode": false,
          "ChannelSplitterNode": false,
          "ChapterInformation": false,
          "CharacterBoundsUpdateEvent": false,
          "CharacterData": false,
          "clearInterval": false,
          "clearTimeout": false,
          "clientInformation": false,
          "Clipboard": false,
          "ClipboardEvent": false,
          "ClipboardItem": false,
          "close": false,
          "closed": false,
          "CloseEvent": false,
          "CloseWatcher": false,
          "CommandEvent": false,
          "Comment": false,
          "CompositionEvent": false,
          "CompressionStream": false,
          "confirm": false,
          "console": false,
          "ConstantSourceNode": false,
          "ContentVisibilityAutoStateChangeEvent": false,
          "ConvolverNode": false,
          "CookieChangeEvent": false,
          "CookieDeprecationLabel": false,
          "cookieStore": false,
          "CookieStore": false,
          "CookieStoreManager": false,
          "CountQueuingStrategy": false,
          "createImageBitmap": false,
          "Credential": false,
          "credentialless": false,
          "CredentialsContainer": false,
          "CropTarget": false,
          "crossOriginIsolated": false,
          "crypto": false,
          "Crypto": false,
          "CryptoKey": false,
          "CSPViolationReportBody": false,
          "CSS": false,
          "CSSAnimation": false,
          "CSSConditionRule": false,
          "CSSContainerRule": false,
          "CSSCounterStyleRule": false,
          "CSSFontFaceRule": false,
          "CSSFontFeatureValuesRule": false,
          "CSSFontPaletteValuesRule": false,
          "CSSGroupingRule": false,
          "CSSImageValue": false,
          "CSSImportRule": false,
          "CSSKeyframeRule": false,
          "CSSKeyframesRule": false,
          "CSSKeywordValue": false,
          "CSSLayerBlockRule": false,
          "CSSLayerStatementRule": false,
          "CSSMarginRule": false,
          "CSSMathClamp": false,
          "CSSMathInvert": false,
          "CSSMathMax": false,
          "CSSMathMin": false,
          "CSSMathNegate": false,
          "CSSMathProduct": false,
          "CSSMathSum": false,
          "CSSMathValue": false,
          "CSSMatrixComponent": false,
          "CSSMediaRule": false,
          "CSSNamespaceRule": false,
          "CSSNestedDeclarations": false,
          "CSSNumericArray": false,
          "CSSNumericValue": false,
          "CSSPageDescriptors": false,
          "CSSPageRule": false,
          "CSSPerspective": false,
          "CSSPositionTryDescriptors": false,
          "CSSPositionTryRule": false,
          "CSSPositionValue": false,
          "CSSPropertyRule": false,
          "CSSRotate": false,
          "CSSRule": false,
          "CSSRuleList": false,
          "CSSScale": false,
          "CSSScopeRule": false,
          "CSSSkew": false,
          "CSSSkewX": false,
          "CSSSkewY": false,
          "CSSStartingStyleRule": false,
          "CSSStyleDeclaration": false,
          "CSSStyleRule": false,
          "CSSStyleSheet": false,
          "CSSStyleValue": false,
          "CSSSupportsRule": false,
          "CSSTransformComponent": false,
          "CSSTransformValue": false,
          "CSSTransition": false,
          "CSSTranslate": false,
          "CSSUnitValue": false,
          "CSSUnparsedValue": false,
          "CSSVariableReferenceValue": false,
          "CSSViewTransitionRule": false,
          "currentFrame": false,
          "currentTime": false,
          "CustomElementRegistry": false,
          "customElements": false,
          "CustomEvent": false,
          "CustomStateSet": false,
          "DataTransfer": false,
          "DataTransferItem": false,
          "DataTransferItemList": false,
          "DecompressionStream": false,
          "DelayNode": false,
          "DelegatedInkTrailPresenter": false,
          "DeviceMotionEvent": false,
          "DeviceMotionEventAcceleration": false,
          "DeviceMotionEventRotationRate": false,
          "DeviceOrientationEvent": false,
          "devicePixelRatio": false,
          "DevicePosture": false,
          "dispatchEvent": false,
          "DisposableStack": false,
          "document": "readonly",
          "Document": false,
          "DocumentFragment": false,
          "documentPictureInPicture": false,
          "DocumentPictureInPicture": false,
          "DocumentPictureInPictureEvent": false,
          "DocumentTimeline": false,
          "DocumentType": false,
          "DOMError": false,
          "DOMException": false,
          "DOMImplementation": false,
          "DOMMatrix": false,
          "DOMMatrixReadOnly": false,
          "DOMParser": false,
          "DOMPoint": false,
          "DOMPointReadOnly": false,
          "DOMQuad": false,
          "DOMRect": false,
          "DOMRectList": false,
          "DOMRectReadOnly": false,
          "DOMStringList": false,
          "DOMStringMap": false,
          "DOMTokenList": false,
          "DragEvent": false,
          "DynamicsCompressorNode": false,
          "EditContext": false,
          "Element": false,
          "ElementInternals": false,
          "EncodedAudioChunk": false,
          "EncodedVideoChunk": false,
          "ErrorEvent": false,
          "event": false,
          "Event": false,
          "EventCounts": false,
          "EventSource": false,
          "EventTarget": false,
          "external": false,
          "External": false,
          "EyeDropper": false,
          "FeaturePolicy": false,
          "FederatedCredential": false,
          "fence": false,
          "Fence": false,
          "FencedFrameConfig": false,
          "fetch": false,
          "fetchLater": false,
          "FetchLaterResult": false,
          "File": false,
          "FileList": false,
          "FileReader": false,
          "FileSystem": false,
          "FileSystemDirectoryEntry": false,
          "FileSystemDirectoryHandle": false,
          "FileSystemDirectoryReader": false,
          "FileSystemEntry": false,
          "FileSystemFileEntry": false,
          "FileSystemFileHandle": false,
          "FileSystemHandle": false,
          "FileSystemObserver": false,
          "FileSystemWritableFileStream": false,
          "find": false,
          "focus": false,
          "FocusEvent": false,
          "FontData": false,
          "FontFace": false,
          "FontFaceSet": false,
          "FontFaceSetLoadEvent": false,
          "FormData": false,
          "FormDataEvent": false,
          "FragmentDirective": false,
          "frameElement": false,
          "frames": false,
          "GainNode": false,
          "Gamepad": false,
          "GamepadAxisMoveEvent": false,
          "GamepadButton": false,
          "GamepadButtonEvent": false,
          "GamepadEvent": false,
          "GamepadHapticActuator": false,
          "GamepadPose": false,
          "Geolocation": false,
          "GeolocationCoordinates": false,
          "GeolocationPosition": false,
          "GeolocationPositionError": false,
          "getComputedStyle": false,
          "getScreenDetails": false,
          "getSelection": false,
          "GPU": false,
          "GPUAdapter": false,
          "GPUAdapterInfo": false,
          "GPUBindGroup": false,
          "GPUBindGroupLayout": false,
          "GPUBuffer": false,
          "GPUBufferUsage": false,
          "GPUCanvasContext": false,
          "GPUColorWrite": false,
          "GPUCommandBuffer": false,
          "GPUCommandEncoder": false,
          "GPUCompilationInfo": false,
          "GPUCompilationMessage": false,
          "GPUComputePassEncoder": false,
          "GPUComputePipeline": false,
          "GPUDevice": false,
          "GPUDeviceLostInfo": false,
          "GPUError": false,
          "GPUExternalTexture": false,
          "GPUInternalError": false,
          "GPUMapMode": false,
          "GPUOutOfMemoryError": false,
          "GPUPipelineError": false,
          "GPUPipelineLayout": false,
          "GPUQuerySet": false,
          "GPUQueue": false,
          "GPURenderBundle": false,
          "GPURenderBundleEncoder": false,
          "GPURenderPassEncoder": false,
          "GPURenderPipeline": false,
          "GPUSampler": false,
          "GPUShaderModule": false,
          "GPUShaderStage": false,
          "GPUSupportedFeatures": false,
          "GPUSupportedLimits": false,
          "GPUTexture": false,
          "GPUTextureUsage": false,
          "GPUTextureView": false,
          "GPUUncapturedErrorEvent": false,
          "GPUValidationError": false,
          "GravitySensor": false,
          "Gyroscope": false,
          "HashChangeEvent": false,
          "Headers": false,
          "HID": false,
          "HIDConnectionEvent": false,
          "HIDDevice": false,
          "HIDInputReportEvent": false,
          "Highlight": false,
          "HighlightRegistry": false,
          "history": false,
          "History": false,
          "HTMLAllCollection": false,
          "HTMLAnchorElement": false,
          "HTMLAreaElement": false,
          "HTMLAudioElement": false,
          "HTMLBaseElement": false,
          "HTMLBodyElement": false,
          "HTMLBRElement": false,
          "HTMLButtonElement": false,
          "HTMLCanvasElement": false,
          "HTMLCollection": false,
          "HTMLDataElement": false,
          "HTMLDataListElement": false,
          "HTMLDetailsElement": false,
          "HTMLDialogElement": false,
          "HTMLDirectoryElement": false,
          "HTMLDivElement": false,
          "HTMLDListElement": false,
          "HTMLDocument": false,
          "HTMLElement": false,
          "HTMLEmbedElement": false,
          "HTMLFencedFrameElement": false,
          "HTMLFieldSetElement": false,
          "HTMLFontElement": false,
          "HTMLFormControlsCollection": false,
          "HTMLFormElement": false,
          "HTMLFrameElement": false,
          "HTMLFrameSetElement": false,
          "HTMLHeadElement": false,
          "HTMLHeadingElement": false,
          "HTMLHRElement": false,
          "HTMLHtmlElement": false,
          "HTMLIFrameElement": false,
          "HTMLImageElement": false,
          "HTMLInputElement": false,
          "HTMLLabelElement": false,
          "HTMLLegendElement": false,
          "HTMLLIElement": false,
          "HTMLLinkElement": false,
          "HTMLMapElement": false,
          "HTMLMarqueeElement": false,
          "HTMLMediaElement": false,
          "HTMLMenuElement": false,
          "HTMLMetaElement": false,
          "HTMLMeterElement": false,
          "HTMLModElement": false,
          "HTMLObjectElement": false,
          "HTMLOListElement": false,
          "HTMLOptGroupElement": false,
          "HTMLOptionElement": false,
          "HTMLOptionsCollection": false,
          "HTMLOutputElement": false,
          "HTMLParagraphElement": false,
          "HTMLParamElement": false,
          "HTMLPictureElement": false,
          "HTMLPreElement": false,
          "HTMLProgressElement": false,
          "HTMLQuoteElement": false,
          "HTMLScriptElement": false,
          "HTMLSelectedContentElement": false,
          "HTMLSelectElement": false,
          "HTMLSlotElement": false,
          "HTMLSourceElement": false,
          "HTMLSpanElement": false,
          "HTMLStyleElement": false,
          "HTMLTableCaptionElement": false,
          "HTMLTableCellElement": false,
          "HTMLTableColElement": false,
          "HTMLTableElement": false,
          "HTMLTableRowElement": false,
          "HTMLTableSectionElement": false,
          "HTMLTemplateElement": false,
          "HTMLTextAreaElement": false,
          "HTMLTimeElement": false,
          "HTMLTitleElement": false,
          "HTMLTrackElement": false,
          "HTMLUListElement": false,
          "HTMLUnknownElement": false,
          "HTMLVideoElement": false,
          "IDBCursor": false,
          "IDBCursorWithValue": false,
          "IDBDatabase": false,
          "IDBFactory": false,
          "IDBIndex": false,
          "IDBKeyRange": false,
          "IDBObjectStore": false,
          "IDBOpenDBRequest": false,
          "IDBRequest": false,
          "IDBTransaction": false,
          "IDBVersionChangeEvent": false,
          "IdentityCredential": false,
          "IdentityCredentialError": false,
          "IdentityProvider": false,
          "IdleDeadline": false,
          "IdleDetector": false,
          "IIRFilterNode": false,
          "Image": false,
          "ImageBitmap": false,
          "ImageBitmapRenderingContext": false,
          "ImageCapture": false,
          "ImageData": false,
          "ImageDecoder": false,
          "ImageTrack": false,
          "ImageTrackList": false,
          "indexedDB": false,
          "Ink": false,
          "innerHeight": false,
          "innerWidth": false,
          "InputDeviceCapabilities": false,
          "InputDeviceInfo": false,
          "InputEvent": false,
          "IntersectionObserver": false,
          "IntersectionObserverEntry": false,
          "isSecureContext": false,
          "Keyboard": false,
          "KeyboardEvent": false,
          "KeyboardLayoutMap": false,
          "KeyframeEffect": false,
          "LanguageDetector": false,
          "LargestContentfulPaint": false,
          "LaunchParams": false,
          "launchQueue": false,
          "LaunchQueue": false,
          "LayoutShift": false,
          "LayoutShiftAttribution": false,
          "length": false,
          "LinearAccelerationSensor": false,
          "localStorage": false,
          "location": true,
          "Location": false,
          "locationbar": false,
          "Lock": false,
          "LockManager": false,
          "matchMedia": false,
          "MathMLElement": false,
          "MediaCapabilities": false,
          "MediaCapabilitiesInfo": false,
          "MediaDeviceInfo": false,
          "MediaDevices": false,
          "MediaElementAudioSourceNode": false,
          "MediaEncryptedEvent": false,
          "MediaError": false,
          "MediaKeyError": false,
          "MediaKeyMessageEvent": false,
          "MediaKeys": false,
          "MediaKeySession": false,
          "MediaKeyStatusMap": false,
          "MediaKeySystemAccess": false,
          "MediaList": false,
          "MediaMetadata": false,
          "MediaQueryList": false,
          "MediaQueryListEvent": false,
          "MediaRecorder": false,
          "MediaRecorderErrorEvent": false,
          "MediaSession": false,
          "MediaSource": false,
          "MediaSourceHandle": false,
          "MediaStream": false,
          "MediaStreamAudioDestinationNode": false,
          "MediaStreamAudioSourceNode": false,
          "MediaStreamEvent": false,
          "MediaStreamTrack": false,
          "MediaStreamTrackAudioSourceNode": false,
          "MediaStreamTrackAudioStats": false,
          "MediaStreamTrackEvent": false,
          "MediaStreamTrackGenerator": false,
          "MediaStreamTrackProcessor": false,
          "MediaStreamTrackVideoStats": false,
          "menubar": false,
          "MessageChannel": false,
          "MessageEvent": false,
          "MessagePort": false,
          "MIDIAccess": false,
          "MIDIConnectionEvent": false,
          "MIDIInput": false,
          "MIDIInputMap": false,
          "MIDIMessageEvent": false,
          "MIDIOutput": false,
          "MIDIOutputMap": false,
          "MIDIPort": false,
          "MimeType": false,
          "MimeTypeArray": false,
          "model": false,
          "ModelGenericSession": false,
          "ModelManager": false,
          "MouseEvent": false,
          "moveBy": false,
          "moveTo": false,
          "MutationEvent": false,
          "MutationObserver": false,
          "MutationRecord": false,
          "name": false,
          "NamedNodeMap": false,
          "NavigateEvent": false,
          "navigation": false,
          "Navigation": false,
          "NavigationActivation": false,
          "NavigationCurrentEntryChangeEvent": false,
          "NavigationDestination": false,
          "NavigationHistoryEntry": false,
          "NavigationPreloadManager": false,
          "NavigationTransition": false,
          "navigator": "readonly",
          "Navigator": false,
          "NavigatorLogin": false,
          "NavigatorManagedData": false,
          "NavigatorUAData": false,
          "NetworkInformation": false,
          "Node": false,
          "NodeFilter": false,
          "NodeIterator": false,
          "NodeList": false,
          "Notification": false,
          "NotifyPaintEvent": false,
          "NotRestoredReasonDetails": false,
          "NotRestoredReasons": false,
          "Observable": false,
          "OfflineAudioCompletionEvent": false,
          "OfflineAudioContext": false,
          "offscreenBuffering": false,
          "OffscreenCanvas": false,
          "OffscreenCanvasRenderingContext2D": false,
          "onabort": true,
          "onafterprint": true,
          "onanimationcancel": true,
          "onanimationend": true,
          "onanimationiteration": true,
          "onanimationstart": true,
          "onappinstalled": true,
          "onauxclick": true,
          "onbeforeinput": true,
          "onbeforeinstallprompt": true,
          "onbeforematch": true,
          "onbeforeprint": true,
          "onbeforetoggle": true,
          "onbeforeunload": true,
          "onbeforexrselect": true,
          "onblur": true,
          "oncancel": true,
          "oncanplay": true,
          "oncanplaythrough": true,
          "onchange": true,
          "onclick": true,
          "onclose": true,
          "oncommand": true,
          "oncontentvisibilityautostatechange": true,
          "oncontextlost": true,
          "oncontextmenu": true,
          "oncontextrestored": true,
          "oncopy": true,
          "oncuechange": true,
          "oncut": true,
          "ondblclick": true,
          "ondevicemotion": true,
          "ondeviceorientation": true,
          "ondeviceorientationabsolute": true,
          "ondrag": true,
          "ondragend": true,
          "ondragenter": true,
          "ondragleave": true,
          "ondragover": true,
          "ondragstart": true,
          "ondrop": true,
          "ondurationchange": true,
          "onemptied": true,
          "onended": true,
          "onerror": true,
          "onfocus": true,
          "onformdata": true,
          "ongamepadconnected": true,
          "ongamepaddisconnected": true,
          "ongotpointercapture": true,
          "onhashchange": true,
          "oninput": true,
          "oninvalid": true,
          "onkeydown": true,
          "onkeypress": true,
          "onkeyup": true,
          "onlanguagechange": true,
          "onload": true,
          "onloadeddata": true,
          "onloadedmetadata": true,
          "onloadstart": true,
          "onlostpointercapture": true,
          "onmessage": true,
          "onmessageerror": true,
          "onmousedown": true,
          "onmouseenter": true,
          "onmouseleave": true,
          "onmousemove": true,
          "onmouseout": true,
          "onmouseover": true,
          "onmouseup": true,
          "onmousewheel": true,
          "onoffline": true,
          "ononline": true,
          "onpagehide": true,
          "onpagereveal": true,
          "onpageshow": true,
          "onpageswap": true,
          "onpaste": true,
          "onpause": true,
          "onplay": true,
          "onplaying": true,
          "onpointercancel": true,
          "onpointerdown": true,
          "onpointerenter": true,
          "onpointerleave": true,
          "onpointermove": true,
          "onpointerout": true,
          "onpointerover": true,
          "onpointerrawupdate": true,
          "onpointerup": true,
          "onpopstate": true,
          "onprogress": true,
          "onratechange": true,
          "onrejectionhandled": true,
          "onreset": true,
          "onresize": true,
          "onscroll": true,
          "onscrollend": true,
          "onscrollsnapchange": true,
          "onscrollsnapchanging": true,
          "onsearch": true,
          "onsecuritypolicyviolation": true,
          "onseeked": true,
          "onseeking": true,
          "onselect": true,
          "onselectionchange": true,
          "onselectstart": true,
          "onslotchange": true,
          "onstalled": true,
          "onstorage": true,
          "onsubmit": true,
          "onsuspend": true,
          "ontimeupdate": true,
          "ontoggle": true,
          "ontransitioncancel": true,
          "ontransitionend": true,
          "ontransitionrun": true,
          "ontransitionstart": true,
          "onunhandledrejection": true,
          "onunload": true,
          "onvolumechange": true,
          "onwaiting": true,
          "onwheel": true,
          "open": false,
          "opener": false,
          "Option": false,
          "OrientationSensor": false,
          "origin": false,
          "originAgentCluster": false,
          "OscillatorNode": false,
          "OTPCredential": false,
          "outerHeight": false,
          "outerWidth": false,
          "OverconstrainedError": false,
          "PageRevealEvent": false,
          "PageSwapEvent": false,
          "PageTransitionEvent": false,
          "pageXOffset": false,
          "pageYOffset": false,
          "PannerNode": false,
          "parent": false,
          "PasswordCredential": false,
          "Path2D": false,
          "PaymentAddress": false,
          "PaymentManager": false,
          "PaymentMethodChangeEvent": false,
          "PaymentRequest": false,
          "PaymentRequestUpdateEvent": false,
          "PaymentResponse": false,
          "performance": false,
          "Performance": false,
          "PerformanceElementTiming": false,
          "PerformanceEntry": false,
          "PerformanceEventTiming": false,
          "PerformanceLongAnimationFrameTiming": false,
          "PerformanceLongTaskTiming": false,
          "PerformanceMark": false,
          "PerformanceMeasure": false,
          "PerformanceNavigation": false,
          "PerformanceNavigationTiming": false,
          "PerformanceObserver": false,
          "PerformanceObserverEntryList": false,
          "PerformancePaintTiming": false,
          "PerformanceResourceTiming": false,
          "PerformanceScriptTiming": false,
          "PerformanceServerTiming": false,
          "PerformanceTiming": false,
          "PeriodicSyncManager": false,
          "PeriodicWave": false,
          "Permissions": false,
          "PermissionStatus": false,
          "PERSISTENT": false,
          "personalbar": false,
          "PictureInPictureEvent": false,
          "PictureInPictureWindow": false,
          "Plugin": false,
          "PluginArray": false,
          "PointerEvent": false,
          "PopStateEvent": false,
          "postMessage": false,
          "Presentation": false,
          "PresentationAvailability": false,
          "PresentationConnection": false,
          "PresentationConnectionAvailableEvent": false,
          "PresentationConnectionCloseEvent": false,
          "PresentationConnectionList": false,
          "PresentationReceiver": false,
          "PresentationRequest": false,
          "PressureObserver": false,
          "PressureRecord": false,
          "print": false,
          "ProcessingInstruction": false,
          "Profiler": false,
          "ProgressEvent": false,
          "PromiseRejectionEvent": false,
          "prompt": false,
          "ProtectedAudience": false,
          "PublicKeyCredential": false,
          "PushManager": false,
          "PushSubscription": false,
          "PushSubscriptionOptions": false,
          "queryLocalFonts": false,
          "queueMicrotask": false,
          "RadioNodeList": false,
          "Range": false,
          "ReadableByteStreamController": false,
          "ReadableStream": false,
          "ReadableStreamBYOBReader": false,
          "ReadableStreamBYOBRequest": false,
          "ReadableStreamDefaultController": false,
          "ReadableStreamDefaultReader": false,
          "registerProcessor": false,
          "RelativeOrientationSensor": false,
          "RemotePlayback": false,
          "removeEventListener": false,
          "ReportBody": false,
          "reportError": false,
          "ReportingObserver": false,
          "Request": false,
          "requestAnimationFrame": false,
          "requestIdleCallback": false,
          "resizeBy": false,
          "ResizeObserver": false,
          "ResizeObserverEntry": false,
          "ResizeObserverSize": false,
          "resizeTo": false,
          "Response": false,
          "RestrictionTarget": false,
          "RTCCertificate": false,
          "RTCDataChannel": false,
          "RTCDataChannelEvent": false,
          "RTCDtlsTransport": false,
          "RTCDTMFSender": false,
          "RTCDTMFToneChangeEvent": false,
          "RTCEncodedAudioFrame": false,
          "RTCEncodedVideoFrame": false,
          "RTCError": false,
          "RTCErrorEvent": false,
          "RTCIceCandidate": false,
          "RTCIceTransport": false,
          "RTCPeerConnection": false,
          "RTCPeerConnectionIceErrorEvent": false,
          "RTCPeerConnectionIceEvent": false,
          "RTCRtpReceiver": false,
          "RTCRtpScriptTransform": false,
          "RTCRtpSender": false,
          "RTCRtpTransceiver": false,
          "RTCSctpTransport": false,
          "RTCSessionDescription": false,
          "RTCStatsReport": false,
          "RTCTrackEvent": false,
          "sampleRate": false,
          "scheduler": false,
          "Scheduler": false,
          "Scheduling": false,
          "screen": false,
          "Screen": false,
          "ScreenDetailed": false,
          "ScreenDetails": false,
          "screenLeft": false,
          "ScreenOrientation": false,
          "screenTop": false,
          "screenX": false,
          "screenY": false,
          "ScriptProcessorNode": false,
          "scroll": false,
          "scrollbars": false,
          "scrollBy": false,
          "ScrollTimeline": false,
          "scrollTo": false,
          "scrollX": false,
          "scrollY": false,
          "SecurityPolicyViolationEvent": false,
          "Selection": false,
          "self": false,
          "Sensor": false,
          "SensorErrorEvent": false,
          "Serial": false,
          "SerialPort": false,
          "ServiceWorker": false,
          "ServiceWorkerContainer": false,
          "ServiceWorkerRegistration": false,
          "sessionStorage": false,
          "setInterval": false,
          "setTimeout": false,
          "ShadowRoot": false,
          "sharedStorage": false,
          "SharedStorage": false,
          "SharedStorageAppendMethod": false,
          "SharedStorageClearMethod": false,
          "SharedStorageDeleteMethod": false,
          "SharedStorageModifierMethod": false,
          "SharedStorageSetMethod": false,
          "SharedStorageWorklet": false,
          "SharedWorker": false,
          "showDirectoryPicker": false,
          "showOpenFilePicker": false,
          "showSaveFilePicker": false,
          "SnapEvent": false,
          "SourceBuffer": false,
          "SourceBufferList": false,
          "speechSynthesis": false,
          "SpeechSynthesis": false,
          "SpeechSynthesisErrorEvent": false,
          "SpeechSynthesisEvent": false,
          "SpeechSynthesisUtterance": false,
          "SpeechSynthesisVoice": false,
          "StaticRange": false,
          "status": false,
          "statusbar": false,
          "StereoPannerNode": false,
          "stop": false,
          "Storage": false,
          "StorageBucket": false,
          "StorageBucketManager": false,
          "StorageEvent": false,
          "StorageManager": false,
          "structuredClone": false,
          "styleMedia": false,
          "StylePropertyMap": false,
          "StylePropertyMapReadOnly": false,
          "StyleSheet": false,
          "StyleSheetList": false,
          "SubmitEvent": false,
          "Subscriber": false,
          "SubtleCrypto": false,
          "SuppressedError": false,
          "SVGAElement": false,
          "SVGAngle": false,
          "SVGAnimatedAngle": false,
          "SVGAnimatedBoolean": false,
          "SVGAnimatedEnumeration": false,
          "SVGAnimatedInteger": false,
          "SVGAnimatedLength": false,
          "SVGAnimatedLengthList": false,
          "SVGAnimatedNumber": false,
          "SVGAnimatedNumberList": false,
          "SVGAnimatedPreserveAspectRatio": false,
          "SVGAnimatedRect": false,
          "SVGAnimatedString": false,
          "SVGAnimatedTransformList": false,
          "SVGAnimateElement": false,
          "SVGAnimateMotionElement": false,
          "SVGAnimateTransformElement": false,
          "SVGAnimationElement": false,
          "SVGCircleElement": false,
          "SVGClipPathElement": false,
          "SVGComponentTransferFunctionElement": false,
          "SVGDefsElement": false,
          "SVGDescElement": false,
          "SVGElement": false,
          "SVGEllipseElement": false,
          "SVGFEBlendElement": false,
          "SVGFEColorMatrixElement": false,
          "SVGFEComponentTransferElement": false,
          "SVGFECompositeElement": false,
          "SVGFEConvolveMatrixElement": false,
          "SVGFEDiffuseLightingElement": false,
          "SVGFEDisplacementMapElement": false,
          "SVGFEDistantLightElement": false,
          "SVGFEDropShadowElement": false,
          "SVGFEFloodElement": false,
          "SVGFEFuncAElement": false,
          "SVGFEFuncBElement": false,
          "SVGFEFuncGElement": false,
          "SVGFEFuncRElement": false,
          "SVGFEGaussianBlurElement": false,
          "SVGFEImageElement": false,
          "SVGFEMergeElement": false,
          "SVGFEMergeNodeElement": false,
          "SVGFEMorphologyElement": false,
          "SVGFEOffsetElement": false,
          "SVGFEPointLightElement": false,
          "SVGFESpecularLightingElement": false,
          "SVGFESpotLightElement": false,
          "SVGFETileElement": false,
          "SVGFETurbulenceElement": false,
          "SVGFilterElement": false,
          "SVGForeignObjectElement": false,
          "SVGGElement": false,
          "SVGGeometryElement": false,
          "SVGGradientElement": false,
          "SVGGraphicsElement": false,
          "SVGImageElement": false,
          "SVGLength": false,
          "SVGLengthList": false,
          "SVGLinearGradientElement": false,
          "SVGLineElement": false,
          "SVGMarkerElement": false,
          "SVGMaskElement": false,
          "SVGMatrix": false,
          "SVGMetadataElement": false,
          "SVGMPathElement": false,
          "SVGNumber": false,
          "SVGNumberList": false,
          "SVGPathElement": false,
          "SVGPatternElement": false,
          "SVGPoint": false,
          "SVGPointList": false,
          "SVGPolygonElement": false,
          "SVGPolylineElement": false,
          "SVGPreserveAspectRatio": false,
          "SVGRadialGradientElement": false,
          "SVGRect": false,
          "SVGRectElement": false,
          "SVGScriptElement": false,
          "SVGSetElement": false,
          "SVGStopElement": false,
          "SVGStringList": false,
          "SVGStyleElement": false,
          "SVGSVGElement": false,
          "SVGSwitchElement": false,
          "SVGSymbolElement": false,
          "SVGTextContentElement": false,
          "SVGTextElement": false,
          "SVGTextPathElement": false,
          "SVGTextPositioningElement": false,
          "SVGTitleElement": false,
          "SVGTransform": false,
          "SVGTransformList": false,
          "SVGTSpanElement": false,
          "SVGUnitTypes": false,
          "SVGUseElement": false,
          "SVGViewElement": false,
          "SyncManager": false,
          "TaskAttributionTiming": false,
          "TaskController": false,
          "TaskPriorityChangeEvent": false,
          "TaskSignal": false,
          "TEMPORARY": false,
          "Text": false,
          "TextDecoder": false,
          "TextDecoderStream": false,
          "TextEncoder": false,
          "TextEncoderStream": false,
          "TextEvent": false,
          "TextFormat": false,
          "TextFormatUpdateEvent": false,
          "TextMetrics": false,
          "TextTrack": false,
          "TextTrackCue": false,
          "TextTrackCueList": false,
          "TextTrackList": false,
          "TextUpdateEvent": false,
          "TimeEvent": false,
          "TimeRanges": false,
          "ToggleEvent": false,
          "toolbar": false,
          "top": false,
          "Touch": false,
          "TouchEvent": false,
          "TouchList": false,
          "TrackEvent": false,
          "TransformStream": false,
          "TransformStreamDefaultController": false,
          "TransitionEvent": false,
          "TreeWalker": false,
          "TrustedHTML": false,
          "TrustedScript": false,
          "TrustedScriptURL": false,
          "TrustedTypePolicy": false,
          "TrustedTypePolicyFactory": false,
          "trustedTypes": false,
          "UIEvent": false,
          "URL": false,
          "URLPattern": false,
          "URLSearchParams": false,
          "USB": false,
          "USBAlternateInterface": false,
          "USBConfiguration": false,
          "USBConnectionEvent": false,
          "USBDevice": false,
          "USBEndpoint": false,
          "USBInterface": false,
          "USBInTransferResult": false,
          "USBIsochronousInTransferPacket": false,
          "USBIsochronousInTransferResult": false,
          "USBIsochronousOutTransferPacket": false,
          "USBIsochronousOutTransferResult": false,
          "USBOutTransferResult": false,
          "UserActivation": false,
          "ValidityState": false,
          "VideoColorSpace": false,
          "VideoDecoder": false,
          "VideoEncoder": false,
          "VideoFrame": false,
          "VideoPlaybackQuality": false,
          "ViewTimeline": false,
          "ViewTransition": false,
          "ViewTransitionTypeSet": false,
          "VirtualKeyboard": false,
          "VirtualKeyboardGeometryChangeEvent": false,
          "VisibilityStateEntry": false,
          "visualViewport": false,
          "VisualViewport": false,
          "VTTCue": false,
          "VTTRegion": false,
          "WakeLock": false,
          "WakeLockSentinel": false,
          "WaveShaperNode": false,
          "WebAssembly": false,
          "WebGL2RenderingContext": false,
          "WebGLActiveInfo": false,
          "WebGLBuffer": false,
          "WebGLContextEvent": false,
          "WebGLFramebuffer": false,
          "WebGLObject": false,
          "WebGLProgram": false,
          "WebGLQuery": false,
          "WebGLRenderbuffer": false,
          "WebGLRenderingContext": false,
          "WebGLSampler": false,
          "WebGLShader": false,
          "WebGLShaderPrecisionFormat": false,
          "WebGLSync": false,
          "WebGLTexture": false,
          "WebGLTransformFeedback": false,
          "WebGLUniformLocation": false,
          "WebGLVertexArrayObject": false,
          "WebSocket": false,
          "WebSocketError": false,
          "WebSocketStream": false,
          "WebTransport": false,
          "WebTransportBidirectionalStream": false,
          "WebTransportDatagramDuplexStream": false,
          "WebTransportError": false,
          "WebTransportReceiveStream": false,
          "WebTransportSendStream": false,
          "WGSLLanguageFeatures": false,
          "WheelEvent": false,
          "when": false,
          "window": "readonly",
          "Window": false,
          "WindowControlsOverlay": false,
          "WindowControlsOverlayGeometryChangeEvent": false,
          "Worker": false,
          "Worklet": false,
          "WorkletGlobalScope": false,
          "WritableStream": false,
          "WritableStreamDefaultController": false,
          "WritableStreamDefaultWriter": false,
          "XMLDocument": false,
          "XMLHttpRequest": false,
          "XMLHttpRequestEventTarget": false,
          "XMLHttpRequestUpload": false,
          "XMLSerializer": false,
          "XPathEvaluator": false,
          "XPathExpression": false,
          "XPathResult": false,
          "XRAnchor": false,
          "XRAnchorSet": false,
          "XRBoundedReferenceSpace": false,
          "XRCamera": false,
          "XRCPUDepthInformation": false,
          "XRDepthInformation": false,
          "XRDOMOverlayState": false,
          "XRFrame": false,
          "XRHand": false,
          "XRHitTestResult": false,
          "XRHitTestSource": false,
          "XRInputSource": false,
          "XRInputSourceArray": false,
          "XRInputSourceEvent": false,
          "XRInputSourcesChangeEvent": false,
          "XRJointPose": false,
          "XRJointSpace": false,
          "XRLayer": false,
          "XRLightEstimate": false,
          "XRLightProbe": false,
          "XRPose": false,
          "XRRay": false,
          "XRReferenceSpace": false,
          "XRReferenceSpaceEvent": false,
          "XRRenderState": false,
          "XRRigidTransform": false,
          "XRSession": false,
          "XRSessionEvent": false,
          "XRSpace": false,
          "XRSystem": false,
          "XRTransientInputHitTestResult": false,
          "XRTransientInputHitTestSource": false,
          "XRView": false,
          "XRViewerPose": false,
          "XRViewport": false,
          "XRWebGLBinding": false,
          "XRWebGLDepthInformation": false,
          "XRWebGLLayer": false,
          "XSLTProcessor": false,
          "__dirname": false,
          "__filename": false,
          "Buffer": false,
          "clearImmediate": false,
          "exports": true,
          "global": false,
          "module": false,
          "process": false,
          "require": false,
          "setImmediate": false
        },
        "parserOptions": {
          "ecmaFeatures": {
            "jsx": true
          },
          "ecmaVersion": 2022,
          "sourceType": "module"
        },
        "sourceType": "module"
      },
      "linterOptions": {
        "reportUnusedDisableDirectives": false
      },
      "name": "xaxa/airbnb/setup",
      "index": 8
    },
    {
      "name": "airbnb/best-practices",
      "plugins": {
        "node": {},
        "style": {}
      },
      "rules": {
        "accessor-pairs": "off",
        "array-callback-return": [
          "error",
          {
            "allowImplicit": true
          }
        ],
        "block-scoped-var": "error",
        "class-methods-use-this": [
          "error",
          {
            "exceptMethods": []
          }
        ],
        "complexity": [
          "error",
          40
        ],
        "consistent-return": "error",
        "curly": [
          "error",
          "multi-line"
        ],
        "default-case": [
          "error",
          {
            "commentPattern": "^no default$"
          }
        ],
        "default-case-last": "error",
        "default-param-last": "error",
        "dot-notation": [
          "error",
          {
            "allowKeywords": true
          }
        ],
        "eqeqeq": [
          "error",
          "always",
          {
            "null": "ignore"
          }
        ],
        "grouped-accessor-pairs": "error",
        "guard-for-in": "error",
        "max-classes-per-file": [
          "error",
          1
        ],
        "no-alert": "warn",
        "no-caller": "error",
        "no-case-declarations": "error",
        "no-constructor-return": "error",
        "no-div-regex": "off",
        "no-else-return": [
          "error",
          {
            "allowElseIf": false
          }
        ],
        "no-empty": [
          "error",
          {
            "allowEmptyCatch": true
          }
        ],
        "no-empty-pattern": "error",
        "no-empty-static-block": "off",
        "no-eq-null": "off",
        "no-eval": "error",
        "no-extend-native": "error",
        "no-extra-bind": "error",
        "no-extra-label": "error",
        "no-fallthrough": "error",
        "no-global-assign": [
          "error",
          {
            "exceptions": []
          }
        ],
        "no-implicit-coercion": [
          "off",
          {
            "allow": [],
            "boolean": false,
            "number": true,
            "string": true
          }
        ],
        "no-implicit-globals": "off",
        "no-implied-eval": "error",
        "no-import-assign": "error",
        "no-invalid-this": "off",
        "no-iterator": "error",
        "no-labels": [
          "error",
          {
            "allowLoop": false,
            "allowSwitch": false
          }
        ],
        "no-lone-blocks": "error",
        "no-loop-func": "error",
        "no-magic-numbers": [
          "off",
          {
            "detectObjects": false,
            "enforceConst": true,
            "ignore": [],
            "ignoreArrayIndexes": true
          }
        ],
        "no-multi-str": "error",
        "no-new": "error",
        "no-new-func": "error",
        "no-new-wrappers": "error",
        "no-nonoctal-decimal-escape": "error",
        "no-object-constructor": "off",
        "no-octal": "error",
        "no-octal-escape": "error",
        "no-param-reassign": [
          "error",
          {
            "ignorePropertyModificationsFor": [
              "err",
              "x",
              "_",
              "opts",
              "flags",
              "options",
              "settings",
              "config",
              "cfg",
              "acc",
              "accumulator",
              "e",
              "ctx",
              "context",
              "req",
              "request",
              "res",
              "response",
              "$scope",
              "staticContext"
            ],
            "props": true
          }
        ],
        "no-proto": "error",
        "no-redeclare": "error",
        "no-restricted-properties": [
          "error",
          {
            "message": "arguments.callee is deprecated",
            "object": "arguments",
            "property": "callee"
          },
          {
            "message": "Please use Number.isFinite instead",
            "object": "global",
            "property": "isFinite"
          },
          {
            "message": "Please use Number.isFinite instead",
            "object": "self",
            "property": "isFinite"
          },
          {
            "message": "Please use Number.isFinite instead",
            "object": "window",
            "property": "isFinite"
          },
          {
            "message": "Please use Number.isNaN instead",
            "object": "global",
            "property": "isNaN"
          },
          {
            "message": "Please use Number.isNaN instead",
            "object": "self",
            "property": "isNaN"
          },
          {
            "message": "Please use Number.isNaN instead",
            "object": "window",
            "property": "isNaN"
          },
          {
            "message": "Please use Object.defineProperty instead.",
            "property": "__defineGetter__"
          },
          {
            "message": "Please use Object.defineProperty instead.",
            "property": "__defineSetter__"
          },
          {
            "message": "Use the exponentiation operator (**) instead.",
            "object": "Math",
            "property": "pow"
          }
        ],
        "no-return-assign": [
          "error",
          "always"
        ],
        "no-return-await": "error",
        "no-script-url": "error",
        "no-self-assign": [
          "error",
          {
            "props": true
          }
        ],
        "no-self-compare": "error",
        "no-sequences": "error",
        "no-throw-literal": "error",
        "no-unmodified-loop-condition": "off",
        "no-unsafe-optional-chaining": [
          "error",
          {
            "disallowArithmeticOperators": true
          }
        ],
        "no-unused-expressions": [
          "error",
          {
            "allowShortCircuit": false,
            "allowTaggedTemplates": false,
            "allowTernary": false
          }
        ],
        "no-unused-labels": "error",
        "no-useless-call": "off",
        "no-useless-catch": "error",
        "no-useless-concat": "error",
        "no-useless-escape": "error",
        "no-useless-return": "error",
        "no-void": "off",
        "no-warning-comments": [
          "off",
          {
            "location": "start",
            "terms": [
              "todo",
              "fixme",
              "xxx"
            ]
          }
        ],
        "no-with": "error",
        "prefer-named-capture-group": "error",
        "prefer-object-has-own": "error",
        "prefer-promise-reject-errors": [
          "error",
          {
            "allowEmptyReject": true
          }
        ],
        "prefer-regex-literals": [
          "error",
          {
            "disallowRedundantWrapping": true
          }
        ],
        "radix": "off",
        "require-await": "off",
        "require-unicode-regexp": "error",
        "style/dot-location": [
          "error",
          "property"
        ],
        "style/function-call-argument-newline": [
          "error",
          "consistent"
        ],
        "style/no-floating-decimal": "error",
        "style/no-multi-spaces": [
          "error",
          {
            "ignoreEOLComments": false
          }
        ],
        "style/no-native-reassign": "off",
        "style/wrap-iife": [
          "error",
          "outside",
          {
            "functionPrototypeMethods": false
          }
        ],
        "vars-on-top": "error",
        "yoda": "error"
      },
      "index": 9
    },
    {
      "name": "airbnb/errors",
      "plugins": {
        "style": {}
      },
      "rules": {
        "for-direction": "error",
        "getter-return": [
          "error",
          {
            "allowImplicit": true
          }
        ],
        "no-async-promise-executor": "error",
        "no-await-in-loop": "error",
        "no-compare-neg-zero": "error",
        "no-cond-assign": [
          "error",
          "always"
        ],
        "no-console": "warn",
        "no-constant-binary-expression": "off",
        "no-constant-condition": "warn",
        "no-control-regex": "error",
        "no-debugger": "error",
        "no-dupe-args": "error",
        "no-dupe-else-if": "error",
        "no-dupe-keys": "error",
        "no-duplicate-case": "error",
        "no-empty": "error",
        "no-empty-character-class": "error",
        "no-ex-assign": "error",
        "no-extra-boolean-cast": "error",
        "no-func-assign": "error",
        "no-import-assign": "error",
        "no-inner-declarations": "error",
        "no-invalid-regexp": "error",
        "no-irregular-whitespace": "error",
        "no-loss-of-precision": "error",
        "no-misleading-character-class": "error",
        "no-new-native-nonconstructor": "error",
        "no-obj-calls": "error",
        "no-promise-executor-return": "error",
        "no-prototype-builtins": "error",
        "no-regex-spaces": "error",
        "no-setter-return": "error",
        "no-sparse-arrays": "error",
        "no-template-curly-in-string": "error",
        "no-unexpected-multiline": "error",
        "no-unreachable": "error",
        "no-unreachable-loop": [
          "error",
          {
            "ignore": []
          }
        ],
        "no-unsafe-finally": "error",
        "no-unsafe-negation": "error",
        "no-unsafe-optional-chaining": [
          "error",
          {
            "disallowArithmeticOperators": true
          }
        ],
        "no-unused-private-class-members": "warn",
        "no-useless-backreference": "error",
        "require-atomic-updates": "off",
        "style/no-extra-parens": [
          "error",
          "all",
          {
            "conditionalAssign": true,
            "enforceForArrowConditionals": false,
            "ignoreJSX": "all",
            "nestedBinaryExpressions": false,
            "returnAssign": false
          }
        ],
        "style/no-extra-semi": "error",
        "use-isnan": [
          "error",
          {
            "enforceForIndexOf": true,
            "enforceForSwitchCase": true
          }
        ],
        "valid-jsdoc": "off",
        "valid-typeof": [
          "error",
          {
            "requireStringLiterals": true
          }
        ]
      },
      "index": 10
    },
    {
      "name": "airbnb/es6-style",
      "plugins": {
        "style": {}
      },
      "rules": {
        "arrow-body-style": [
          "error",
          "as-needed",
          {
            "requireReturnForObjectLiteral": false
          }
        ],
        "constructor-super": "error",
        "no-class-assign": "error",
        "no-const-assign": "error",
        "no-dupe-class-members": "error",
        "no-duplicate-imports": "off",
        "no-new-native-nonconstructor": "error",
        "no-restricted-exports": [
          "error",
          {
            "restrictedNamedExports": [
              "default",
              "then",
              "catch"
            ]
          }
        ],
        "no-restricted-imports": [
          "off",
          {
            "paths": [],
            "patterns": []
          }
        ],
        "no-this-before-super": "error",
        "no-useless-computed-key": "error",
        "no-useless-constructor": "error",
        "no-useless-rename": [
          "error",
          {
            "ignoreDestructuring": false,
            "ignoreExport": true,
            "ignoreImport": true
          }
        ],
        "no-var": "error",
        "object-shorthand": [
          "error",
          "always",
          {
            "avoidQuotes": true,
            "ignoreConstructors": false
          }
        ],
        "prefer-arrow-callback": [
          "error",
          {
            "allowNamedFunctions": false,
            "allowUnboundThis": true
          }
        ],
        "prefer-const": [
          "error",
          {
            "destructuring": "any",
            "ignoreReadBeforeAssign": true
          }
        ],
        "prefer-destructuring": [
          "error",
          {
            "AssignmentExpression": {
              "array": true,
              "object": false
            },
            "VariableDeclarator": {
              "array": false,
              "object": true
            }
          },
          {
            "enforceForRenamedProperties": false
          }
        ],
        "prefer-numeric-literals": "error",
        "prefer-reflect": "error",
        "prefer-rest-params": "error",
        "prefer-spread": "error",
        "prefer-template": "error",
        "require-yield": "error",
        "sort-imports": [
          "off",
          {
            "ignoreCase": false,
            "ignoreDeclarationSort": false,
            "ignoreMemberSort": false,
            "memberSyntaxSortOrder": [
              "none",
              "all",
              "multiple",
              "single"
            ]
          }
        ],
        "style/arrow-parens": [
          "error",
          "always"
        ],
        "style/arrow-spacing": [
          "error",
          {
            "after": true,
            "before": true
          }
        ],
        "style/generator-star-spacing": [
          "error",
          {
            "after": true,
            "before": false
          }
        ],
        "style/no-confusing-arrow": [
          "error",
          {
            "allowParens": true
          }
        ],
        "style/rest-spread-spacing": [
          "error",
          "never"
        ],
        "style/template-curly-spacing": "error",
        "style/yield-star-spacing": [
          "error",
          "after"
        ],
        "symbol-description": "error"
      },
      "index": 11
    },
    {
      "name": "airbnb/specific-to-nodejs",
      "plugins": {
        "node": {},
        "style": {}
      },
      "rules": {
        "node/callback-return": [
          "error",
          [
            "callback",
            "cb",
            "next",
            "done"
          ]
        ],
        "node/global-require": "error",
        "node/handle-callback-err": "off",
        "node/no-new-require": "error",
        "node/no-path-concat": "error",
        "node/no-process-env": "off",
        "node/no-process-exit": "off",
        "node/no-sync": "off",
        "style/no-mixed-requires": [
          "off",
          false
        ],
        "style/no-restricted-modules": "off"
      },
      "index": 12
    },
    {
      "name": "airbnb/general-styling",
      "plugins": {
        "style": {}
      },
      "rules": {
        "camelcase": [
          "error",
          {
            "ignoreDestructuring": false,
            "properties": "never"
          }
        ],
        "capitalized-comments": [
          "off",
          "never",
          {
            "block": {
              "ignoreConsecutiveComments": true,
              "ignoreInlineComments": true,
              "ignorePattern": ".*"
            },
            "line": {
              "ignoreConsecutiveComments": true,
              "ignoreInlineComments": true,
              "ignorePattern": ".*"
            }
          }
        ],
        "consistent-this": "off",
        "func-name-matching": [
          "off",
          "always",
          {
            "considerPropertyDescriptor": true,
            "includeCommonJSModuleExports": false
          }
        ],
        "func-names": "warn",
        "func-style": [
          "off",
          "expression"
        ],
        "id-denylist": "off",
        "id-length": "off",
        "id-match": "off",
        "logical-assignment-operators": [
          "off",
          "always",
          {
            "enforceForIfStatements": true
          }
        ],
        "max-depth": [
          "off",
          4
        ],
        "max-params": [
          "error",
          5
        ],
        "new-cap": [
          "error",
          {
            "capIsNew": false,
            "capIsNewExceptions": [
              "Immutable.Map",
              "Immutable.Set",
              "Immutable.List"
            ],
            "newIsCap": true,
            "newIsCapExceptions": []
          }
        ],
        "no-array-constructor": "error",
        "no-bitwise": "error",
        "no-continue": "error",
        "no-inline-comments": "off",
        "no-lonely-if": "error",
        "no-multi-assign": [
          "error"
        ],
        "no-negated-condition": "off",
        "no-nested-ternary": "error",
        "no-object-constructor": "error",
        "no-plusplus": "error",
        "no-restricted-syntax": [
          "error",
          {
            "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.",
            "selector": "ForInStatement"
          },
          {
            "message": "iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.",
            "selector": "ForOfStatement"
          },
          {
            "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.",
            "selector": "LabeledStatement"
          },
          {
            "message": "the \"with\" is disallowed in strict mode because it makes code impossible to predict and optimize.",
            "selector": "WithStatement"
          }
        ],
        "no-underscore-dangle": [
          "error",
          {
            "allow": [],
            "allowAfterSuper": false,
            "allowAfterThis": false,
            "enforceInMethodNames": true
          }
        ],
        "no-unneeded-ternary": [
          "error",
          {
            "defaultAssignment": false
          }
        ],
        "one-var": [
          "error",
          "never"
        ],
        "operator-assignment": [
          "error",
          "always"
        ],
        "prefer-exponentiation-operator": "error",
        "prefer-object-spread": "error",
        "require-jsdoc": "off",
        "style/array-bracket-spacing": [
          "error",
          "never"
        ],
        "style/block-spacing": [
          "error",
          "always"
        ],
        "style/brace-style": [
          "error",
          "1tbs",
          {
            "allowSingleLine": true
          }
        ],
        "style/comma-dangle": [
          "error",
          {
            "arrays": "always-multiline",
            "exports": "always-multiline",
            "functions": "always-multiline",
            "imports": "always-multiline",
            "objects": "always-multiline"
          }
        ],
        "style/comma-spacing": [
          "error",
          {
            "after": true,
            "before": false
          }
        ],
        "style/comma-style": [
          "error",
          "last",
          {
            "exceptions": {
              "ArrayExpression": false,
              "ArrayPattern": false,
              "ArrowFunctionExpression": false,
              "CallExpression": false,
              "FunctionDeclaration": false,
              "FunctionExpression": false,
              "ImportDeclaration": false,
              "NewExpression": false,
              "ObjectExpression": false,
              "ObjectPattern": false,
              "VariableDeclaration": false
            }
          }
        ],
        "style/computed-property-spacing": [
          "error",
          "never"
        ],
        "style/eol-last": [
          "error",
          "always"
        ],
        "style/function-call-spacing": [
          "error",
          "never"
        ],
        "style/function-paren-newline": [
          "error",
          "multiline-arguments"
        ],
        "style/implicit-arrow-linebreak": [
          "error",
          "beside"
        ],
        "style/indent": [
          "error",
          2,
          {
            "ArrayExpression": 1,
            "CallExpression": {
              "arguments": 1
            },
            "flatTernaryExpressions": false,
            "FunctionDeclaration": {
              "body": 1,
              "parameters": 1
            },
            "FunctionExpression": {
              "body": 1,
              "parameters": 1
            },
            "ignoreComments": false,
            "ignoredNodes": [
              "JSXElement",
              "JSXElement > *",
              "JSXAttribute",
              "JSXIdentifier",
              "JSXNamespacedName",
              "JSXMemberExpression",
              "JSXSpreadAttribute",
              "JSXExpressionContainer",
              "JSXOpeningElement",
              "JSXClosingElement",
              "JSXFragment",
              "JSXOpeningFragment",
              "JSXClosingFragment",
              "JSXText",
              "JSXEmptyExpression",
              "JSXSpreadChild"
            ],
            "ImportDeclaration": 1,
            "ObjectExpression": 1,
            "outerIIFEBody": 1,
            "SwitchCase": 1,
            "VariableDeclarator": 1
          }
        ],
        "style/jsx-quotes": [
          "error",
          "prefer-double"
        ],
        "style/key-spacing": [
          "error",
          {
            "afterColon": true,
            "beforeColon": false
          }
        ],
        "style/keyword-spacing": [
          "error",
          {
            "after": true,
            "before": true,
            "overrides": {
              "case": {
                "after": true
              },
              "return": {
                "after": true
              },
              "throw": {
                "after": true
              }
            }
          }
        ],
        "style/line-comment-position": [
          "off",
          {
            "applyDefaultPatterns": true,
            "ignorePattern": "",
            "position": "above"
          }
        ],
        "style/linebreak-style": [
          "error",
          "unix"
        ],
        "style/lines-around-comment": "off",
        "style/lines-between-class-members": [
          "error",
          "always",
          {
            "exceptAfterSingleLine": false
          }
        ],
        "style/max-len": [
          "error",
          120,
          2,
          {
            "ignoreComments": true,
            "ignoreRegExpLiterals": true,
            "ignoreStrings": true,
            "ignoreTemplateLiterals": true,
            "ignoreUrls": true
          }
        ],
        "style/max-lines": [
          "off",
          {
            "max": 300,
            "skipBlankLines": true,
            "skipComments": true
          }
        ],
        "style/max-lines-per-function": [
          "off",
          {
            "IIFEs": true,
            "max": 50,
            "skipBlankLines": true,
            "skipComments": true
          }
        ],
        "style/max-nested-callbacks": "off",
        "style/max-statements": [
          "off",
          40
        ],
        "style/max-statements-per-line": [
          "error",
          {
            "max": 1
          }
        ],
        "style/multiline-comment-style": [
          "off",
          "starred-block"
        ],
        "style/multiline-ternary": [
          "error",
          "always-multiline"
        ],
        "style/new-parens": "error",
        "style/newline-per-chained-call": [
          "error",
          {
            "ignoreChainWithDepth": 4
          }
        ],
        "style/no-mixed-operators": [
          "error",
          {
            "allowSamePrecedence": false,
            "groups": [
              [
                "%",
                "**"
              ],
              [
                "%",
                "+"
              ],
              [
                "%",
                "-"
              ],
              [
                "%",
                "*"
              ],
              [
                "%",
                "/"
              ],
              [
                "/",
                "*"
              ],
              [
                "&",
                "|",
                "<<",
                ">>",
                ">>>"
              ],
              [
                "==",
                "!=",
                "===",
                "!=="
              ],
              [
                "&&",
                "||"
              ]
            ]
          }
        ],
        "style/no-mixed-spaces-and-tabs": "error",
        "style/no-multiple-empty-lines": [
          "error",
          {
            "max": 1,
            "maxBOF": 0,
            "maxEOF": 0
          }
        ],
        "style/no-spaced-func": "off",
        "style/no-tabs": "error",
        "style/no-ternary": "off",
        "style/no-trailing-spaces": [
          "error",
          {
            "ignoreComments": false,
            "skipBlankLines": false
          }
        ],
        "style/no-whitespace-before-property": "error",
        "style/nonblock-statement-body-position": [
          "error",
          "beside",
          {
            "overrides": {}
          }
        ],
        "style/object-curly-newline": [
          "error",
          {
            "ExportDeclaration": {
              "consistent": true,
              "minProperties": 4,
              "multiline": true
            },
            "ImportDeclaration": {
              "consistent": true,
              "minProperties": 4,
              "multiline": true
            },
            "ObjectExpression": {
              "consistent": true,
              "minProperties": 4,
              "multiline": true
            },
            "ObjectPattern": {
              "consistent": true,
              "minProperties": 4,
              "multiline": true
            }
          }
        ],
        "style/object-curly-spacing": [
          "error",
          "always"
        ],
        "style/object-property-newline": [
          "error",
          {
            "allowAllPropertiesOnSameLine": true
          }
        ],
        "style/one-var-declaration-per-line": [
          "error",
          "always"
        ],
        "style/operator-linebreak": [
          "error",
          "before",
          {
            "overrides": {
              "=": "none"
            }
          }
        ],
        "style/padded-blocks": [
          "error",
          {
            "blocks": "never",
            "classes": "never",
            "switches": "never"
          },
          {
            "allowSingleLineBlocks": true
          }
        ],
        "style/padding-line-between-statements": [
          "error",
          {
            "blankLine": "always",
            "next": "return",
            "prev": [
              "const",
              "let",
              "var"
            ]
          }
        ],
        "style/quote-props": [
          "error",
          "as-needed",
          {
            "keywords": false,
            "numbers": false,
            "unnecessary": true
          }
        ],
        "style/quotes": [
          "error",
          "single",
          {
            "allowTemplateLiterals": true,
            "avoidEscape": true
          }
        ],
        "style/semi": [
          "error",
          "always"
        ],
        "style/semi-spacing": [
          "error",
          {
            "after": true,
            "before": false
          }
        ],
        "style/semi-style": [
          "error",
          "last"
        ],
        "style/sort-keys": [
          "off",
          "asc",
          {
            "caseSensitive": false,
            "natural": true
          }
        ],
        "style/sort-vars": "off",
        "style/space-before-blocks": "error",
        "style/space-before-function-paren": [
          "error",
          {
            "anonymous": "always",
            "asyncArrow": "always",
            "named": "never"
          }
        ],
        "style/space-in-parens": [
          "error",
          "never"
        ],
        "style/space-infix-ops": "error",
        "style/space-unary-ops": [
          "error",
          {
            "nonwords": false,
            "overrides": {},
            "words": true
          }
        ],
        "style/spaced-comment": [
          "error",
          "always",
          {
            "block": {
              "balanced": true,
              "exceptions": [
                "-",
                "+"
              ],
              "markers": [
                "=",
                "!",
                ":",
                "::"
              ]
            },
            "line": {
              "exceptions": [
                "-",
                "+"
              ],
              "markers": [
                "=",
                "!",
                "/"
              ]
            }
          }
        ],
        "style/switch-colon-spacing": [
          "error",
          {
            "after": true,
            "before": false
          }
        ],
        "style/template-tag-spacing": [
          "error",
          "never"
        ],
        "style/wrap-regex": "off",
        "unicode-bom": [
          "error",
          "never"
        ]
      },
      "index": 13
    },
    {
      "name": "airbnb/variables",
      "rules": {
        "init-declarations": "off",
        "no-delete-var": "error",
        "no-label-var": "error",
        "no-restricted-globals": [
          "error",
          {
            "message": "Use Number.isFinite instead https://github.com/airbnb/javascript#standard-library--isfinite",
            "name": "isFinite"
          },
          {
            "message": "Use Number.isNaN instead https://github.com/airbnb/javascript#standard-library--isnan",
            "name": "isNaN"
          },
          {
            "message": "Use window.addEventListener instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "addEventListener"
          },
          {
            "message": "Use window.blur instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "blur"
          },
          {
            "message": "Use window.close instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "close"
          },
          {
            "message": "Use window.closed instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "closed"
          },
          {
            "message": "Use window.confirm instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "confirm"
          },
          {
            "message": "Use window.defaultStatus instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "defaultStatus"
          },
          {
            "message": "Use window.defaultstatus instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "defaultstatus"
          },
          {
            "message": "Use window.event instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "event"
          },
          {
            "message": "Use window.external instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "external"
          },
          {
            "message": "Use window.find instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "find"
          },
          {
            "message": "Use window.focus instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "focus"
          },
          {
            "message": "Use window.frameElement instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "frameElement"
          },
          {
            "message": "Use window.frames instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "frames"
          },
          {
            "message": "Use window.history instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "history"
          },
          {
            "message": "Use window.innerHeight instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "innerHeight"
          },
          {
            "message": "Use window.innerWidth instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "innerWidth"
          },
          {
            "message": "Use window.length instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "length"
          },
          {
            "message": "Use window.location instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "location"
          },
          {
            "message": "Use window.locationbar instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "locationbar"
          },
          {
            "message": "Use window.menubar instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "menubar"
          },
          {
            "message": "Use window.moveBy instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "moveBy"
          },
          {
            "message": "Use window.moveTo instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "moveTo"
          },
          {
            "message": "Use window.name instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "name"
          },
          {
            "message": "Use window.onblur instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "onblur"
          },
          {
            "message": "Use window.onerror instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "onerror"
          },
          {
            "message": "Use window.onfocus instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "onfocus"
          },
          {
            "message": "Use window.onload instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "onload"
          },
          {
            "message": "Use window.onresize instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "onresize"
          },
          {
            "message": "Use window.onunload instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "onunload"
          },
          {
            "message": "Use window.open instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "open"
          },
          {
            "message": "Use window.opener instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "opener"
          },
          {
            "message": "Use window.opera instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "opera"
          },
          {
            "message": "Use window.outerHeight instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "outerHeight"
          },
          {
            "message": "Use window.outerWidth instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "outerWidth"
          },
          {
            "message": "Use window.pageXOffset instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "pageXOffset"
          },
          {
            "message": "Use window.pageYOffset instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "pageYOffset"
          },
          {
            "message": "Use window.parent instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "parent"
          },
          {
            "message": "Use window.print instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "print"
          },
          {
            "message": "Use window.removeEventListener instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "removeEventListener"
          },
          {
            "message": "Use window.resizeBy instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "resizeBy"
          },
          {
            "message": "Use window.resizeTo instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "resizeTo"
          },
          {
            "message": "Use window.screen instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "screen"
          },
          {
            "message": "Use window.screenLeft instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "screenLeft"
          },
          {
            "message": "Use window.screenTop instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "screenTop"
          },
          {
            "message": "Use window.screenX instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "screenX"
          },
          {
            "message": "Use window.screenY instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "screenY"
          },
          {
            "message": "Use window.scroll instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "scroll"
          },
          {
            "message": "Use window.scrollbars instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "scrollbars"
          },
          {
            "message": "Use window.scrollBy instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "scrollBy"
          },
          {
            "message": "Use window.scrollTo instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "scrollTo"
          },
          {
            "message": "Use window.scrollX instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "scrollX"
          },
          {
            "message": "Use window.scrollY instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "scrollY"
          },
          {
            "message": "Use window.self instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "self"
          },
          {
            "message": "Use window.status instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "status"
          },
          {
            "message": "Use window.statusbar instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "statusbar"
          },
          {
            "message": "Use window.stop instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "stop"
          },
          {
            "message": "Use window.toolbar instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "toolbar"
          },
          {
            "message": "Use window.top instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md",
            "name": "top"
          }
        ],
        "no-shadow": "error",
        "no-shadow-restricted-names": "error",
        "no-undef": "error",
        "no-undef-init": "error",
        "no-undefined": "error",
        "no-unused-vars": [
          "error",
          {
            "args": "after-used",
            "argsIgnorePattern": "^_",
            "ignoreRestSiblings": true,
            "vars": "all",
            "varsIgnorePattern": "^_"
          }
        ],
        "no-use-before-define": [
          "off",
          {
            "classes": true,
            "functions": true,
            "variables": true
          }
        ]
      },
      "index": 14
    },
    {
      "name": "airbnb/import-rules",
      "plugins": {
        "import": {}
      },
      "rules": {
        "import/consistent-type-specifier-style": [
          "off",
          "prefer-inline"
        ],
        "import/default": "off",
        "import/dynamic-import-chunkname": [
          "off",
          {
            "importFunctions": [],
            "webpackChunknameFormat": "[0-9a-zA-Z-_/.]+"
          }
        ],
        "import/export": "error",
        "import/exports-last": "error",
        "import/extensions": [
          "error",
          "always",
          {
            "ignorePackages": true,
            "js": "always",
            "jsx": "always",
            "mjs": "always",
            "ts": "always",
            "tsx": "always"
          }
        ],
        "import/first": "error",
        "import/group-exports": "off",
        "import/imports-first": "error",
        "import/max-dependencies": [
          "warn",
          {
            "max": 50
          }
        ],
        "import/named": "error",
        "import/namespace": [
          "error",
          {
            "allowComputed": true
          }
        ],
        "import/newline-after-import": "error",
        "import/no-absolute-path": "error",
        "import/no-amd": "error",
        "import/no-anonymous-default-export": [
          "off",
          {
            "allowAnonymousClass": false,
            "allowAnonymousFunction": false,
            "allowArray": false,
            "allowArrowFunction": false,
            "allowLiteral": false,
            "allowObject": false
          }
        ],
        "import/no-commonjs": "error",
        "import/no-cycle": [
          "error",
          {
            "maxDepth": "∞"
          }
        ],
        "import/no-default-export": "off",
        "import/no-deprecated": "error",
        "import/no-duplicates": "error",
        "import/no-dynamic-require": "error",
        "import/no-empty-named-blocks": "off",
        "import/no-extraneous-dependencies": [
          "error",
          {
            "devDependencies": [
              "test/**",
              "tests/**",
              "spec/**",
              "**/__tests__/**",
              "**/__mocks__/**",
              "test.{js,jsx,ts,tsx}",
              "test-*.{js,jsx}",
              "**/*{.,_}{test,spec}.{js,jsx,ts,tsx}",
              "**/jest.config.js",
              "**/jest.setup.js",
              "**/vue.config.js",
              "**/webpack.config.js",
              "**/webpack.config.*.js",
              "**/rollup.config.js",
              "**/rollup.config.*.js",
              "**/gulpfile.js",
              "**/gulpfile.*.js",
              "**/Gruntfile{,.js}",
              "**/protractor.conf.js",
              "**/protractor.conf.*.js",
              "**/karma.conf.js",
              "**/.eslintrc.js",
              "**/eslint.config.{js,ts,mjs}"
            ],
            "optionalDependencies": false
          }
        ],
        "import/no-import-module-exports": [
          "error",
          {
            "exceptions": []
          }
        ],
        "import/no-internal-modules": [
          "off",
          {
            "allow": []
          }
        ],
        "import/no-mutable-exports": "error",
        "import/no-named-as-default": "off",
        "import/no-named-as-default-member": "error",
        "import/no-named-default": "error",
        "import/no-named-export": "off",
        "import/no-namespace": "off",
        "import/no-nodejs-modules": "off",
        "import/no-relative-packages": "off",
        "import/no-relative-parent-imports": "off",
        "import/no-restricted-paths": "off",
        "import/no-self-import": "error",
        "import/no-unassigned-import": "off",
        "import/no-unresolved": [
          "error",
          {
            "caseSensitive": true,
            "commonjs": false,
            "ignore": [
              "^astro:*",
              "^bun:*",
              "^bun$",
              "^npm:*",
              "^jsr:*",
              "^cloudflare:*"
            ]
          }
        ],
        "import/no-useless-path-segments": [
          "error",
          {
            "commonjs": false,
            "noUselessIndex": false
          }
        ],
        "import/no-webpack-loader-syntax": "error",
        "import/order": "off",
        "import/prefer-default-export": "off",
        "import/unambiguous": "off"
      },
      "index": 15
    },
    {
      "name": "xaxa/airbnb/user-overrides",
      "rules": {},
      "index": 16
    },
    {
      "name": "xaxa/node/rules",
      "plugins": {
        "node": {}
      },
      "rules": {
        "node/file-extension-in-import": "off",
        "node/handle-callback-err": [
          "error",
          "^(err|error|_err|_error|_er)$"
        ],
        "node/no-deprecated-api": "error",
        "node/no-exports-assign": "error",
        "node/no-missing-import": "error",
        "node/no-new-require": "error",
        "node/no-path-concat": "error",
        "node/no-unpublished-bin": "error",
        "node/no-unpublished-import": "error",
        "node/prefer-global/buffer": "off",
        "node/prefer-global/process": "off",
        "node/process-exit-as-throw": "off"
      },
      "index": 17
    },
    {
      "name": "xaxa/node/user-overrides",
      "rules": {},
      "index": 18
    },
    {
      "name": "xaxa/promise/rules",
      "plugins": {
        "promise": {}
      },
      "rules": {
        "promise/always-return": "off",
        "promise/avoid-new": "off",
        "promise/catch-or-return": "off",
        "promise/no-callback-in-promise": "off",
        "promise/no-native": "off",
        "promise/no-nesting": "off",
        "promise/no-new-statics": "error",
        "promise/no-promise-in-callback": "off",
        "promise/no-return-in-finally": "error",
        "promise/no-return-wrap": [
          "error",
          {
            "allowReject": true
          }
        ],
        "promise/param-names": "error",
        "promise/prefer-await-to-callbacks": "off",
        "promise/prefer-await-to-then": "off",
        "promise/valid-params": "error"
      },
      "index": 19
    },
    {
      "name": "xaxa/promise/user-overrides",
      "rules": {},
      "index": 20
    },
    {
      "name": "xaxa/perfectionist/setup",
      "plugins": {
        "perfectionist": {}
      },
      "rules": {
        "perfectionist/sort-array-includes": "off",
        "perfectionist/sort-exports": [
          "error",
          {
            "order": "asc",
            "type": "natural"
          }
        ],
        "perfectionist/sort-imports": [
          "error",
          {
            "newlinesBetween": "always",
            "order": "asc",
            "type": "alphabetical"
          }
        ],
        "perfectionist/sort-named-exports": [
          "error",
          {
            "order": "asc",
            "type": "natural"
          }
        ],
        "perfectionist/sort-named-imports": [
          "error",
          {
            "order": "asc",
            "type": "natural"
          }
        ],
        "perfectionist/sort-objects": [
          "error",
          {
            "type": "alphabetical"
          }
        ]
      },
      "index": 21
    },
    {
      "name": "xaxa/perfectionist/user-overrides",
      "rules": {},
      "index": 22
    },
    {
      "name": "xaxa/unicorn/rules",
      "plugins": {
        "unicorn": {}
      },
      "rules": {
        "unicorn/catch-error-name": [
          "error",
          {
            "name": "err"
          }
        ],
        "unicorn/consistent-destructuring ": "off",
        "unicorn/custom-error-definition": "error",
        "unicorn/expiring-todo-comments": "off",
        "unicorn/filename-case": "off",
        "unicorn/import-index": "off",
        "unicorn/no-array-reduce": "off",
        "unicorn/no-await-expression-member": "off",
        "unicorn/no-null": "off",
        "unicorn/no-process-exit": "off",
        "unicorn/no-unreadable-array-destructuring": "error",
        "unicorn/no-unused-properties": "error",
        "unicorn/no-useless-spread": "off",
        "unicorn/prefer-add-event-listener": "off",
        "unicorn/prefer-spread": "off",
        "unicorn/prefer-switch": "off",
        "unicorn/prevent-abbreviations": "off"
      },
      "index": 23
    },
    {
      "name": "xaxa/unicorn/user-overrides",
      "rules": {},
      "index": 24
    },
    {
      "rules": {
        "no-control-regex": "error",
        "no-misleading-character-class": "error",
        "no-regex-spaces": "error",
        "prefer-regex-literals": "error",
        "no-invalid-regexp": "off",
        "no-useless-backreference": "off",
        "no-empty-character-class": "off",
        "regexp/confusing-quantifier": "warn",
        "regexp/control-character-escape": "error",
        "regexp/match-any": "error",
        "regexp/negation": "error",
        "regexp/no-contradiction-with-assertion": "error",
        "regexp/no-dupe-characters-character-class": "error",
        "regexp/no-dupe-disjunctions": "error",
        "regexp/no-empty-alternative": "warn",
        "regexp/no-empty-capturing-group": "error",
        "regexp/no-empty-character-class": "error",
        "regexp/no-empty-group": "error",
        "regexp/no-empty-lookarounds-assertion": "error",
        "regexp/no-empty-string-literal": "error",
        "regexp/no-escape-backspace": "error",
        "regexp/no-extra-lookaround-assertions": "error",
        "regexp/no-invalid-regexp": "error",
        "regexp/no-invisible-character": "error",
        "regexp/no-lazy-ends": "warn",
        "regexp/no-legacy-features": "error",
        "regexp/no-misleading-capturing-group": "error",
        "regexp/no-misleading-unicode-character": "error",
        "regexp/no-missing-g-flag": "error",
        "regexp/no-non-standard-flag": "error",
        "regexp/no-obscure-range": "error",
        "regexp/no-optional-assertion": "error",
        "regexp/no-potentially-useless-backreference": "warn",
        "regexp/no-super-linear-backtracking": "error",
        "regexp/no-trivially-nested-assertion": "error",
        "regexp/no-trivially-nested-quantifier": "error",
        "regexp/no-unused-capturing-group": "error",
        "regexp/no-useless-assertions": "error",
        "regexp/no-useless-backreference": "error",
        "regexp/no-useless-character-class": "error",
        "regexp/no-useless-dollar-replacements": "error",
        "regexp/no-useless-escape": "error",
        "regexp/no-useless-flag": "warn",
        "regexp/no-useless-lazy": "error",
        "regexp/no-useless-non-capturing-group": "error",
        "regexp/no-useless-quantifier": "error",
        "regexp/no-useless-range": "error",
        "regexp/no-useless-set-operand": "error",
        "regexp/no-useless-string-literal": "error",
        "regexp/no-useless-two-nums-quantifier": "error",
        "regexp/no-zero-quantifier": "error",
        "regexp/optimal-lookaround-quantifier": "warn",
        "regexp/optimal-quantifier-concatenation": "error",
        "regexp/prefer-character-class": "error",
        "regexp/prefer-d": "error",
        "regexp/prefer-plus-quantifier": "error",
        "regexp/prefer-predefined-assertion": "error",
        "regexp/prefer-question-quantifier": "error",
        "regexp/prefer-range": "error",
        "regexp/prefer-set-operation": "error",
        "regexp/prefer-star-quantifier": "error",
        "regexp/prefer-unicode-codepoint-escapes": "error",
        "regexp/prefer-w": "error",
        "regexp/simplify-set-operations": "error",
        "regexp/sort-flags": "error",
        "regexp/strict": "error",
        "regexp/use-ignore-case": "error"
      },
      "plugins": {
        "regexp": {}
      },
      "name": "antfu/regexp/rules",
      "index": 25
    },
    {
      "name": "antfu/unocss",
      "plugins": {
        "unocss": {}
      },
      "rules": {
        "unocss/order": "error",
        "unocss/order-attributify": "error"
      },
      "index": 26
    },
    {
      "name": "xaxa/unocss/overrides",
      "rules": {},
      "index": 27
    },
    {
      "name": "antfu/typescript/setup",
      "plugins": {
        "antfu": {},
        "ts": {}
      },
      "index": 28
    },
    {
      "files": [
        "**/*.?([cm])ts",
        "**/*.?([cm])tsx"
      ],
      "languageOptions": {
        "parser": "typescript-eslint/parser",
        "parserOptions": {
          "extraFileExtensions": [],
          "sourceType": "module"
        }
      },
      "name": "antfu/typescript/parser",
      "index": 29
    },
    {
      "files": [
        "**/*.?([cm])ts",
        "**/*.?([cm])tsx"
      ],
      "name": "antfu/typescript/rules",
      "rules": {
        "constructor-super": "off",
        "getter-return": "off",
        "no-class-assign": "off",
        "no-const-assign": "off",
        "no-dupe-args": "off",
        "no-dupe-class-members": "off",
        "no-dupe-keys": "off",
        "no-func-assign": "off",
        "no-import-assign": "off",
        "no-new-native-nonconstructor": "off",
        "no-new-symbol": "off",
        "no-obj-calls": "off",
        "no-redeclare": "off",
        "no-setter-return": "off",
        "no-this-before-super": "off",
        "no-undef": "off",
        "no-unreachable": "off",
        "no-unsafe-negation": "off",
        "no-var": "error",
        "no-with": "off",
        "prefer-const": "error",
        "prefer-rest-params": "error",
        "prefer-spread": "error",
        "ts/ban-ts-comment": [
          "error",
          {
            "ts-expect-error": "allow-with-description"
          }
        ],
        "no-array-constructor": "off",
        "ts/no-array-constructor": "error",
        "ts/no-duplicate-enum-values": "error",
        "ts/no-dynamic-delete": "off",
        "ts/no-empty-object-type": [
          "error",
          {
            "allowInterfaces": "always"
          }
        ],
        "ts/no-explicit-any": "off",
        "ts/no-extra-non-null-assertion": "error",
        "ts/no-extraneous-class": "off",
        "ts/no-invalid-void-type": "off",
        "ts/no-misused-new": "error",
        "ts/no-namespace": "error",
        "ts/no-non-null-asserted-nullish-coalescing": "error",
        "ts/no-non-null-asserted-optional-chain": "error",
        "ts/no-non-null-assertion": "off",
        "ts/no-require-imports": "error",
        "ts/no-this-alias": "error",
        "ts/no-unnecessary-type-constraint": "error",
        "ts/no-unsafe-declaration-merging": "error",
        "ts/no-unsafe-function-type": "error",
        "no-unused-expressions": "off",
        "ts/no-unused-expressions": [
          "error",
          {
            "allowShortCircuit": true,
            "allowTaggedTemplates": true,
            "allowTernary": true
          }
        ],
        "no-unused-vars": "off",
        "ts/no-unused-vars": "off",
        "no-useless-constructor": "off",
        "ts/no-useless-constructor": "off",
        "ts/no-wrapper-object-types": "error",
        "ts/prefer-as-const": "error",
        "ts/prefer-literal-enum-member": "error",
        "ts/prefer-namespace-keyword": "error",
        "ts/triple-slash-reference": "off",
        "ts/unified-signatures": "off",
        "no-use-before-define": "off",
        "ts/consistent-type-definitions": [
          "error",
          "interface"
        ],
        "ts/consistent-type-imports": [
          "error",
          {
            "disallowTypeAnnotations": false,
            "fixStyle": "separate-type-imports",
            "prefer": "type-imports"
          }
        ],
        "ts/method-signature-style": [
          "error",
          "property"
        ],
        "ts/no-dupe-class-members": "error",
        "ts/no-import-type-side-effects": "error",
        "ts/no-redeclare": [
          "error",
          {
            "builtinGlobals": false
          }
        ],
        "ts/no-use-before-define": [
          "error",
          {
            "classes": false,
            "functions": false,
            "variables": true
          }
        ],
        "ts/explicit-function-return-type": [
          "error",
          {
            "allowExpressions": true,
            "allowHigherOrderFunctions": true,
            "allowIIFEs": true
          }
        ]
      },
      "index": 30
    },
    {
      "name": "antfu/markdown/setup",
      "plugins": {
        "markdown": {}
      },
      "index": 31
    },
    {
      "files": [
        "**/*.md"
      ],
      "ignores": [
        "**/*.md/*.md"
      ],
      "name": "antfu/markdown/processor",
      "processor": "merged-processor:@eslint/markdown/markdown+pass-through",
      "index": 32
    },
    {
      "files": [
        "**/*.md"
      ],
      "languageOptions": {
        "parser": "parser-plain"
      },
      "name": "antfu/markdown/parser",
      "index": 33
    },
    {
      "files": [
        "**/*.md/**/*.?([cm])[jt]s?(x)"
      ],
      "languageOptions": {
        "parserOptions": {
          "ecmaFeatures": {
            "impliedStrict": true
          }
        }
      },
      "name": "antfu/markdown/disables",
      "rules": {
        "antfu/no-top-level-await": "off",
        "no-alert": "off",
        "no-console": "off",
        "no-labels": "off",
        "no-lone-blocks": "off",
        "no-restricted-syntax": "off",
        "no-undef": "off",
        "no-unused-expressions": "off",
        "no-unused-labels": "off",
        "no-unused-vars": "off",
        "node/prefer-global/process": "off",
        "style/comma-dangle": "off",
        "style/eol-last": "off",
        "style/padding-line-between-statements": "off",
        "ts/consistent-type-imports": "off",
        "ts/explicit-function-return-type": "off",
        "ts/no-namespace": "off",
        "ts/no-redeclare": "off",
        "ts/no-require-imports": "off",
        "ts/no-unused-expressions": "off",
        "ts/no-unused-vars": "off",
        "ts/no-use-before-define": "off",
        "unicode-bom": "off",
        "unused-imports/no-unused-imports": "off",
        "unused-imports/no-unused-vars": "off"
      },
      "index": 34
    },
    {
      "name": "xaxa/stylistic/setup",
      "plugins": {
        "antfu": {},
        "style": {}
      },
      "rules": {
        "style/array-bracket-spacing": [
          "error",
          "never"
        ],
        "style/arrow-parens": [
          "error",
          "always",
          {
            "requireForBlockBody": true
          }
        ],
        "style/arrow-spacing": [
          "error",
          {
            "after": true,
            "before": true
          }
        ],
        "style/block-spacing": [
          "error",
          "always"
        ],
        "style/brace-style": [
          "error",
          "1tbs",
          {
            "allowSingleLine": true
          }
        ],
        "style/comma-dangle": [
          "error",
          "always-multiline"
        ],
        "style/comma-spacing": [
          "error",
          {
            "after": true,
            "before": false
          }
        ],
        "style/comma-style": [
          "error",
          "last"
        ],
        "style/computed-property-spacing": [
          "error",
          "never",
          {
            "enforceForClassMembers": true
          }
        ],
        "style/dot-location": [
          "error",
          "property"
        ],
        "style/eol-last": "error",
        "style/generator-star-spacing": [
          "error",
          {
            "after": true,
            "before": false
          }
        ],
        "style/indent": [
          "error",
          2,
          {
            "ArrayExpression": 1,
            "CallExpression": {
              "arguments": 1
            },
            "flatTernaryExpressions": false,
            "FunctionDeclaration": {
              "body": 1,
              "parameters": 1
            },
            "FunctionExpression": {
              "body": 1,
              "parameters": 1
            },
            "ignoreComments": false,
            "ignoredNodes": [
              "TSUnionType",
              "TSIntersectionType",
              "TSTypeParameterInstantiation",
              "FunctionExpression > .params[decorators.length > 0]",
              "FunctionExpression > .params > :matches(Decorator, :not(:first-child))"
            ],
            "ImportDeclaration": 1,
            "MemberExpression": 1,
            "ObjectExpression": 1,
            "offsetTernaryExpressions": true,
            "outerIIFEBody": 1,
            "SwitchCase": 1,
            "tabLength": 2,
            "VariableDeclarator": 1
          }
        ],
        "style/indent-binary-ops": [
          "error",
          2
        ],
        "style/key-spacing": [
          "error",
          {
            "afterColon": true,
            "beforeColon": false
          }
        ],
        "style/keyword-spacing": [
          "error",
          {
            "after": true,
            "before": true
          }
        ],
        "style/lines-between-class-members": [
          "error",
          "always",
          {
            "exceptAfterSingleLine": true
          }
        ],
        "style/max-statements-per-line": [
          "error",
          {
            "max": 1
          }
        ],
        "style/member-delimiter-style": [
          "error",
          {
            "multiline": {
              "delimiter": "semi",
              "requireLast": true
            },
            "multilineDetection": "brackets",
            "overrides": {
              "interface": {
                "multiline": {
                  "delimiter": "semi",
                  "requireLast": true
                }
              }
            },
            "singleline": {
              "delimiter": "semi"
            }
          }
        ],
        "style/multiline-ternary": [
          "error",
          "always-multiline"
        ],
        "style/new-parens": "error",
        "style/no-extra-parens": [
          "error",
          "functions"
        ],
        "style/no-floating-decimal": "error",
        "style/no-mixed-operators": [
          "error",
          {
            "allowSamePrecedence": true,
            "groups": [
              [
                "==",
                "!=",
                "===",
                "!==",
                ">",
                ">=",
                "<",
                "<="
              ],
              [
                "&&",
                "||"
              ],
              [
                "in",
                "instanceof"
              ]
            ]
          }
        ],
        "style/no-mixed-spaces-and-tabs": "error",
        "style/no-multi-spaces": "error",
        "style/no-multiple-empty-lines": [
          "error",
          {
            "max": 1,
            "maxBOF": 0,
            "maxEOF": 0
          }
        ],
        "style/no-tabs": "error",
        "style/no-trailing-spaces": "error",
        "style/no-whitespace-before-property": "error",
        "style/object-curly-spacing": [
          "error",
          "always"
        ],
        "style/operator-linebreak": [
          "error",
          "before"
        ],
        "style/padded-blocks": [
          "error",
          {
            "blocks": "never",
            "classes": "never",
            "switches": "never"
          }
        ],
        "style/quote-props": [
          "error",
          "consistent-as-needed"
        ],
        "style/quotes": [
          "error",
          "single",
          {
            "allowTemplateLiterals": true,
            "avoidEscape": false
          }
        ],
        "style/rest-spread-spacing": [
          "error",
          "never"
        ],
        "style/semi": [
          "error",
          "always"
        ],
        "style/semi-spacing": [
          "error",
          {
            "after": true,
            "before": false
          }
        ],
        "style/space-before-blocks": [
          "error",
          "always"
        ],
        "style/space-before-function-paren": [
          "error",
          {
            "anonymous": "always",
            "asyncArrow": "always",
            "named": "never"
          }
        ],
        "style/space-in-parens": [
          "error",
          "never"
        ],
        "style/space-infix-ops": "error",
        "style/space-unary-ops": [
          "error",
          {
            "nonwords": false,
            "words": true
          }
        ],
        "style/spaced-comment": [
          "error",
          "always",
          {
            "block": {
              "balanced": true,
              "exceptions": [
                "*"
              ],
              "markers": [
                "!"
              ]
            },
            "line": {
              "exceptions": [
                "/",
                "#"
              ],
              "markers": [
                "/"
              ]
            }
          }
        ],
        "style/template-curly-spacing": "error",
        "style/template-tag-spacing": [
          "error",
          "never"
        ],
        "style/type-annotation-spacing": [
          "error",
          {}
        ],
        "style/type-generic-spacing": "error",
        "style/type-named-tuple-spacing": "error",
        "style/wrap-iife": [
          "error",
          "any",
          {
            "functionPrototypeMethods": true
          }
        ],
        "style/yield-star-spacing": [
          "error",
          {
            "after": true,
            "before": false
          }
        ],
        "antfu/consistent-chaining": "error",
        "antfu/consistent-list-newline": "off",
        "antfu/curly": "error",
        "antfu/if-newline": "error",
        "antfu/import-dedupe": "error",
        "antfu/no-import-dist": "error",
        "antfu/no-import-node-modules-by-path": "error",
        "antfu/no-top-level-await": "off",
        "antfu/no-ts-export-equal": "error",
        "antfu/top-level-function": "error"
      },
      "index": 35
    },
    {
      "files": [
        "**/*.?([cm])tsx",
        "**/*.?([cm])jsx"
      ],
      "name": "xaxa/stylistic/jsx-files",
      "plugins": {
        "style": {}
      },
      "rules": {
        "style/array-bracket-spacing": [
          "error",
          "never"
        ],
        "style/arrow-parens": [
          "error",
          "always",
          {
            "requireForBlockBody": true
          }
        ],
        "style/arrow-spacing": [
          "error",
          {
            "after": true,
            "before": true
          }
        ],
        "style/block-spacing": [
          "error",
          "always"
        ],
        "style/brace-style": [
          "error",
          "1tbs",
          {
            "allowSingleLine": true
          }
        ],
        "style/comma-dangle": [
          "error",
          "always-multiline"
        ],
        "style/comma-spacing": [
          "error",
          {
            "after": true,
            "before": false
          }
        ],
        "style/comma-style": [
          "error",
          "last"
        ],
        "style/computed-property-spacing": [
          "error",
          "never",
          {
            "enforceForClassMembers": true
          }
        ],
        "style/dot-location": [
          "error",
          "property"
        ],
        "style/eol-last": "error",
        "style/generator-star-spacing": [
          "error",
          {
            "after": true,
            "before": false
          }
        ],
        "style/indent": [
          "error",
          2,
          {
            "ArrayExpression": 1,
            "CallExpression": {
              "arguments": 1
            },
            "flatTernaryExpressions": false,
            "FunctionDeclaration": {
              "body": 1,
              "parameters": 1
            },
            "FunctionExpression": {
              "body": 1,
              "parameters": 1
            },
            "ignoreComments": false,
            "ignoredNodes": [
              "TSUnionType",
              "TSIntersectionType",
              "TSTypeParameterInstantiation",
              "FunctionExpression > .params[decorators.length > 0]",
              "FunctionExpression > .params > :matches(Decorator, :not(:first-child))"
            ],
            "ImportDeclaration": 1,
            "MemberExpression": 1,
            "ObjectExpression": 1,
            "offsetTernaryExpressions": true,
            "outerIIFEBody": 1,
            "SwitchCase": 1,
            "tabLength": 2,
            "VariableDeclarator": 1
          }
        ],
        "style/indent-binary-ops": [
          "error",
          2
        ],
        "style/key-spacing": [
          "error",
          {
            "afterColon": true,
            "beforeColon": false
          }
        ],
        "style/keyword-spacing": [
          "error",
          {
            "after": true,
            "before": true
          }
        ],
        "style/lines-between-class-members": [
          "error",
          "always",
          {
            "exceptAfterSingleLine": true
          }
        ],
        "style/max-statements-per-line": [
          "error",
          {
            "max": 1
          }
        ],
        "style/member-delimiter-style": [
          "error",
          {
            "multiline": {
              "delimiter": "semi",
              "requireLast": true
            },
            "multilineDetection": "brackets",
            "overrides": {
              "interface": {
                "multiline": {
                  "delimiter": "semi",
                  "requireLast": true
                }
              }
            },
            "singleline": {
              "delimiter": "semi"
            }
          }
        ],
        "style/multiline-ternary": [
          "error",
          "always-multiline"
        ],
        "style/new-parens": "error",
        "style/no-extra-parens": [
          "error",
          "functions"
        ],
        "style/no-floating-decimal": "error",
        "style/no-mixed-operators": [
          "error",
          {
            "allowSamePrecedence": true,
            "groups": [
              [
                "==",
                "!=",
                "===",
                "!==",
                ">",
                ">=",
                "<",
                "<="
              ],
              [
                "&&",
                "||"
              ],
              [
                "in",
                "instanceof"
              ]
            ]
          }
        ],
        "style/no-mixed-spaces-and-tabs": "error",
        "style/no-multi-spaces": "error",
        "style/no-multiple-empty-lines": [
          "error",
          {
            "max": 1,
            "maxBOF": 0,
            "maxEOF": 0
          }
        ],
        "style/no-tabs": "error",
        "style/no-trailing-spaces": "error",
        "style/no-whitespace-before-property": "error",
        "style/object-curly-spacing": [
          "error",
          "always"
        ],
        "style/operator-linebreak": [
          "error",
          "before"
        ],
        "style/padded-blocks": [
          "error",
          {
            "blocks": "never",
            "classes": "never",
            "switches": "never"
          }
        ],
        "style/quote-props": [
          "error",
          "consistent-as-needed"
        ],
        "style/quotes": [
          "error",
          "single",
          {
            "allowTemplateLiterals": true,
            "avoidEscape": false
          }
        ],
        "style/rest-spread-spacing": [
          "error",
          "never"
        ],
        "style/semi": [
          "error",
          "always"
        ],
        "style/semi-spacing": [
          "error",
          {
            "after": true,
            "before": false
          }
        ],
        "style/space-before-blocks": [
          "error",
          "always"
        ],
        "style/space-before-function-paren": [
          "error",
          {
            "anonymous": "always",
            "asyncArrow": "always",
            "named": "never"
          }
        ],
        "style/space-in-parens": [
          "error",
          "never"
        ],
        "style/space-infix-ops": "error",
        "style/space-unary-ops": [
          "error",
          {
            "nonwords": false,
            "words": true
          }
        ],
        "style/spaced-comment": [
          "error",
          "always",
          {
            "block": {
              "balanced": true,
              "exceptions": [
                "*"
              ],
              "markers": [
                "!"
              ]
            },
            "line": {
              "exceptions": [
                "/",
                "#"
              ],
              "markers": [
                "/"
              ]
            }
          }
        ],
        "style/template-curly-spacing": "error",
        "style/template-tag-spacing": [
          "error",
          "never"
        ],
        "style/type-annotation-spacing": [
          "error",
          {}
        ],
        "style/type-generic-spacing": "error",
        "style/type-named-tuple-spacing": "error",
        "style/wrap-iife": [
          "error",
          "any",
          {
            "functionPrototypeMethods": true
          }
        ],
        "style/yield-star-spacing": [
          "error",
          {
            "after": true,
            "before": false
          }
        ],
        "style/jsx-closing-bracket-location": "error",
        "style/jsx-closing-tag-location": "error",
        "style/jsx-curly-brace-presence": [
          "error",
          {
            "propElementValues": "always"
          }
        ],
        "style/jsx-curly-newline": "error",
        "style/jsx-curly-spacing": [
          "error",
          "never"
        ],
        "style/jsx-equals-spacing": "error",
        "style/jsx-first-prop-new-line": "error",
        "style/jsx-function-call-newline": [
          "error",
          "multiline"
        ],
        "style/jsx-indent-props": [
          "error",
          2
        ],
        "style/jsx-max-props-per-line": [
          "error",
          {
            "maximum": 1,
            "when": "multiline"
          }
        ],
        "style/jsx-one-expression-per-line": [
          "error",
          {
            "allow": "single-child"
          }
        ],
        "style/jsx-quotes": "error",
        "style/jsx-tag-spacing": [
          "error",
          {
            "afterOpening": "never",
            "beforeClosing": "never",
            "beforeSelfClosing": "always",
            "closingSlash": "never"
          }
        ],
        "style/jsx-wrap-multilines": [
          "error",
          {
            "arrow": "parens-new-line",
            "assignment": "parens-new-line",
            "condition": "parens-new-line",
            "declaration": "parens-new-line",
            "logical": "parens-new-line",
            "prop": "parens-new-line",
            "propertyValue": "parens-new-line",
            "return": "parens-new-line"
          }
        ],
        "style/jsx-sort-props": [
          "error",
          {
            "callbacksLast": true,
            "shorthandFirst": true
          }
        ]
      },
      "index": 36
    },
    {
      "name": "xaxa/stylistic/overrides",
      "rules": {},
      "index": 37
    },
    {
      "name": "antfu/jsonc/setup",
      "plugins": {
        "jsonc": {}
      },
      "index": 38
    },
    {
      "files": [
        "**/*.json",
        "**/*.json5",
        "**/*.jsonc"
      ],
      "languageOptions": {
        "parser": "jsonc-eslint-parser"
      },
      "name": "antfu/jsonc/rules",
      "rules": {
        "jsonc/no-bigint-literals": "error",
        "jsonc/no-binary-expression": "error",
        "jsonc/no-binary-numeric-literals": "error",
        "jsonc/no-dupe-keys": "error",
        "jsonc/no-escape-sequence-in-identifier": "error",
        "jsonc/no-floating-decimal": "error",
        "jsonc/no-hexadecimal-numeric-literals": "error",
        "jsonc/no-infinity": "error",
        "jsonc/no-multi-str": "error",
        "jsonc/no-nan": "error",
        "jsonc/no-number-props": "error",
        "jsonc/no-numeric-separators": "error",
        "jsonc/no-octal": "error",
        "jsonc/no-octal-escape": "error",
        "jsonc/no-octal-numeric-literals": "error",
        "jsonc/no-parenthesized": "error",
        "jsonc/no-plus-sign": "error",
        "jsonc/no-regexp-literals": "error",
        "jsonc/no-sparse-arrays": "error",
        "jsonc/no-template-literals": "error",
        "jsonc/no-undefined-value": "error",
        "jsonc/no-unicode-codepoint-escapes": "error",
        "jsonc/no-useless-escape": "error",
        "jsonc/space-unary-ops": "error",
        "jsonc/valid-json-number": "error",
        "jsonc/vue-custom-block/no-parsing-error": "error",
        "jsonc/array-bracket-spacing": [
          "error",
          "never"
        ],
        "jsonc/comma-dangle": [
          "error",
          "never"
        ],
        "jsonc/comma-style": [
          "error",
          "last"
        ],
        "jsonc/indent": [
          "error",
          2
        ],
        "jsonc/key-spacing": [
          "error",
          {
            "afterColon": true,
            "beforeColon": false
          }
        ],
        "jsonc/object-curly-newline": [
          "error",
          {
            "consistent": true,
            "multiline": true
          }
        ],
        "jsonc/object-curly-spacing": [
          "error",
          "always"
        ],
        "jsonc/object-property-newline": [
          "error",
          {
            "allowAllPropertiesOnSameLine": true
          }
        ],
        "jsonc/quote-props": "error",
        "jsonc/quotes": "error",
        "style/comma-dangle": [
          "error",
          "never"
        ]
      },
      "index": 39
    },
    {
      "files": [
        "**/package.json"
      ],
      "name": "antfu/sort/package-json",
      "rules": {
        "jsonc/sort-array-values": [
          "error",
          {
            "order": {
              "type": "asc"
            },
            "pathPattern": "^files$"
          }
        ],
        "jsonc/sort-keys": [
          "error",
          {
            "order": [
              "publisher",
              "name",
              "displayName",
              "type",
              "version",
              "private",
              "packageManager",
              "description",
              "author",
              "contributors",
              "license",
              "funding",
              "homepage",
              "repository",
              "bugs",
              "keywords",
              "categories",
              "sideEffects",
              "imports",
              "exports",
              "main",
              "module",
              "unpkg",
              "jsdelivr",
              "types",
              "typesVersions",
              "bin",
              "icon",
              "files",
              "engines",
              "activationEvents",
              "contributes",
              "scripts",
              "peerDependencies",
              "peerDependenciesMeta",
              "dependencies",
              "optionalDependencies",
              "devDependencies",
              "pnpm",
              "overrides",
              "resolutions",
              "husky",
              "simple-git-hooks",
              "lint-staged",
              "eslintConfig"
            ],
            "pathPattern": "^$"
          },
          {
            "order": {
              "type": "asc"
            },
            "pathPattern": "^(?:dev|peer|optional|bundled)?[Dd]ependencies(Meta)?$"
          },
          {
            "order": {
              "type": "asc"
            },
            "pathPattern": "^(?:resolutions|overrides|pnpm.overrides)$"
          },
          {
            "order": [
              "types",
              "import",
              "require",
              "default"
            ],
            "pathPattern": "^exports.*$"
          },
          {
            "order": [
              "pre-commit",
              "prepare-commit-msg",
              "commit-msg",
              "post-commit",
              "pre-rebase",
              "post-rewrite",
              "post-checkout",
              "post-merge",
              "pre-push",
              "pre-auto-gc"
            ],
            "pathPattern": "^(?:gitHooks|husky|simple-git-hooks)$"
          }
        ]
      },
      "index": 40
    },
    {
      "files": [
        "**/tsconfig.json",
        "**/tsconfig.*.json"
      ],
      "name": "antfu/sort/tsconfig-json",
      "rules": {
        "jsonc/sort-keys": [
          "error",
          {
            "order": [
              "extends",
              "compilerOptions",
              "references",
              "files",
              "include",
              "exclude"
            ],
            "pathPattern": "^$"
          },
          {
            "order": [
              "incremental",
              "composite",
              "tsBuildInfoFile",
              "disableSourceOfProjectReferenceRedirect",
              "disableSolutionSearching",
              "disableReferencedProjectLoad",
              "target",
              "jsx",
              "jsxFactory",
              "jsxFragmentFactory",
              "jsxImportSource",
              "lib",
              "moduleDetection",
              "noLib",
              "reactNamespace",
              "useDefineForClassFields",
              "emitDecoratorMetadata",
              "experimentalDecorators",
              "libReplacement",
              "baseUrl",
              "rootDir",
              "rootDirs",
              "customConditions",
              "module",
              "moduleResolution",
              "moduleSuffixes",
              "noResolve",
              "paths",
              "resolveJsonModule",
              "resolvePackageJsonExports",
              "resolvePackageJsonImports",
              "typeRoots",
              "types",
              "allowArbitraryExtensions",
              "allowImportingTsExtensions",
              "allowUmdGlobalAccess",
              "allowJs",
              "checkJs",
              "maxNodeModuleJsDepth",
              "strict",
              "strictBindCallApply",
              "strictFunctionTypes",
              "strictNullChecks",
              "strictPropertyInitialization",
              "allowUnreachableCode",
              "allowUnusedLabels",
              "alwaysStrict",
              "exactOptionalPropertyTypes",
              "noFallthroughCasesInSwitch",
              "noImplicitAny",
              "noImplicitOverride",
              "noImplicitReturns",
              "noImplicitThis",
              "noPropertyAccessFromIndexSignature",
              "noUncheckedIndexedAccess",
              "noUnusedLocals",
              "noUnusedParameters",
              "useUnknownInCatchVariables",
              "declaration",
              "declarationDir",
              "declarationMap",
              "downlevelIteration",
              "emitBOM",
              "emitDeclarationOnly",
              "importHelpers",
              "importsNotUsedAsValues",
              "inlineSourceMap",
              "inlineSources",
              "mapRoot",
              "newLine",
              "noEmit",
              "noEmitHelpers",
              "noEmitOnError",
              "outDir",
              "outFile",
              "preserveConstEnums",
              "preserveValueImports",
              "removeComments",
              "sourceMap",
              "sourceRoot",
              "stripInternal",
              "allowSyntheticDefaultImports",
              "esModuleInterop",
              "forceConsistentCasingInFileNames",
              "isolatedDeclarations",
              "isolatedModules",
              "preserveSymlinks",
              "verbatimModuleSyntax",
              "erasableSyntaxOnly",
              "skipDefaultLibCheck",
              "skipLibCheck"
            ],
            "pathPattern": "^compilerOptions$"
          }
        ]
      },
      "index": 41
    },
    {
      "name": "antfu/yaml/setup",
      "plugins": {
        "yaml": {}
      },
      "index": 42
    },
    {
      "files": [
        "**/*.y?(a)ml"
      ],
      "languageOptions": {
        "parser": "yaml-eslint-parser"
      },
      "name": "antfu/yaml/rules",
      "rules": {
        "style/spaced-comment": "off",
        "yaml/block-mapping": "error",
        "yaml/block-sequence": "error",
        "yaml/no-empty-key": "error",
        "yaml/no-empty-sequence-entry": "error",
        "yaml/no-irregular-whitespace": "error",
        "yaml/plain-scalar": "error",
        "yaml/vue-custom-block/no-parsing-error": "error",
        "yaml/block-mapping-question-indicator-newline": "error",
        "yaml/block-sequence-hyphen-indicator-newline": "error",
        "yaml/flow-mapping-curly-newline": "error",
        "yaml/flow-mapping-curly-spacing": "error",
        "yaml/flow-sequence-bracket-newline": "error",
        "yaml/flow-sequence-bracket-spacing": "error",
        "yaml/indent": [
          "error",
          2
        ],
        "yaml/key-spacing": "error",
        "yaml/no-tab-indent": "error",
        "yaml/quotes": [
          "error",
          {
            "avoidEscape": true,
            "prefer": "single"
          }
        ],
        "yaml/spaced-comment": "error"
      },
      "index": 43
    },
    {
      "files": [
        "pnpm-workspace.yaml"
      ],
      "name": "antfu/yaml/pnpm-workspace",
      "rules": {
        "yaml/sort-keys": [
          "error",
          {
            "order": [
              "packages",
              "overrides",
              "patchedDependencies",
              "hoistPattern",
              "catalog",
              "catalogs",
              "allowedDeprecatedVersions",
              "allowNonAppliedPatches",
              "configDependencies",
              "ignoredBuiltDependencies",
              "ignoredOptionalDependencies",
              "neverBuiltDependencies",
              "onlyBuiltDependencies",
              "onlyBuiltDependenciesFile",
              "packageExtensions",
              "peerDependencyRules",
              "supportedArchitectures"
            ],
            "pathPattern": "^$"
          },
          {
            "order": {
              "type": "asc"
            },
            "pathPattern": ".*"
          }
        ]
      },
      "index": 44
    },
    {
      "name": "antfu/toml/setup",
      "plugins": {
        "toml": {}
      },
      "index": 45
    },
    {
      "files": [
        "**/*.toml"
      ],
      "languageOptions": {
        "parser": "toml-eslint-parser"
      },
      "name": "antfu/toml/rules",
      "rules": {
        "style/spaced-comment": "off",
        "toml/comma-style": "error",
        "toml/keys-order": "error",
        "toml/no-space-dots": "error",
        "toml/no-unreadable-number-separator": "error",
        "toml/precision-of-fractional-seconds": "error",
        "toml/precision-of-integer": "error",
        "toml/tables-order": "error",
        "toml/vue-custom-block/no-parsing-error": "error",
        "toml/array-bracket-newline": "error",
        "toml/array-bracket-spacing": "error",
        "toml/array-element-newline": "error",
        "toml/indent": [
          "error",
          2
        ],
        "toml/inline-table-curly-spacing": "error",
        "toml/key-spacing": "error",
        "toml/padding-line-between-pairs": "error",
        "toml/padding-line-between-tables": "error",
        "toml/quoted-keys": "error",
        "toml/spaced-comment": "error",
        "toml/table-bracket-spacing": "error"
      },
      "index": 46
    },
    {
      "name": "xaxa/wgw/rules-and-overrides",
      "plugins": {
        "no-use-extend-native": {},
        "unused-imports": {}
      },
      "rules": {
        "ts/no-explicit-any": "off",
        "ts/no-unnecessary-template-expression": "off",
        "ts/no-unused-vars": "off",
        "ts/triple-slash-reference": "off",
        "arrow-body-style": [
          "error",
          "as-needed",
          {
            "requireReturnForObjectLiteral": false
          }
        ],
        "camelcase": "off",
        "class-methods-use-this": "off",
        "consistent-return": "off",
        "default-param-last": "error",
        "func-names": [
          "error",
          "always"
        ],
        "import/no-extraneous-dependencies": "off",
        "import/no-unresolved": "off",
        "max-classes-per-file": "off",
        "max-depth": [
          "error",
          {
            "max": 4
          }
        ],
        "max-nested-callbacks": [
          "error",
          {
            "max": 4
          }
        ],
        "max-params": [
          "error",
          {
            "max": 6
          }
        ],
        "max-statements": [
          "error",
          40,
          {
            "ignoreTopLevelFunctions": true
          }
        ],
        "no-await-in-loop": "off",
        "no-console": "off",
        "no-continue": "warn",
        "no-empty": [
          "error",
          {
            "allowEmptyCatch": true
          }
        ],
        "no-extend-native": "error",
        "no-import-assign": "error",
        "no-nested-ternary": "off",
        "no-param-reassign": "off",
        "no-plusplus": "off",
        "no-restricted-exports": "off",
        "no-restricted-syntax": [
          "error",
          "TSEnumDeclaration[const=true]",
          "TSExportAssignment",
          {
            "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.",
            "selector": "ForInStatement"
          },
          {
            "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.",
            "selector": "LabeledStatement"
          },
          {
            "message": "the \"with\" is disallowed in strict mode because it makes code impossible to predict and optimize.",
            "selector": "WithStatement"
          }
        ],
        "no-underscore-dangle": "off",
        "no-unnecessary-template-expression": "off",
        "no-unsafe-optional-chaining": [
          "error",
          {
            "disallowArithmeticOperators": true
          }
        ],
        "no-use-before-define": [
          "error",
          {
            "allowNamedExports": true,
            "classes": true,
            "functions": false,
            "variables": true
          }
        ],
        "no-use-extend-native/no-use-extend-native": "error",
        "no-useless-template-literals": "off",
        "node/no-missing-import": "warn",
        "node/no-unpublished-import": "warn",
        "prefer-arrow-callback": [
          "error",
          {
            "allowNamedFunctions": true,
            "allowUnboundThis": true
          }
        ],
        "prefer-const": [
          "error",
          {
            "ignoreReadBeforeAssign": true
          }
        ],
        "prefer-destructuring": "off",
        "prefer-object-has-own": "error",
        "prefer-regex-literals": "error",
        "sort-keys": "off",
        "strict": [
          "off",
          "global"
        ],
        "style/arrow-parens": [
          "error",
          "always"
        ],
        "style/brace-style": [
          "error",
          "1tbs",
          {
            "allowSingleLine": false
          }
        ],
        "style/lines-between-class-members": [
          "error",
          {
            "enforce": [
              {
                "blankLine": "never",
                "next": "*",
                "prev": "field"
              },
              {
                "blankLine": "always",
                "next": "method",
                "prev": "field"
              },
              {
                "blankLine": "always",
                "next": "method",
                "prev": "method"
              }
            ]
          }
        ],
        "style/max-statements-per-line": [
          "error",
          {
            "max": 1
          }
        ],
        "style/quote-props": "error",
        "unused-imports/no-unused-imports": "error",
        "unused-imports/no-unused-vars": [
          "error",
          {
            "args": "after-used",
            "argsIgnorePattern": "^(?:$$|xx|_|__|[iI]gnor(?:e|ing|ed))",
            "caughtErrors": "none",
            "ignoreRestSiblings": true,
            "vars": "all",
            "varsIgnorePattern": "^(?:$$|xx|_|__|[iI]gnor(?:e|ing|ed))"
          }
        ]
      },
      "index": 47
    },
    {
      "files": [
        "**/*.md/**/*.?([cm])[jt]s?(x)"
      ],
      "name": "xaxa/markdown/disables",
      "rules": {
        "antfu/no-top-level-await": "off",
        "import/no-extraneous-dependencies": "off",
        "import/no-unresolved": "off",
        "no-alert": "off",
        "no-console": "off",
        "no-labels": "off",
        "no-lone-blocks": "off",
        "no-restricted-syntax": "off",
        "no-undef": "off",
        "no-unused-expressions": "off",
        "no-unused-labels": "off",
        "no-unused-vars": "off",
        "node/no-missing-import": "off",
        "node/no-unpublished-import": "off",
        "node/prefer-global/process": "off",
        "style/comma-dangle": "off",
        "style/eol-last": "off",
        "ts/consistent-type-imports": "off",
        "ts/explicit-function-return-type": "off",
        "ts/no-namespace": "off",
        "ts/no-redeclare": "off",
        "ts/no-require-imports": "off",
        "ts/no-unused-expressions": "off",
        "ts/no-unused-vars": "off",
        "ts/no-use-before-define": "off",
        "unicode-bom": "off",
        "unused-imports/no-unused-imports": "off",
        "unused-imports/no-unused-vars": "off"
      },
      "index": 48
    },
    {
      "name": "xaxa/wgw/user-overrides",
      "rules": {},
      "index": 49
    },
    {
      "files": [
        "**/scripts/**/*.?([cm])[jt]s?(x)"
      ],
      "name": "antfu/disables/scripts",
      "rules": {
        "antfu/no-top-level-await": "off",
        "no-console": "off",
        "ts/explicit-function-return-type": "off"
      },
      "index": 50
    },
    {
      "files": [
        "**/cli/**/*.?([cm])[jt]s?(x)",
        "**/cli.?([cm])[jt]s?(x)"
      ],
      "name": "antfu/disables/cli",
      "rules": {
        "antfu/no-top-level-await": "off",
        "no-console": "off"
      },
      "index": 51
    },
    {
      "files": [
        "**/bin/**/*",
        "**/bin.?([cm])[jt]s?(x)"
      ],
      "name": "antfu/disables/bin",
      "rules": {
        "antfu/no-import-dist": "off",
        "antfu/no-import-node-modules-by-path": "off"
      },
      "index": 52
    },
    {
      "files": [
        "**/*.d.?([cm])ts"
      ],
      "name": "antfu/disables/dts",
      "rules": {
        "eslint-comments/no-unlimited-disable": "off",
        "no-restricted-syntax": "off",
        "unused-imports/no-unused-vars": "off"
      },
      "index": 53
    },
    {
      "files": [
        "**/*.js",
        "**/*.cjs"
      ],
      "name": "antfu/disables/cjs",
      "rules": {
        "ts/no-require-imports": "off"
      },
      "index": 54
    },
    {
      "files": [
        "**/*.config.?([cm])[jt]s?(x)",
        "**/*.config.*.?([cm])[jt]s?(x)"
      ],
      "name": "antfu/disables/config-files",
      "rules": {
        "antfu/no-top-level-await": "off",
        "no-console": "off",
        "ts/explicit-function-return-type": "off"
      },
      "index": 55
    },
    {
      "name": "antfu/formatter/setup",
      "plugins": {
        "format": {}
      },
      "index": 56
    },
    {
      "files": [
        "**/*.md"
      ],
      "ignores": [],
      "languageOptions": {
        "parser": "parser-plain"
      },
      "name": "antfu/formatter/markdown",
      "rules": {
        "format/prettier": [
          "error",
          {
            "endOfLine": "auto",
            "printWidth": 120,
            "semi": true,
            "singleQuote": true,
            "tabWidth": 2,
            "trailingComma": "all",
            "useTabs": false,
            "embeddedLanguageFormatting": "off",
            "parser": "markdown",
            "plugins": []
          }
        ]
      },
      "index": 57
    }
  ],
  "rules": {
    "accessor-pairs": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "enforceForClassMembers": true,
          "getWithoutSet": false,
          "setWithoutGet": true
        }
      ],
      "docs": {
        "description": "Enforce getter and setter pairs in objects and classes",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/accessor-pairs"
      },
      "name": "accessor-pairs",
      "plugin": "eslint"
    },
    "array-bracket-newline": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "array-bracket-newline",
              "url": "https://eslint.style/rules/array-bracket-newline"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce linebreaks after opening and before closing array brackets",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/array-bracket-newline"
      },
      "fixable": "whitespace",
      "name": "array-bracket-newline",
      "plugin": "eslint"
    },
    "array-bracket-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "array-bracket-spacing",
              "url": "https://eslint.style/rules/array-bracket-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside array brackets",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/array-bracket-spacing"
      },
      "fixable": "whitespace",
      "name": "array-bracket-spacing",
      "plugin": "eslint"
    },
    "array-callback-return": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowImplicit": false,
          "checkForEach": false,
          "allowVoid": false
        }
      ],
      "docs": {
        "description": "Enforce `return` statements in callbacks of array methods",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/array-callback-return"
      },
      "hasSuggestions": true,
      "name": "array-callback-return",
      "plugin": "eslint"
    },
    "array-element-newline": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "array-element-newline",
              "url": "https://eslint.style/rules/array-element-newline"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce line breaks after each array element",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/array-element-newline"
      },
      "fixable": "whitespace",
      "name": "array-element-newline",
      "plugin": "eslint"
    },
    "arrow-body-style": {
      "type": "suggestion",
      "defaultOptions": [
        "as-needed"
      ],
      "docs": {
        "description": "Require braces around arrow function bodies",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/arrow-body-style"
      },
      "fixable": "code",
      "name": "arrow-body-style",
      "plugin": "eslint"
    },
    "arrow-parens": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "arrow-parens",
              "url": "https://eslint.style/rules/arrow-parens"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require parentheses around arrow function arguments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/arrow-parens"
      },
      "fixable": "code",
      "name": "arrow-parens",
      "plugin": "eslint"
    },
    "arrow-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "arrow-spacing",
              "url": "https://eslint.style/rules/arrow-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after the arrow in arrow functions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/arrow-spacing"
      },
      "fixable": "whitespace",
      "name": "arrow-spacing",
      "plugin": "eslint"
    },
    "block-scoped-var": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of variables within the scope they are defined",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/block-scoped-var"
      },
      "name": "block-scoped-var",
      "plugin": "eslint"
    },
    "block-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "block-spacing",
              "url": "https://eslint.style/rules/block-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/block-spacing"
      },
      "fixable": "whitespace",
      "name": "block-spacing",
      "plugin": "eslint"
    },
    "brace-style": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "brace-style",
              "url": "https://eslint.style/rules/brace-style"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent brace style for blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/brace-style"
      },
      "fixable": "whitespace",
      "name": "brace-style",
      "plugin": "eslint"
    },
    "callback-return": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "callback-return",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/callback-return.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Require `return` statements after callbacks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/callback-return"
      },
      "name": "callback-return",
      "plugin": "eslint"
    },
    "camelcase": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allow": [],
          "ignoreDestructuring": false,
          "ignoreGlobals": false,
          "ignoreImports": false,
          "properties": "always"
        }
      ],
      "docs": {
        "description": "Enforce camelcase naming convention",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/camelcase"
      },
      "name": "camelcase",
      "plugin": "eslint"
    },
    "capitalized-comments": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce or disallow capitalization of the first letter of a comment",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/capitalized-comments"
      },
      "fixable": "code",
      "name": "capitalized-comments",
      "plugin": "eslint"
    },
    "class-methods-use-this": {
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "type": "suggestion",
      "defaultOptions": [
        {
          "enforceForClassFields": true,
          "exceptMethods": [],
          "ignoreOverrideMethods": false
        }
      ],
      "docs": {
        "description": "Enforce that class methods utilize `this`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/class-methods-use-this"
      },
      "name": "class-methods-use-this",
      "plugin": "eslint"
    },
    "comma-dangle": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "comma-dangle",
              "url": "https://eslint.style/rules/comma-dangle"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow trailing commas",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/comma-dangle"
      },
      "fixable": "code",
      "name": "comma-dangle",
      "plugin": "eslint"
    },
    "comma-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "comma-spacing",
              "url": "https://eslint.style/rules/comma-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after commas",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/comma-spacing"
      },
      "fixable": "whitespace",
      "name": "comma-spacing",
      "plugin": "eslint"
    },
    "comma-style": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "comma-style",
              "url": "https://eslint.style/rules/comma-style"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent comma style",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/comma-style"
      },
      "fixable": "code",
      "name": "comma-style",
      "plugin": "eslint"
    },
    "complexity": {
      "type": "suggestion",
      "defaultOptions": [
        20
      ],
      "docs": {
        "description": "Enforce a maximum cyclomatic complexity allowed in a program",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/complexity"
      },
      "name": "complexity",
      "plugin": "eslint"
    },
    "computed-property-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "computed-property-spacing",
              "url": "https://eslint.style/rules/computed-property-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside computed property brackets",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/computed-property-spacing"
      },
      "fixable": "whitespace",
      "name": "computed-property-spacing",
      "plugin": "eslint"
    },
    "consistent-return": {
      "type": "suggestion",
      "docs": {
        "description": "Require `return` statements to either always or never specify values",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/consistent-return"
      },
      "defaultOptions": [
        {
          "treatUndefinedAsUnspecified": false
        }
      ],
      "name": "consistent-return",
      "plugin": "eslint"
    },
    "consistent-this": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent naming when capturing the current execution context",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/consistent-this"
      },
      "defaultOptions": [
        "that"
      ],
      "name": "consistent-this",
      "plugin": "eslint"
    },
    "constructor-super": {
      "type": "problem",
      "docs": {
        "description": "Require `super()` calls in constructors",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/constructor-super"
      },
      "name": "constructor-super",
      "plugin": "eslint"
    },
    "curly": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent brace style for all control statements",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/curly"
      },
      "defaultOptions": [
        "all"
      ],
      "fixable": "code",
      "name": "curly",
      "plugin": "eslint"
    },
    "default-case": {
      "type": "suggestion",
      "defaultOptions": [
        {}
      ],
      "docs": {
        "description": "Require `default` cases in `switch` statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/default-case"
      },
      "name": "default-case",
      "plugin": "eslint"
    },
    "default-case-last": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce `default` clauses in `switch` statements to be last",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/default-case-last"
      },
      "name": "default-case-last",
      "plugin": "eslint"
    },
    "default-param-last": {
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "type": "suggestion",
      "docs": {
        "description": "Enforce default parameters to be last",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/default-param-last"
      },
      "name": "default-param-last",
      "plugin": "eslint"
    },
    "dot-location": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "dot-location",
              "url": "https://eslint.style/rules/dot-location"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent newlines before and after dots",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/dot-location"
      },
      "fixable": "code",
      "name": "dot-location",
      "plugin": "eslint"
    },
    "dot-notation": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowKeywords": true,
          "allowPattern": ""
        }
      ],
      "docs": {
        "description": "Enforce dot notation whenever possible",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/dot-notation"
      },
      "fixable": "code",
      "name": "dot-notation",
      "plugin": "eslint"
    },
    "eol-last": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "eol-last",
              "url": "https://eslint.style/rules/eol-last"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow newline at the end of files",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/eol-last"
      },
      "fixable": "whitespace",
      "name": "eol-last",
      "plugin": "eslint"
    },
    "eqeqeq": {
      "type": "suggestion",
      "hasSuggestions": true,
      "docs": {
        "description": "Require the use of `===` and `!==`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/eqeqeq"
      },
      "fixable": "code",
      "name": "eqeqeq",
      "plugin": "eslint"
    },
    "for-direction": {
      "type": "problem",
      "docs": {
        "description": "Enforce `for` loop update clause moving the counter in the right direction",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/for-direction"
      },
      "fixable": null,
      "name": "for-direction",
      "plugin": "eslint"
    },
    "func-call-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "function-call-spacing",
              "url": "https://eslint.style/rules/function-call-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing between function identifiers and their invocations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/func-call-spacing"
      },
      "fixable": "whitespace",
      "name": "func-call-spacing",
      "plugin": "eslint"
    },
    "func-name-matching": {
      "type": "suggestion",
      "docs": {
        "description": "Require function names to match the name of the variable or property to which they are assigned",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/func-name-matching"
      },
      "name": "func-name-matching",
      "plugin": "eslint"
    },
    "func-names": {
      "type": "suggestion",
      "defaultOptions": [
        "always",
        {}
      ],
      "docs": {
        "description": "Require or disallow named `function` expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/func-names"
      },
      "name": "func-names",
      "plugin": "eslint"
    },
    "func-style": {
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "type": "suggestion",
      "defaultOptions": [
        "expression",
        {
          "allowArrowFunctions": false,
          "allowTypeAnnotation": false,
          "overrides": {}
        }
      ],
      "docs": {
        "description": "Enforce the consistent use of either `function` declarations or expressions assigned to variables",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/func-style"
      },
      "name": "func-style",
      "plugin": "eslint"
    },
    "function-call-argument-newline": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "function-call-argument-newline",
              "url": "https://eslint.style/rules/function-call-argument-newline"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce line breaks between arguments of a function call",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/function-call-argument-newline"
      },
      "fixable": "whitespace",
      "name": "function-call-argument-newline",
      "plugin": "eslint"
    },
    "function-paren-newline": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "function-paren-newline",
              "url": "https://eslint.style/rules/function-paren-newline"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent line breaks inside function parentheses",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/function-paren-newline"
      },
      "fixable": "whitespace",
      "name": "function-paren-newline",
      "plugin": "eslint"
    },
    "generator-star-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "generator-star-spacing",
              "url": "https://eslint.style/rules/generator-star-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing around `*` operators in generator functions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/generator-star-spacing"
      },
      "fixable": "whitespace",
      "name": "generator-star-spacing",
      "plugin": "eslint"
    },
    "getter-return": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowImplicit": false
        }
      ],
      "docs": {
        "description": "Enforce `return` statements in getters",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/getter-return"
      },
      "fixable": null,
      "name": "getter-return",
      "plugin": "eslint"
    },
    "global-require": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "global-require",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/global-require.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Require `require()` calls to be placed at top-level module scope",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/global-require"
      },
      "name": "global-require",
      "plugin": "eslint"
    },
    "grouped-accessor-pairs": {
      "type": "suggestion",
      "defaultOptions": [
        "anyOrder"
      ],
      "docs": {
        "description": "Require grouped accessor pairs in object literals and classes",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/grouped-accessor-pairs"
      },
      "name": "grouped-accessor-pairs",
      "plugin": "eslint"
    },
    "guard-for-in": {
      "type": "suggestion",
      "docs": {
        "description": "Require `for-in` loops to include an `if` statement",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/guard-for-in"
      },
      "name": "guard-for-in",
      "plugin": "eslint"
    },
    "handle-callback-err": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "handle-callback-err",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Require error handling in callbacks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/handle-callback-err"
      },
      "name": "handle-callback-err",
      "plugin": "eslint"
    },
    "id-blacklist": {
      "deprecated": {
        "message": "The rule was renamed.",
        "url": "https://eslint.org/blog/2020/07/eslint-v7.5.0-released/#deprecating-id-blacklist",
        "deprecatedSince": "7.5.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "rule": {
              "name": "id-denylist",
              "url": "https://eslint.org/docs/rules/id-denylist"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified identifiers",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/id-blacklist"
      },
      "name": "id-blacklist",
      "plugin": "eslint"
    },
    "id-denylist": {
      "type": "suggestion",
      "defaultOptions": [],
      "docs": {
        "description": "Disallow specified identifiers",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/id-denylist"
      },
      "name": "id-denylist",
      "plugin": "eslint"
    },
    "id-length": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "exceptionPatterns": [],
          "exceptions": [],
          "min": 2,
          "properties": "always"
        }
      ],
      "docs": {
        "description": "Enforce minimum and maximum identifier lengths",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/id-length"
      },
      "name": "id-length",
      "plugin": "eslint"
    },
    "id-match": {
      "type": "suggestion",
      "defaultOptions": [
        "^.+$",
        {
          "classFields": false,
          "ignoreDestructuring": false,
          "onlyDeclarations": false,
          "properties": false
        }
      ],
      "docs": {
        "description": "Require identifiers to match a specified regular expression",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/id-match"
      },
      "name": "id-match",
      "plugin": "eslint"
    },
    "implicit-arrow-linebreak": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "implicit-arrow-linebreak",
              "url": "https://eslint.style/rules/implicit-arrow-linebreak"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce the location of arrow function bodies",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/implicit-arrow-linebreak"
      },
      "fixable": "whitespace",
      "name": "implicit-arrow-linebreak",
      "plugin": "eslint"
    },
    "indent": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "indent",
              "url": "https://eslint.style/rules/indent"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent indentation",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/indent"
      },
      "fixable": "whitespace",
      "name": "indent",
      "plugin": "eslint"
    },
    "indent-legacy": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent indentation",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/indent-legacy"
      },
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "4.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "indent",
              "url": "https://eslint.style/rules/indent"
            }
          }
        ]
      },
      "fixable": "whitespace",
      "name": "indent-legacy",
      "plugin": "eslint"
    },
    "init-declarations": {
      "type": "suggestion",
      "dialects": [
        "typescript",
        "javascript"
      ],
      "language": "javascript",
      "docs": {
        "description": "Require or disallow initialization in variable declarations",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/init-declarations"
      },
      "name": "init-declarations",
      "plugin": "eslint"
    },
    "jsx-quotes": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "jsx-quotes",
              "url": "https://eslint.style/rules/jsx-quotes"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce the consistent use of either double or single quotes in JSX attributes",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/jsx-quotes"
      },
      "fixable": "whitespace",
      "name": "jsx-quotes",
      "plugin": "eslint"
    },
    "key-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "key-spacing",
              "url": "https://eslint.style/rules/key-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing between keys and values in object literal properties",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/key-spacing"
      },
      "fixable": "whitespace",
      "name": "key-spacing",
      "plugin": "eslint"
    },
    "keyword-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "keyword-spacing",
              "url": "https://eslint.style/rules/keyword-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after keywords",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/keyword-spacing"
      },
      "fixable": "whitespace",
      "name": "keyword-spacing",
      "plugin": "eslint"
    },
    "line-comment-position": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "9.3.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "line-comment-position",
              "url": "https://eslint.style/rules/line-comment-position"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce position of line comments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/line-comment-position"
      },
      "name": "line-comment-position",
      "plugin": "eslint"
    },
    "linebreak-style": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "linebreak-style",
              "url": "https://eslint.style/rules/linebreak-style"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent linebreak style",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/linebreak-style"
      },
      "fixable": "whitespace",
      "name": "linebreak-style",
      "plugin": "eslint"
    },
    "lines-around-comment": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "lines-around-comment",
              "url": "https://eslint.style/rules/lines-around-comment"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require empty lines around comments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/lines-around-comment"
      },
      "fixable": "whitespace",
      "name": "lines-around-comment",
      "plugin": "eslint"
    },
    "lines-around-directive": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow newlines around directives",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/lines-around-directive"
      },
      "fixable": "whitespace",
      "deprecated": {
        "message": "The rule was replaced with a more general rule.",
        "url": "https://eslint.org/blog/2017/06/eslint-v4.0.0-released/",
        "deprecatedSince": "4.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "The new rule moved to a plugin.",
            "url": "https://eslint.org/docs/latest/rules/padding-line-between-statements#examples",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "padding-line-between-statements",
              "url": "https://eslint.style/rules/padding-line-between-statements"
            }
          }
        ]
      },
      "name": "lines-around-directive",
      "plugin": "eslint"
    },
    "lines-between-class-members": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "lines-between-class-members",
              "url": "https://eslint.style/rules/lines-between-class-members"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow an empty line between class members",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/lines-between-class-members"
      },
      "fixable": "whitespace",
      "name": "lines-between-class-members",
      "plugin": "eslint"
    },
    "logical-assignment-operators": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow logical assignment operator shorthand",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/logical-assignment-operators"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "logical-assignment-operators",
      "plugin": "eslint"
    },
    "max-classes-per-file": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of classes per file",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-classes-per-file"
      },
      "name": "max-classes-per-file",
      "plugin": "eslint"
    },
    "max-depth": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum depth that blocks can be nested",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-depth"
      },
      "name": "max-depth",
      "plugin": "eslint"
    },
    "max-len": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "max-len",
              "url": "https://eslint.style/rules/max-len"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce a maximum line length",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-len"
      },
      "name": "max-len",
      "plugin": "eslint"
    },
    "max-lines": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of lines per file",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-lines"
      },
      "name": "max-lines",
      "plugin": "eslint"
    },
    "max-lines-per-function": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of lines of code in a function",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-lines-per-function"
      },
      "name": "max-lines-per-function",
      "plugin": "eslint"
    },
    "max-nested-callbacks": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum depth that callbacks can be nested",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-nested-callbacks"
      },
      "name": "max-nested-callbacks",
      "plugin": "eslint"
    },
    "max-params": {
      "type": "suggestion",
      "dialects": [
        "typescript",
        "javascript"
      ],
      "language": "javascript",
      "docs": {
        "description": "Enforce a maximum number of parameters in function definitions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-params"
      },
      "name": "max-params",
      "plugin": "eslint"
    },
    "max-statements": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of statements allowed in function blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-statements"
      },
      "name": "max-statements",
      "plugin": "eslint"
    },
    "max-statements-per-line": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "max-statements-per-line",
              "url": "https://eslint.style/rules/max-statements-per-line"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce a maximum number of statements allowed per line",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-statements-per-line"
      },
      "name": "max-statements-per-line",
      "plugin": "eslint"
    },
    "multiline-comment-style": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "9.3.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "multiline-comment-style",
              "url": "https://eslint.style/rules/multiline-comment-style"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Enforce a particular style for multiline comments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/multiline-comment-style"
      },
      "fixable": "whitespace",
      "name": "multiline-comment-style",
      "plugin": "eslint"
    },
    "multiline-ternary": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "multiline-ternary",
              "url": "https://eslint.style/rules/multiline-ternary"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce newlines between operands of ternary expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/multiline-ternary"
      },
      "fixable": "whitespace",
      "name": "multiline-ternary",
      "plugin": "eslint"
    },
    "new-cap": {
      "type": "suggestion",
      "docs": {
        "description": "Require constructor names to begin with a capital letter",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/new-cap"
      },
      "defaultOptions": [
        {
          "capIsNew": true,
          "capIsNewExceptions": [
            "Array",
            "Boolean",
            "Date",
            "Error",
            "Function",
            "Number",
            "Object",
            "RegExp",
            "String",
            "Symbol",
            "BigInt"
          ],
          "newIsCap": true,
          "newIsCapExceptions": [],
          "properties": true
        }
      ],
      "name": "new-cap",
      "plugin": "eslint"
    },
    "new-parens": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "new-parens",
              "url": "https://eslint.style/rules/new-parens"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce or disallow parentheses when invoking a constructor with no arguments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/new-parens"
      },
      "fixable": "code",
      "name": "new-parens",
      "plugin": "eslint"
    },
    "newline-after-var": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow an empty line after variable declarations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/newline-after-var"
      },
      "fixable": "whitespace",
      "deprecated": {
        "message": "The rule was replaced with a more general rule.",
        "url": "https://eslint.org/blog/2017/06/eslint-v4.0.0-released/",
        "deprecatedSince": "4.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "The new rule moved to a plugin.",
            "url": "https://eslint.org/docs/latest/rules/padding-line-between-statements#examples",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "padding-line-between-statements",
              "url": "https://eslint.style/rules/padding-line-between-statements"
            }
          }
        ]
      },
      "name": "newline-after-var",
      "plugin": "eslint"
    },
    "newline-before-return": {
      "type": "layout",
      "docs": {
        "description": "Require an empty line before `return` statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/newline-before-return"
      },
      "fixable": "whitespace",
      "deprecated": {
        "message": "The rule was replaced with a more general rule.",
        "url": "https://eslint.org/blog/2017/06/eslint-v4.0.0-released/",
        "deprecatedSince": "4.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "The new rule moved to a plugin.",
            "url": "https://eslint.org/docs/latest/rules/padding-line-between-statements#examples",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "padding-line-between-statements",
              "url": "https://eslint.style/rules/padding-line-between-statements"
            }
          }
        ]
      },
      "name": "newline-before-return",
      "plugin": "eslint"
    },
    "newline-per-chained-call": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "newline-per-chained-call",
              "url": "https://eslint.style/rules/newline-per-chained-call"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require a newline after each call in a method chain",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/newline-per-chained-call"
      },
      "fixable": "whitespace",
      "name": "newline-per-chained-call",
      "plugin": "eslint"
    },
    "no-alert": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `alert`, `confirm`, and `prompt`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-alert"
      },
      "name": "no-alert",
      "plugin": "eslint"
    },
    "no-array-constructor": {
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "type": "suggestion",
      "docs": {
        "description": "Disallow `Array` constructors",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-array-constructor"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "no-array-constructor",
      "plugin": "eslint"
    },
    "no-async-promise-executor": {
      "type": "problem",
      "docs": {
        "description": "Disallow using an async function as a Promise executor",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-async-promise-executor"
      },
      "fixable": null,
      "name": "no-async-promise-executor",
      "plugin": "eslint"
    },
    "no-await-in-loop": {
      "type": "problem",
      "docs": {
        "description": "Disallow `await` inside of loops",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-await-in-loop"
      },
      "name": "no-await-in-loop",
      "plugin": "eslint"
    },
    "no-bitwise": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allow": [],
          "int32Hint": false
        }
      ],
      "docs": {
        "description": "Disallow bitwise operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-bitwise"
      },
      "name": "no-bitwise",
      "plugin": "eslint"
    },
    "no-buffer-constructor": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-deprecated-api",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-deprecated-api.md"
            }
          }
        ]
      },
      "type": "problem",
      "docs": {
        "description": "Disallow use of the `Buffer()` constructor",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-buffer-constructor"
      },
      "name": "no-buffer-constructor",
      "plugin": "eslint"
    },
    "no-caller": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `arguments.caller` or `arguments.callee`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-caller"
      },
      "name": "no-caller",
      "plugin": "eslint"
    },
    "no-case-declarations": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow lexical declarations in case clauses",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-case-declarations"
      },
      "hasSuggestions": true,
      "name": "no-case-declarations",
      "plugin": "eslint"
    },
    "no-catch-shadow": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `catch` clause parameters from shadowing variables in the outer scope",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-catch-shadow"
      },
      "deprecated": {
        "message": "This rule was renamed.",
        "url": "https://eslint.org/blog/2018/07/eslint-v5.1.0-released/",
        "deprecatedSince": "5.1.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "rule": {
              "name": "no-shadow",
              "url": "https://eslint.org/docs/rules/no-shadow"
            }
          }
        ]
      },
      "name": "no-catch-shadow",
      "plugin": "eslint"
    },
    "no-class-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow reassigning class members",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-class-assign"
      },
      "name": "no-class-assign",
      "plugin": "eslint"
    },
    "no-compare-neg-zero": {
      "type": "problem",
      "docs": {
        "description": "Disallow comparing against `-0`",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-compare-neg-zero"
      },
      "fixable": null,
      "name": "no-compare-neg-zero",
      "plugin": "eslint"
    },
    "no-cond-assign": {
      "type": "problem",
      "defaultOptions": [
        "except-parens"
      ],
      "docs": {
        "description": "Disallow assignment operators in conditional expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-cond-assign"
      },
      "name": "no-cond-assign",
      "plugin": "eslint"
    },
    "no-confusing-arrow": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "no-confusing-arrow",
              "url": "https://eslint.style/rules/no-confusing-arrow"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow arrow functions where they could be confused with comparisons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-confusing-arrow"
      },
      "fixable": "code",
      "name": "no-confusing-arrow",
      "plugin": "eslint"
    },
    "no-console": {
      "type": "suggestion",
      "defaultOptions": [
        {}
      ],
      "docs": {
        "description": "Disallow the use of `console`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-console"
      },
      "hasSuggestions": true,
      "name": "no-console",
      "plugin": "eslint"
    },
    "no-const-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow reassigning `const` variables",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-const-assign"
      },
      "name": "no-const-assign",
      "plugin": "eslint"
    },
    "no-constant-binary-expression": {
      "type": "problem",
      "docs": {
        "description": "Disallow expressions where the operation doesn't affect the value",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-constant-binary-expression"
      },
      "name": "no-constant-binary-expression",
      "plugin": "eslint"
    },
    "no-constant-condition": {
      "type": "problem",
      "defaultOptions": [
        {
          "checkLoops": "allExceptWhileTrue"
        }
      ],
      "docs": {
        "description": "Disallow constant expressions in conditions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-constant-condition"
      },
      "name": "no-constant-condition",
      "plugin": "eslint"
    },
    "no-constructor-return": {
      "type": "problem",
      "docs": {
        "description": "Disallow returning value from constructor",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-constructor-return"
      },
      "fixable": null,
      "name": "no-constructor-return",
      "plugin": "eslint"
    },
    "no-continue": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `continue` statements",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-continue"
      },
      "name": "no-continue",
      "plugin": "eslint"
    },
    "no-control-regex": {
      "type": "problem",
      "docs": {
        "description": "Disallow control characters in regular expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-control-regex"
      },
      "name": "no-control-regex",
      "plugin": "eslint"
    },
    "no-debugger": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of `debugger`",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-debugger"
      },
      "fixable": null,
      "name": "no-debugger",
      "plugin": "eslint"
    },
    "no-delete-var": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow deleting variables",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-delete-var"
      },
      "name": "no-delete-var",
      "plugin": "eslint"
    },
    "no-div-regex": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow equal signs explicitly at the beginning of regular expressions",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-div-regex"
      },
      "fixable": "code",
      "name": "no-div-regex",
      "plugin": "eslint"
    },
    "no-dupe-args": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate arguments in `function` definitions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-dupe-args"
      },
      "name": "no-dupe-args",
      "plugin": "eslint"
    },
    "no-dupe-class-members": {
      "type": "problem",
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "docs": {
        "description": "Disallow duplicate class members",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-dupe-class-members"
      },
      "name": "no-dupe-class-members",
      "plugin": "eslint"
    },
    "no-dupe-else-if": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate conditions in if-else-if chains",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-dupe-else-if"
      },
      "name": "no-dupe-else-if",
      "plugin": "eslint"
    },
    "no-dupe-keys": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate keys in object literals",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-dupe-keys"
      },
      "name": "no-dupe-keys",
      "plugin": "eslint"
    },
    "no-duplicate-case": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate case labels",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-duplicate-case"
      },
      "name": "no-duplicate-case",
      "plugin": "eslint"
    },
    "no-duplicate-imports": {
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "type": "problem",
      "defaultOptions": [
        {
          "includeExports": false,
          "allowSeparateTypeImports": false
        }
      ],
      "docs": {
        "description": "Disallow duplicate module imports",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-duplicate-imports"
      },
      "name": "no-duplicate-imports",
      "plugin": "eslint"
    },
    "no-else-return": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowElseIf": true
        }
      ],
      "docs": {
        "description": "Disallow `else` blocks after `return` statements in `if` statements",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-else-return"
      },
      "fixable": "code",
      "name": "no-else-return",
      "plugin": "eslint"
    },
    "no-empty": {
      "hasSuggestions": true,
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowEmptyCatch": false
        }
      ],
      "docs": {
        "description": "Disallow empty block statements",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-empty"
      },
      "name": "no-empty",
      "plugin": "eslint"
    },
    "no-empty-character-class": {
      "type": "problem",
      "docs": {
        "description": "Disallow empty character classes in regular expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-empty-character-class"
      },
      "name": "no-empty-character-class",
      "plugin": "eslint"
    },
    "no-empty-function": {
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "type": "suggestion",
      "defaultOptions": [
        {
          "allow": []
        }
      ],
      "docs": {
        "description": "Disallow empty functions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-empty-function"
      },
      "name": "no-empty-function",
      "plugin": "eslint"
    },
    "no-empty-pattern": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowObjectPatternsAsParameters": false
        }
      ],
      "docs": {
        "description": "Disallow empty destructuring patterns",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-empty-pattern"
      },
      "name": "no-empty-pattern",
      "plugin": "eslint"
    },
    "no-empty-static-block": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow empty static blocks",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-empty-static-block"
      },
      "name": "no-empty-static-block",
      "plugin": "eslint"
    },
    "no-eq-null": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `null` comparisons without type-checking operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-eq-null"
      },
      "name": "no-eq-null",
      "plugin": "eslint"
    },
    "no-eval": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowIndirect": false
        }
      ],
      "docs": {
        "description": "Disallow the use of `eval()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-eval"
      },
      "name": "no-eval",
      "plugin": "eslint"
    },
    "no-ex-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow reassigning exceptions in `catch` clauses",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-ex-assign"
      },
      "name": "no-ex-assign",
      "plugin": "eslint"
    },
    "no-extend-native": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "exceptions": []
        }
      ],
      "docs": {
        "description": "Disallow extending native types",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-extend-native"
      },
      "name": "no-extend-native",
      "plugin": "eslint"
    },
    "no-extra-bind": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary calls to `.bind()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-extra-bind"
      },
      "fixable": "code",
      "name": "no-extra-bind",
      "plugin": "eslint"
    },
    "no-extra-boolean-cast": {
      "type": "suggestion",
      "defaultOptions": [
        {}
      ],
      "docs": {
        "description": "Disallow unnecessary boolean casts",
        "recommended": true,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-extra-boolean-cast"
      },
      "fixable": "code",
      "name": "no-extra-boolean-cast",
      "plugin": "eslint"
    },
    "no-extra-label": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary labels",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-extra-label"
      },
      "fixable": "code",
      "name": "no-extra-label",
      "plugin": "eslint"
    },
    "no-extra-parens": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "no-extra-parens",
              "url": "https://eslint.style/rules/no-extra-parens"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow unnecessary parentheses",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-extra-parens"
      },
      "fixable": "code",
      "name": "no-extra-parens",
      "plugin": "eslint"
    },
    "no-extra-semi": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "no-extra-semi",
              "url": "https://eslint.style/rules/no-extra-semi"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary semicolons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-extra-semi"
      },
      "fixable": "code",
      "name": "no-extra-semi",
      "plugin": "eslint"
    },
    "no-fallthrough": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowEmptyCase": false,
          "reportUnusedFallthroughComment": false
        }
      ],
      "docs": {
        "description": "Disallow fallthrough of `case` statements",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-fallthrough"
      },
      "name": "no-fallthrough",
      "plugin": "eslint"
    },
    "no-floating-decimal": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "no-floating-decimal",
              "url": "https://eslint.style/rules/no-floating-decimal"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow leading or trailing decimal points in numeric literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-floating-decimal"
      },
      "fixable": "code",
      "name": "no-floating-decimal",
      "plugin": "eslint"
    },
    "no-func-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow reassigning `function` declarations",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-func-assign"
      },
      "name": "no-func-assign",
      "plugin": "eslint"
    },
    "no-global-assign": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "exceptions": []
        }
      ],
      "docs": {
        "description": "Disallow assignments to native objects or read-only global variables",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-global-assign"
      },
      "name": "no-global-assign",
      "plugin": "eslint"
    },
    "no-implicit-coercion": {
      "hasSuggestions": true,
      "type": "suggestion",
      "docs": {
        "description": "Disallow shorthand type conversions",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-implicit-coercion"
      },
      "fixable": "code",
      "defaultOptions": [
        {
          "allow": [],
          "boolean": true,
          "disallowTemplateShorthand": false,
          "number": true,
          "string": true
        }
      ],
      "name": "no-implicit-coercion",
      "plugin": "eslint"
    },
    "no-implicit-globals": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "lexicalBindings": false
        }
      ],
      "docs": {
        "description": "Disallow declarations in the global scope",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-implicit-globals"
      },
      "name": "no-implicit-globals",
      "plugin": "eslint"
    },
    "no-implied-eval": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `eval()`-like methods",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-implied-eval"
      },
      "name": "no-implied-eval",
      "plugin": "eslint"
    },
    "no-import-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow assigning to imported bindings",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-import-assign"
      },
      "name": "no-import-assign",
      "plugin": "eslint"
    },
    "no-inline-comments": {
      "type": "suggestion",
      "defaultOptions": [
        {}
      ],
      "docs": {
        "description": "Disallow inline comments after code",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-inline-comments"
      },
      "name": "no-inline-comments",
      "plugin": "eslint"
    },
    "no-inner-declarations": {
      "type": "problem",
      "defaultOptions": [
        "functions",
        {
          "blockScopedFunctions": "allow"
        }
      ],
      "docs": {
        "description": "Disallow variable or `function` declarations in nested blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-inner-declarations"
      },
      "name": "no-inner-declarations",
      "plugin": "eslint"
    },
    "no-invalid-regexp": {
      "type": "problem",
      "defaultOptions": [
        {}
      ],
      "docs": {
        "description": "Disallow invalid regular expression strings in `RegExp` constructors",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-invalid-regexp"
      },
      "name": "no-invalid-regexp",
      "plugin": "eslint"
    },
    "no-invalid-this": {
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "type": "suggestion",
      "defaultOptions": [
        {
          "capIsConstructor": true
        }
      ],
      "docs": {
        "description": "Disallow use of `this` in contexts where the value of `this` is `undefined`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-invalid-this"
      },
      "name": "no-invalid-this",
      "plugin": "eslint"
    },
    "no-irregular-whitespace": {
      "type": "problem",
      "defaultOptions": [
        {
          "skipComments": false,
          "skipJSXText": false,
          "skipRegExps": false,
          "skipStrings": true,
          "skipTemplates": false
        }
      ],
      "docs": {
        "description": "Disallow irregular whitespace",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-irregular-whitespace"
      },
      "name": "no-irregular-whitespace",
      "plugin": "eslint"
    },
    "no-iterator": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of the `__iterator__` property",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-iterator"
      },
      "name": "no-iterator",
      "plugin": "eslint"
    },
    "no-label-var": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow labels that share a name with a variable",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-label-var"
      },
      "name": "no-label-var",
      "plugin": "eslint"
    },
    "no-labels": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowLoop": false,
          "allowSwitch": false
        }
      ],
      "docs": {
        "description": "Disallow labeled statements",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-labels"
      },
      "name": "no-labels",
      "plugin": "eslint"
    },
    "no-lone-blocks": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary nested blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-lone-blocks"
      },
      "name": "no-lone-blocks",
      "plugin": "eslint"
    },
    "no-lonely-if": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `if` statements as the only statement in `else` blocks",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-lonely-if"
      },
      "fixable": "code",
      "name": "no-lonely-if",
      "plugin": "eslint"
    },
    "no-loop-func": {
      "type": "suggestion",
      "dialects": [
        "typescript",
        "javascript"
      ],
      "language": "javascript",
      "docs": {
        "description": "Disallow function declarations that contain unsafe references inside loop statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-loop-func"
      },
      "name": "no-loop-func",
      "plugin": "eslint"
    },
    "no-loss-of-precision": {
      "type": "problem",
      "dialects": [
        "typescript",
        "javascript"
      ],
      "language": "javascript",
      "docs": {
        "description": "Disallow literal numbers that lose precision",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
      },
      "name": "no-loss-of-precision",
      "plugin": "eslint"
    },
    "no-magic-numbers": {
      "type": "suggestion",
      "dialects": [
        "typescript",
        "javascript"
      ],
      "language": "javascript",
      "docs": {
        "description": "Disallow magic numbers",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-magic-numbers"
      },
      "name": "no-magic-numbers",
      "plugin": "eslint"
    },
    "no-misleading-character-class": {
      "type": "problem",
      "docs": {
        "description": "Disallow characters which are made with multiple code points in character class syntax",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-misleading-character-class"
      },
      "hasSuggestions": true,
      "name": "no-misleading-character-class",
      "plugin": "eslint"
    },
    "no-mixed-operators": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "no-mixed-operators",
              "url": "https://eslint.style/rules/no-mixed-operators"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow mixed binary operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-mixed-operators"
      },
      "name": "no-mixed-operators",
      "plugin": "eslint"
    },
    "no-mixed-requires": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-mixed-requires",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow `require` calls to be mixed with regular variable declarations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-mixed-requires"
      },
      "name": "no-mixed-requires",
      "plugin": "eslint"
    },
    "no-mixed-spaces-and-tabs": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "no-mixed-spaces-and-tabs",
              "url": "https://eslint.style/rules/no-mixed-spaces-and-tabs"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow mixed spaces and tabs for indentation",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-mixed-spaces-and-tabs"
      },
      "name": "no-mixed-spaces-and-tabs",
      "plugin": "eslint"
    },
    "no-multi-assign": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "ignoreNonDeclaration": false
        }
      ],
      "docs": {
        "description": "Disallow use of chained assignment expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-multi-assign"
      },
      "name": "no-multi-assign",
      "plugin": "eslint"
    },
    "no-multi-spaces": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "no-multi-spaces",
              "url": "https://eslint.style/rules/no-multi-spaces"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow multiple spaces",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-multi-spaces"
      },
      "fixable": "whitespace",
      "name": "no-multi-spaces",
      "plugin": "eslint"
    },
    "no-multi-str": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow multiline strings",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-multi-str"
      },
      "name": "no-multi-str",
      "plugin": "eslint"
    },
    "no-multiple-empty-lines": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "no-multiple-empty-lines",
              "url": "https://eslint.style/rules/no-multiple-empty-lines"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow multiple empty lines",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-multiple-empty-lines"
      },
      "fixable": "whitespace",
      "name": "no-multiple-empty-lines",
      "plugin": "eslint"
    },
    "no-native-reassign": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow assignments to native objects or read-only global variables",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-native-reassign"
      },
      "deprecated": {
        "message": "Renamed rule.",
        "url": "https://eslint.org/blog/2016/08/eslint-v3.3.0-released/#deprecated-rules",
        "deprecatedSince": "3.3.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "rule": {
              "name": "no-global-assign",
              "url": "https://eslint.org/docs/rules/no-global-assign"
            }
          }
        ]
      },
      "name": "no-native-reassign",
      "plugin": "eslint"
    },
    "no-negated-condition": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow negated conditions",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-negated-condition"
      },
      "name": "no-negated-condition",
      "plugin": "eslint"
    },
    "no-negated-in-lhs": {
      "type": "problem",
      "docs": {
        "description": "Disallow negating the left operand in `in` expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-negated-in-lhs"
      },
      "deprecated": {
        "message": "Renamed rule.",
        "url": "https://eslint.org/blog/2016/08/eslint-v3.3.0-released/#deprecated-rules",
        "deprecatedSince": "3.3.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "rule": {
              "name": "no-unsafe-negation",
              "url": "https://eslint.org/docs/rules/no-unsafe-negation"
            }
          }
        ]
      },
      "name": "no-negated-in-lhs",
      "plugin": "eslint"
    },
    "no-nested-ternary": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow nested ternary expressions",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-nested-ternary"
      },
      "name": "no-nested-ternary",
      "plugin": "eslint"
    },
    "no-new": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `new` operators outside of assignments or comparisons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new"
      },
      "name": "no-new",
      "plugin": "eslint"
    },
    "no-new-func": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `new` operators with the `Function` object",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-func"
      },
      "name": "no-new-func",
      "plugin": "eslint"
    },
    "no-new-native-nonconstructor": {
      "type": "problem",
      "docs": {
        "description": "Disallow `new` operators with global non-constructor functions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
      },
      "name": "no-new-native-nonconstructor",
      "plugin": "eslint"
    },
    "no-new-object": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `Object` constructors",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-object"
      },
      "deprecated": {
        "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
        "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
        "deprecatedSince": "8.50.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "rule": {
              "name": "no-object-constructor",
              "url": "https://eslint.org/docs/rules/no-object-constructor"
            }
          }
        ]
      },
      "name": "no-new-object",
      "plugin": "eslint"
    },
    "no-new-require": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-new-require",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow `new` operators with calls to `require`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-require"
      },
      "name": "no-new-require",
      "plugin": "eslint"
    },
    "no-new-symbol": {
      "type": "problem",
      "docs": {
        "description": "Disallow `new` operators with the `Symbol` object",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-symbol"
      },
      "deprecated": {
        "message": "The rule was replaced with a more general rule.",
        "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
        "deprecatedSince": "9.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "rule": {
              "name": "no-new-native-nonconstructor",
              "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
            }
          }
        ]
      },
      "name": "no-new-symbol",
      "plugin": "eslint"
    },
    "no-new-wrappers": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `new` operators with the `String`, `Number`, and `Boolean` objects",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-wrappers"
      },
      "name": "no-new-wrappers",
      "plugin": "eslint"
    },
    "no-nonoctal-decimal-escape": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `\\8` and `\\9` escape sequences in string literals",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-nonoctal-decimal-escape"
      },
      "hasSuggestions": true,
      "name": "no-nonoctal-decimal-escape",
      "plugin": "eslint"
    },
    "no-obj-calls": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling global object properties as functions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-obj-calls"
      },
      "name": "no-obj-calls",
      "plugin": "eslint"
    },
    "no-object-constructor": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow calls to the `Object` constructor without an argument",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-object-constructor"
      },
      "hasSuggestions": true,
      "name": "no-object-constructor",
      "plugin": "eslint"
    },
    "no-octal": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow octal literals",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-octal"
      },
      "name": "no-octal",
      "plugin": "eslint"
    },
    "no-octal-escape": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow octal escape sequences in string literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-octal-escape"
      },
      "name": "no-octal-escape",
      "plugin": "eslint"
    },
    "no-param-reassign": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow reassigning function parameters",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-param-reassign"
      },
      "name": "no-param-reassign",
      "plugin": "eslint"
    },
    "no-path-concat": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-path-concat",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow string concatenation with `__dirname` and `__filename`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-path-concat"
      },
      "name": "no-path-concat",
      "plugin": "eslint"
    },
    "no-plusplus": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowForLoopAfterthoughts": false
        }
      ],
      "docs": {
        "description": "Disallow the unary operators `++` and `--`",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-plusplus"
      },
      "name": "no-plusplus",
      "plugin": "eslint"
    },
    "no-process-env": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-process-env",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `process.env`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-process-env"
      },
      "name": "no-process-env",
      "plugin": "eslint"
    },
    "no-process-exit": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-process-exit",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `process.exit()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-process-exit"
      },
      "name": "no-process-exit",
      "plugin": "eslint"
    },
    "no-promise-executor-return": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowVoid": false
        }
      ],
      "docs": {
        "description": "Disallow returning values from Promise executor functions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-promise-executor-return"
      },
      "hasSuggestions": true,
      "name": "no-promise-executor-return",
      "plugin": "eslint"
    },
    "no-proto": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of the `__proto__` property",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-proto"
      },
      "name": "no-proto",
      "plugin": "eslint"
    },
    "no-prototype-builtins": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling some `Object.prototype` methods directly on objects",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-prototype-builtins"
      },
      "hasSuggestions": true,
      "name": "no-prototype-builtins",
      "plugin": "eslint"
    },
    "no-redeclare": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "builtinGlobals": true
        }
      ],
      "docs": {
        "description": "Disallow variable redeclaration",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-redeclare"
      },
      "name": "no-redeclare",
      "plugin": "eslint"
    },
    "no-regex-spaces": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow multiple spaces in regular expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-regex-spaces"
      },
      "fixable": "code",
      "name": "no-regex-spaces",
      "plugin": "eslint"
    },
    "no-restricted-exports": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified names in exports",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-exports"
      },
      "name": "no-restricted-exports",
      "plugin": "eslint"
    },
    "no-restricted-globals": {
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified global variables",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-globals"
      },
      "name": "no-restricted-globals",
      "plugin": "eslint"
    },
    "no-restricted-imports": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified modules when loaded by `import`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-imports"
      },
      "name": "no-restricted-imports",
      "plugin": "eslint"
    },
    "no-restricted-modules": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-restricted-require",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified modules when loaded by `require`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-modules"
      },
      "name": "no-restricted-modules",
      "plugin": "eslint"
    },
    "no-restricted-properties": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow certain properties on certain objects",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-properties"
      },
      "name": "no-restricted-properties",
      "plugin": "eslint"
    },
    "no-restricted-syntax": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified syntax",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-syntax"
      },
      "name": "no-restricted-syntax",
      "plugin": "eslint"
    },
    "no-return-assign": {
      "type": "suggestion",
      "defaultOptions": [
        "except-parens"
      ],
      "docs": {
        "description": "Disallow assignment operators in `return` statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-return-assign"
      },
      "name": "no-return-assign",
      "plugin": "eslint"
    },
    "no-return-await": {
      "hasSuggestions": true,
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary `return await`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-return-await"
      },
      "fixable": null,
      "deprecated": {
        "message": "The original assumption of the rule no longer holds true because of engine optimization.",
        "deprecatedSince": "8.46.0",
        "availableUntil": null,
        "replacedBy": []
      },
      "name": "no-return-await",
      "plugin": "eslint"
    },
    "no-script-url": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `javascript:` URLs",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-script-url"
      },
      "name": "no-script-url",
      "plugin": "eslint"
    },
    "no-self-assign": {
      "type": "problem",
      "defaultOptions": [
        {
          "props": true
        }
      ],
      "docs": {
        "description": "Disallow assignments where both sides are exactly the same",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-self-assign"
      },
      "name": "no-self-assign",
      "plugin": "eslint"
    },
    "no-self-compare": {
      "type": "problem",
      "docs": {
        "description": "Disallow comparisons where both sides are exactly the same",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-self-compare"
      },
      "name": "no-self-compare",
      "plugin": "eslint"
    },
    "no-sequences": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow comma operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-sequences"
      },
      "defaultOptions": [
        {
          "allowInParentheses": true
        }
      ],
      "name": "no-sequences",
      "plugin": "eslint"
    },
    "no-setter-return": {
      "type": "problem",
      "docs": {
        "description": "Disallow returning values from setters",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-setter-return"
      },
      "name": "no-setter-return",
      "plugin": "eslint"
    },
    "no-shadow": {
      "type": "suggestion",
      "dialects": [
        "typescript",
        "javascript"
      ],
      "language": "javascript",
      "defaultOptions": [
        {
          "allow": [],
          "builtinGlobals": false,
          "hoist": "functions",
          "ignoreOnInitialization": false,
          "ignoreTypeValueShadow": true,
          "ignoreFunctionTypeParameterNameValueShadow": true
        }
      ],
      "docs": {
        "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-shadow"
      },
      "name": "no-shadow",
      "plugin": "eslint"
    },
    "no-shadow-restricted-names": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "reportGlobalThis": false
        }
      ],
      "docs": {
        "description": "Disallow identifiers from shadowing restricted names",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-shadow-restricted-names"
      },
      "name": "no-shadow-restricted-names",
      "plugin": "eslint"
    },
    "no-spaced-func": {
      "type": "layout",
      "docs": {
        "description": "Disallow spacing between function identifiers and their applications (deprecated)",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-spaced-func"
      },
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2016/08/eslint-v3.3.0-released/#deprecated-rules",
        "deprecatedSince": "3.3.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "function-call-spacing",
              "url": "https://eslint.style/rules/function-call-spacing"
            }
          }
        ]
      },
      "fixable": "whitespace",
      "name": "no-spaced-func",
      "plugin": "eslint"
    },
    "no-sparse-arrays": {
      "type": "problem",
      "docs": {
        "description": "Disallow sparse arrays",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-sparse-arrays"
      },
      "name": "no-sparse-arrays",
      "plugin": "eslint"
    },
    "no-sync": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-sync",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow synchronous methods",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-sync"
      },
      "name": "no-sync",
      "plugin": "eslint"
    },
    "no-tabs": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "no-tabs",
              "url": "https://eslint.style/rules/no-tabs"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow all tabs",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-tabs"
      },
      "name": "no-tabs",
      "plugin": "eslint"
    },
    "no-template-curly-in-string": {
      "type": "problem",
      "docs": {
        "description": "Disallow template literal placeholder syntax in regular strings",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-template-curly-in-string"
      },
      "name": "no-template-curly-in-string",
      "plugin": "eslint"
    },
    "no-ternary": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow ternary operators",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-ternary"
      },
      "name": "no-ternary",
      "plugin": "eslint"
    },
    "no-this-before-super": {
      "type": "problem",
      "docs": {
        "description": "Disallow `this`/`super` before calling `super()` in constructors",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-this-before-super"
      },
      "name": "no-this-before-super",
      "plugin": "eslint"
    },
    "no-throw-literal": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow throwing literals as exceptions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-throw-literal"
      },
      "name": "no-throw-literal",
      "plugin": "eslint"
    },
    "no-trailing-spaces": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "no-trailing-spaces",
              "url": "https://eslint.style/rules/no-trailing-spaces"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow trailing whitespace at the end of lines",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-trailing-spaces"
      },
      "fixable": "whitespace",
      "name": "no-trailing-spaces",
      "plugin": "eslint"
    },
    "no-unassigned-vars": {
      "type": "problem",
      "dialects": [
        "typescript",
        "javascript"
      ],
      "language": "javascript",
      "docs": {
        "description": "Disallow `let` or `var` variables that are read but never assigned",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-unassigned-vars"
      },
      "name": "no-unassigned-vars",
      "plugin": "eslint"
    },
    "no-undef": {
      "type": "problem",
      "defaultOptions": [
        {
          "typeof": false
        }
      ],
      "docs": {
        "description": "Disallow the use of undeclared variables unless mentioned in `/*global */` comments",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-undef"
      },
      "name": "no-undef",
      "plugin": "eslint"
    },
    "no-undef-init": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow initializing variables to `undefined`",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-undef-init"
      },
      "fixable": "code",
      "name": "no-undef-init",
      "plugin": "eslint"
    },
    "no-undefined": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `undefined` as an identifier",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-undefined"
      },
      "name": "no-undefined",
      "plugin": "eslint"
    },
    "no-underscore-dangle": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allow": [],
          "allowAfterSuper": false,
          "allowAfterThis": false,
          "allowAfterThisConstructor": false,
          "allowFunctionParams": true,
          "allowInArrayDestructuring": true,
          "allowInObjectDestructuring": true,
          "enforceInClassFields": false,
          "enforceInMethodNames": false
        }
      ],
      "docs": {
        "description": "Disallow dangling underscores in identifiers",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-underscore-dangle"
      },
      "name": "no-underscore-dangle",
      "plugin": "eslint"
    },
    "no-unexpected-multiline": {
      "type": "problem",
      "docs": {
        "description": "Disallow confusing multiline expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unexpected-multiline"
      },
      "name": "no-unexpected-multiline",
      "plugin": "eslint"
    },
    "no-unmodified-loop-condition": {
      "type": "problem",
      "docs": {
        "description": "Disallow unmodified loop conditions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-unmodified-loop-condition"
      },
      "name": "no-unmodified-loop-condition",
      "plugin": "eslint"
    },
    "no-unneeded-ternary": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "defaultAssignment": true
        }
      ],
      "docs": {
        "description": "Disallow ternary operators when simpler alternatives exist",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-unneeded-ternary"
      },
      "fixable": "code",
      "name": "no-unneeded-ternary",
      "plugin": "eslint"
    },
    "no-unreachable": {
      "type": "problem",
      "docs": {
        "description": "Disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unreachable"
      },
      "name": "no-unreachable",
      "plugin": "eslint"
    },
    "no-unreachable-loop": {
      "type": "problem",
      "defaultOptions": [
        {
          "ignore": []
        }
      ],
      "docs": {
        "description": "Disallow loops with a body that allows only one iteration",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-unreachable-loop"
      },
      "name": "no-unreachable-loop",
      "plugin": "eslint"
    },
    "no-unsafe-finally": {
      "type": "problem",
      "docs": {
        "description": "Disallow control flow statements in `finally` blocks",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unsafe-finally"
      },
      "name": "no-unsafe-finally",
      "plugin": "eslint"
    },
    "no-unsafe-negation": {
      "type": "problem",
      "defaultOptions": [
        {
          "enforceForOrderingRelations": false
        }
      ],
      "docs": {
        "description": "Disallow negating the left operand of relational operators",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unsafe-negation"
      },
      "hasSuggestions": true,
      "fixable": null,
      "name": "no-unsafe-negation",
      "plugin": "eslint"
    },
    "no-unsafe-optional-chaining": {
      "type": "problem",
      "defaultOptions": [
        {
          "disallowArithmeticOperators": false
        }
      ],
      "docs": {
        "description": "Disallow use of optional chaining in contexts where the `undefined` value is not allowed",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unsafe-optional-chaining"
      },
      "fixable": null,
      "name": "no-unsafe-optional-chaining",
      "plugin": "eslint"
    },
    "no-unused-expressions": {
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "type": "suggestion",
      "docs": {
        "description": "Disallow unused expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-unused-expressions"
      },
      "defaultOptions": [
        {
          "allowShortCircuit": false,
          "allowTernary": false,
          "allowTaggedTemplates": false,
          "enforceForJSX": false,
          "ignoreDirectives": false
        }
      ],
      "name": "no-unused-expressions",
      "plugin": "eslint"
    },
    "no-unused-labels": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unused labels",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unused-labels"
      },
      "fixable": "code",
      "name": "no-unused-labels",
      "plugin": "eslint"
    },
    "no-unused-private-class-members": {
      "type": "problem",
      "docs": {
        "description": "Disallow unused private class members",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unused-private-class-members"
      },
      "name": "no-unused-private-class-members",
      "plugin": "eslint"
    },
    "no-unused-vars": {
      "type": "problem",
      "docs": {
        "description": "Disallow unused variables",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unused-vars"
      },
      "hasSuggestions": true,
      "name": "no-unused-vars",
      "plugin": "eslint"
    },
    "no-use-before-define": {
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "type": "problem",
      "docs": {
        "description": "Disallow the use of variables before they are defined",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-use-before-define"
      },
      "defaultOptions": [
        {
          "classes": true,
          "functions": true,
          "variables": true,
          "allowNamedExports": false,
          "enums": true,
          "typedefs": true,
          "ignoreTypeReferences": true
        }
      ],
      "name": "no-use-before-define",
      "plugin": "eslint"
    },
    "no-useless-assignment": {
      "type": "problem",
      "docs": {
        "description": "Disallow variable assignments when the value is not used",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-assignment"
      },
      "name": "no-useless-assignment",
      "plugin": "eslint"
    },
    "no-useless-backreference": {
      "type": "problem",
      "docs": {
        "description": "Disallow useless backreferences in regular expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-useless-backreference"
      },
      "name": "no-useless-backreference",
      "plugin": "eslint"
    },
    "no-useless-call": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary calls to `.call()` and `.apply()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-call"
      },
      "name": "no-useless-call",
      "plugin": "eslint"
    },
    "no-useless-catch": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary `catch` clauses",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-useless-catch"
      },
      "name": "no-useless-catch",
      "plugin": "eslint"
    },
    "no-useless-computed-key": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "enforceForClassMembers": true
        }
      ],
      "docs": {
        "description": "Disallow unnecessary computed property keys in objects and classes",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-useless-computed-key"
      },
      "fixable": "code",
      "name": "no-useless-computed-key",
      "plugin": "eslint"
    },
    "no-useless-concat": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary concatenation of literals or template literals",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-useless-concat"
      },
      "name": "no-useless-concat",
      "plugin": "eslint"
    },
    "no-useless-constructor": {
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary constructors",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-constructor"
      },
      "hasSuggestions": true,
      "name": "no-useless-constructor",
      "plugin": "eslint"
    },
    "no-useless-escape": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowRegexCharacters": []
        }
      ],
      "docs": {
        "description": "Disallow unnecessary escape characters",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-useless-escape"
      },
      "hasSuggestions": true,
      "name": "no-useless-escape",
      "plugin": "eslint"
    },
    "no-useless-rename": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "ignoreDestructuring": false,
          "ignoreImport": false,
          "ignoreExport": false
        }
      ],
      "docs": {
        "description": "Disallow renaming import, export, and destructured assignments to the same name",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-rename"
      },
      "fixable": "code",
      "name": "no-useless-rename",
      "plugin": "eslint"
    },
    "no-useless-return": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow redundant return statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-return"
      },
      "fixable": "code",
      "name": "no-useless-return",
      "plugin": "eslint"
    },
    "no-var": {
      "type": "suggestion",
      "dialects": [
        "typescript",
        "javascript"
      ],
      "language": "javascript",
      "docs": {
        "description": "Require `let` or `const` instead of `var`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-var"
      },
      "fixable": "code",
      "name": "no-var",
      "plugin": "eslint"
    },
    "no-void": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowAsStatement": false
        }
      ],
      "docs": {
        "description": "Disallow `void` operators",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-void"
      },
      "name": "no-void",
      "plugin": "eslint"
    },
    "no-warning-comments": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "location": "start",
          "terms": [
            "todo",
            "fixme",
            "xxx"
          ]
        }
      ],
      "docs": {
        "description": "Disallow specified warning terms in comments",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-warning-comments"
      },
      "name": "no-warning-comments",
      "plugin": "eslint"
    },
    "no-whitespace-before-property": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "no-whitespace-before-property",
              "url": "https://eslint.style/rules/no-whitespace-before-property"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow whitespace before properties",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-whitespace-before-property"
      },
      "fixable": "whitespace",
      "name": "no-whitespace-before-property",
      "plugin": "eslint"
    },
    "no-with": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `with` statements",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-with"
      },
      "name": "no-with",
      "plugin": "eslint"
    },
    "nonblock-statement-body-position": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "nonblock-statement-body-position",
              "url": "https://eslint.style/rules/nonblock-statement-body-position"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce the location of single-line statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/nonblock-statement-body-position"
      },
      "fixable": "whitespace",
      "name": "nonblock-statement-body-position",
      "plugin": "eslint"
    },
    "object-curly-newline": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "object-curly-newline",
              "url": "https://eslint.style/rules/object-curly-newline"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent line breaks after opening and before closing braces",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/object-curly-newline"
      },
      "fixable": "whitespace",
      "name": "object-curly-newline",
      "plugin": "eslint"
    },
    "object-curly-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "object-curly-spacing",
              "url": "https://eslint.style/rules/object-curly-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside braces",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/object-curly-spacing"
      },
      "fixable": "whitespace",
      "name": "object-curly-spacing",
      "plugin": "eslint"
    },
    "object-property-newline": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "object-property-newline",
              "url": "https://eslint.style/rules/object-property-newline"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce placing object properties on separate lines",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/object-property-newline"
      },
      "fixable": "whitespace",
      "name": "object-property-newline",
      "plugin": "eslint"
    },
    "object-shorthand": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow method and property shorthand syntax for object literals",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/object-shorthand"
      },
      "fixable": "code",
      "name": "object-shorthand",
      "plugin": "eslint"
    },
    "one-var": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce variables to be declared either together or separately in functions",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/one-var"
      },
      "fixable": "code",
      "name": "one-var",
      "plugin": "eslint"
    },
    "one-var-declaration-per-line": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "one-var-declaration-per-line",
              "url": "https://eslint.style/rules/one-var-declaration-per-line"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow newlines around variable declarations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/one-var-declaration-per-line"
      },
      "fixable": "whitespace",
      "name": "one-var-declaration-per-line",
      "plugin": "eslint"
    },
    "operator-assignment": {
      "type": "suggestion",
      "defaultOptions": [
        "always"
      ],
      "docs": {
        "description": "Require or disallow assignment operator shorthand where possible",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/operator-assignment"
      },
      "fixable": "code",
      "name": "operator-assignment",
      "plugin": "eslint"
    },
    "operator-linebreak": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "operator-linebreak",
              "url": "https://eslint.style/rules/operator-linebreak"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent linebreak style for operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/operator-linebreak"
      },
      "fixable": "code",
      "name": "operator-linebreak",
      "plugin": "eslint"
    },
    "padded-blocks": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "padded-blocks",
              "url": "https://eslint.style/rules/padded-blocks"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow padding within blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/padded-blocks"
      },
      "fixable": "whitespace",
      "name": "padded-blocks",
      "plugin": "eslint"
    },
    "padding-line-between-statements": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "padding-line-between-statements",
              "url": "https://eslint.style/rules/padding-line-between-statements"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow padding lines between statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/padding-line-between-statements"
      },
      "fixable": "whitespace",
      "name": "padding-line-between-statements",
      "plugin": "eslint"
    },
    "prefer-arrow-callback": {
      "type": "suggestion",
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "defaultOptions": [
        {
          "allowNamedFunctions": false,
          "allowUnboundThis": true
        }
      ],
      "docs": {
        "description": "Require using arrow functions for callbacks",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-arrow-callback"
      },
      "fixable": "code",
      "name": "prefer-arrow-callback",
      "plugin": "eslint"
    },
    "prefer-const": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "destructuring": "any",
          "ignoreReadBeforeAssign": false
        }
      ],
      "docs": {
        "description": "Require `const` declarations for variables that are never reassigned after declared",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-const"
      },
      "fixable": "code",
      "name": "prefer-const",
      "plugin": "eslint"
    },
    "prefer-destructuring": {
      "type": "suggestion",
      "docs": {
        "description": "Require destructuring from arrays and/or objects",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-destructuring"
      },
      "fixable": "code",
      "name": "prefer-destructuring",
      "plugin": "eslint"
    },
    "prefer-exponentiation-operator": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `Math.pow` in favor of the `**` operator",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-exponentiation-operator"
      },
      "fixable": "code",
      "name": "prefer-exponentiation-operator",
      "plugin": "eslint"
    },
    "prefer-named-capture-group": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using named capture group in regular expression",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-named-capture-group"
      },
      "hasSuggestions": true,
      "name": "prefer-named-capture-group",
      "plugin": "eslint"
    },
    "prefer-numeric-literals": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-numeric-literals"
      },
      "fixable": "code",
      "name": "prefer-numeric-literals",
      "plugin": "eslint"
    },
    "prefer-object-has-own": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-object-has-own"
      },
      "fixable": "code",
      "name": "prefer-object-has-own",
      "plugin": "eslint"
    },
    "prefer-object-spread": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow using `Object.assign` with an object literal as the first argument and prefer the use of object spread instead",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-object-spread"
      },
      "fixable": "code",
      "name": "prefer-object-spread",
      "plugin": "eslint"
    },
    "prefer-promise-reject-errors": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowEmptyReject": false
        }
      ],
      "docs": {
        "description": "Require using Error objects as Promise rejection reasons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-promise-reject-errors"
      },
      "fixable": null,
      "name": "prefer-promise-reject-errors",
      "plugin": "eslint"
    },
    "prefer-reflect": {
      "type": "suggestion",
      "docs": {
        "description": "Require `Reflect` methods where applicable",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-reflect"
      },
      "deprecated": {
        "message": "The original intention of this rule was misguided.",
        "deprecatedSince": "3.9.0",
        "availableUntil": null,
        "replacedBy": []
      },
      "name": "prefer-reflect",
      "plugin": "eslint"
    },
    "prefer-regex-literals": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "disallowRedundantWrapping": false
        }
      ],
      "docs": {
        "description": "Disallow use of the `RegExp` constructor in favor of regular expression literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-regex-literals"
      },
      "hasSuggestions": true,
      "name": "prefer-regex-literals",
      "plugin": "eslint"
    },
    "prefer-rest-params": {
      "type": "suggestion",
      "docs": {
        "description": "Require rest parameters instead of `arguments`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-rest-params"
      },
      "name": "prefer-rest-params",
      "plugin": "eslint"
    },
    "prefer-spread": {
      "type": "suggestion",
      "docs": {
        "description": "Require spread operators instead of `.apply()`",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-spread"
      },
      "fixable": null,
      "name": "prefer-spread",
      "plugin": "eslint"
    },
    "prefer-template": {
      "type": "suggestion",
      "docs": {
        "description": "Require template literals instead of string concatenation",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-template"
      },
      "fixable": "code",
      "name": "prefer-template",
      "plugin": "eslint"
    },
    "quote-props": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "quote-props",
              "url": "https://eslint.style/rules/quote-props"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Require quotes around object literal property names",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/quote-props"
      },
      "fixable": "code",
      "name": "quote-props",
      "plugin": "eslint"
    },
    "quotes": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "quotes",
              "url": "https://eslint.style/rules/quotes"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce the consistent use of either backticks, double, or single quotes",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/quotes"
      },
      "fixable": "code",
      "name": "quotes",
      "plugin": "eslint"
    },
    "radix": {
      "type": "suggestion",
      "defaultOptions": [
        "always"
      ],
      "docs": {
        "description": "Enforce the consistent use of the radix argument when using `parseInt()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/radix"
      },
      "hasSuggestions": true,
      "name": "radix",
      "plugin": "eslint"
    },
    "require-atomic-updates": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowProperties": false
        }
      ],
      "docs": {
        "description": "Disallow assignments that can lead to race conditions due to usage of `await` or `yield`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/require-atomic-updates"
      },
      "fixable": null,
      "name": "require-atomic-updates",
      "plugin": "eslint"
    },
    "require-await": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow async functions which have no `await` expression",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/require-await"
      },
      "hasSuggestions": true,
      "name": "require-await",
      "plugin": "eslint"
    },
    "require-unicode-regexp": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of `u` or `v` flag on regular expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/require-unicode-regexp"
      },
      "hasSuggestions": true,
      "name": "require-unicode-regexp",
      "plugin": "eslint"
    },
    "require-yield": {
      "type": "suggestion",
      "docs": {
        "description": "Require generator functions to contain `yield`",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/require-yield"
      },
      "name": "require-yield",
      "plugin": "eslint"
    },
    "rest-spread-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "rest-spread-spacing",
              "url": "https://eslint.style/rules/rest-spread-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce spacing between rest and spread operators and their expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/rest-spread-spacing"
      },
      "fixable": "whitespace",
      "name": "rest-spread-spacing",
      "plugin": "eslint"
    },
    "semi": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "semi",
              "url": "https://eslint.style/rules/semi"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow semicolons instead of ASI",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/semi"
      },
      "fixable": "code",
      "name": "semi",
      "plugin": "eslint"
    },
    "semi-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "semi-spacing",
              "url": "https://eslint.style/rules/semi-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after semicolons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/semi-spacing"
      },
      "fixable": "whitespace",
      "name": "semi-spacing",
      "plugin": "eslint"
    },
    "semi-style": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "semi-style",
              "url": "https://eslint.style/rules/semi-style"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce location of semicolons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/semi-style"
      },
      "fixable": "whitespace",
      "name": "semi-style",
      "plugin": "eslint"
    },
    "sort-imports": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowSeparatedGroups": false,
          "ignoreCase": false,
          "ignoreDeclarationSort": false,
          "ignoreMemberSort": false,
          "memberSyntaxSortOrder": [
            "none",
            "all",
            "multiple",
            "single"
          ]
        }
      ],
      "docs": {
        "description": "Enforce sorted `import` declarations within modules",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/sort-imports"
      },
      "fixable": "code",
      "name": "sort-imports",
      "plugin": "eslint"
    },
    "sort-keys": {
      "type": "suggestion",
      "defaultOptions": [
        "asc",
        {
          "allowLineSeparatedGroups": false,
          "caseSensitive": true,
          "ignoreComputedKeys": false,
          "minKeys": 2,
          "natural": false
        }
      ],
      "docs": {
        "description": "Require object keys to be sorted",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/sort-keys"
      },
      "name": "sort-keys",
      "plugin": "eslint"
    },
    "sort-vars": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "ignoreCase": false
        }
      ],
      "docs": {
        "description": "Require variables within the same declaration block to be sorted",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/sort-vars"
      },
      "fixable": "code",
      "name": "sort-vars",
      "plugin": "eslint"
    },
    "space-before-blocks": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "space-before-blocks",
              "url": "https://eslint.style/rules/space-before-blocks"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-before-blocks"
      },
      "fixable": "whitespace",
      "name": "space-before-blocks",
      "plugin": "eslint"
    },
    "space-before-function-paren": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "space-before-function-paren",
              "url": "https://eslint.style/rules/space-before-function-paren"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before `function` definition opening parenthesis",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-before-function-paren"
      },
      "fixable": "whitespace",
      "name": "space-before-function-paren",
      "plugin": "eslint"
    },
    "space-in-parens": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "space-in-parens",
              "url": "https://eslint.style/rules/space-in-parens"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside parentheses",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-in-parens"
      },
      "fixable": "whitespace",
      "name": "space-in-parens",
      "plugin": "eslint"
    },
    "space-infix-ops": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "space-infix-ops",
              "url": "https://eslint.style/rules/space-infix-ops"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require spacing around infix operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-infix-ops"
      },
      "fixable": "whitespace",
      "name": "space-infix-ops",
      "plugin": "eslint"
    },
    "space-unary-ops": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "space-unary-ops",
              "url": "https://eslint.style/rules/space-unary-ops"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before or after unary operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-unary-ops"
      },
      "fixable": "whitespace",
      "name": "space-unary-ops",
      "plugin": "eslint"
    },
    "spaced-comment": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "spaced-comment",
              "url": "https://eslint.style/rules/spaced-comment"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent spacing after the `//` or `/*` in a comment",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/spaced-comment"
      },
      "fixable": "whitespace",
      "name": "spaced-comment",
      "plugin": "eslint"
    },
    "strict": {
      "type": "suggestion",
      "defaultOptions": [
        "safe"
      ],
      "docs": {
        "description": "Require or disallow strict mode directives",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/strict"
      },
      "fixable": "code",
      "name": "strict",
      "plugin": "eslint"
    },
    "switch-colon-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "switch-colon-spacing",
              "url": "https://eslint.style/rules/switch-colon-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce spacing around colons of switch statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/switch-colon-spacing"
      },
      "fixable": "whitespace",
      "name": "switch-colon-spacing",
      "plugin": "eslint"
    },
    "symbol-description": {
      "type": "suggestion",
      "docs": {
        "description": "Require symbol descriptions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/symbol-description"
      },
      "fixable": null,
      "name": "symbol-description",
      "plugin": "eslint"
    },
    "template-curly-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "template-curly-spacing",
              "url": "https://eslint.style/rules/template-curly-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing around embedded expressions of template strings",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/template-curly-spacing"
      },
      "fixable": "whitespace",
      "name": "template-curly-spacing",
      "plugin": "eslint"
    },
    "template-tag-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "template-tag-spacing",
              "url": "https://eslint.style/rules/template-tag-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing between template tags and their literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/template-tag-spacing"
      },
      "fixable": "whitespace",
      "name": "template-tag-spacing",
      "plugin": "eslint"
    },
    "unicode-bom": {
      "type": "layout",
      "defaultOptions": [
        "never"
      ],
      "docs": {
        "description": "Require or disallow Unicode byte order mark (BOM)",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/unicode-bom"
      },
      "fixable": "whitespace",
      "name": "unicode-bom",
      "plugin": "eslint"
    },
    "use-isnan": {
      "hasSuggestions": true,
      "type": "problem",
      "docs": {
        "description": "Require calls to `isNaN()` when checking for `NaN`",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/use-isnan"
      },
      "defaultOptions": [
        {
          "enforceForIndexOf": false,
          "enforceForSwitchCase": true
        }
      ],
      "name": "use-isnan",
      "plugin": "eslint"
    },
    "valid-typeof": {
      "type": "problem",
      "defaultOptions": [
        {
          "requireStringLiterals": false
        }
      ],
      "docs": {
        "description": "Enforce comparing `typeof` expressions against valid strings",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/valid-typeof"
      },
      "hasSuggestions": true,
      "name": "valid-typeof",
      "plugin": "eslint"
    },
    "vars-on-top": {
      "type": "suggestion",
      "docs": {
        "description": "Require `var` declarations be placed at the top of their containing scope",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/vars-on-top"
      },
      "name": "vars-on-top",
      "plugin": "eslint"
    },
    "wrap-iife": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "wrap-iife",
              "url": "https://eslint.style/rules/wrap-iife"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require parentheses around immediate `function` invocations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/wrap-iife"
      },
      "fixable": "code",
      "name": "wrap-iife",
      "plugin": "eslint"
    },
    "wrap-regex": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "wrap-regex",
              "url": "https://eslint.style/rules/wrap-regex"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require parenthesis around regex literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/wrap-regex"
      },
      "fixable": "code",
      "name": "wrap-regex",
      "plugin": "eslint"
    },
    "yield-star-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin",
              "url": "https://eslint.style"
            },
            "rule": {
              "name": "yield-star-spacing",
              "url": "https://eslint.style/rules/yield-star-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing around the `*` in `yield*` expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/yield-star-spacing"
      },
      "fixable": "whitespace",
      "name": "yield-star-spacing",
      "plugin": "eslint"
    },
    "yoda": {
      "type": "suggestion",
      "defaultOptions": [
        "never",
        {
          "exceptRange": false,
          "onlyEquality": false
        }
      ],
      "docs": {
        "description": "Require or disallow \"Yoda\" conditions",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/yoda"
      },
      "fixable": "code",
      "name": "yoda",
      "plugin": "eslint"
    },
    "eslint-comments/disable-enable-pair": {
      "docs": {
        "description": "require a `eslint-enable` comment for every `eslint-disable` comment",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/disable-enable-pair.html"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "eslint-comments/disable-enable-pair",
      "plugin": "eslint-comments"
    },
    "eslint-comments/no-aggregating-enable": {
      "docs": {
        "description": "disallow a `eslint-enable` comment for multiple `eslint-disable` comments",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-aggregating-enable.html"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "eslint-comments/no-aggregating-enable",
      "plugin": "eslint-comments"
    },
    "eslint-comments/no-duplicate-disable": {
      "docs": {
        "description": "disallow duplicate `eslint-disable` comments",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-duplicate-disable.html"
      },
      "fixable": null,
      "type": "problem",
      "name": "eslint-comments/no-duplicate-disable",
      "plugin": "eslint-comments"
    },
    "eslint-comments/no-restricted-disable": {
      "docs": {
        "description": "disallow `eslint-disable` comments about specific rules",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-restricted-disable.html"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "eslint-comments/no-restricted-disable",
      "plugin": "eslint-comments"
    },
    "eslint-comments/no-unlimited-disable": {
      "docs": {
        "description": "disallow `eslint-disable` comments without rule names",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-unlimited-disable.html"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "eslint-comments/no-unlimited-disable",
      "plugin": "eslint-comments"
    },
    "eslint-comments/no-unused-disable": {
      "docs": {
        "description": "disallow unused `eslint-disable` comments",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-unused-disable.html"
      },
      "fixable": null,
      "type": "problem",
      "name": "eslint-comments/no-unused-disable",
      "plugin": "eslint-comments"
    },
    "eslint-comments/no-unused-enable": {
      "docs": {
        "description": "disallow unused `eslint-enable` comments",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-unused-enable.html"
      },
      "fixable": null,
      "type": "problem",
      "name": "eslint-comments/no-unused-enable",
      "plugin": "eslint-comments"
    },
    "eslint-comments/no-use": {
      "docs": {
        "description": "disallow ESLint directive-comments",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-use.html"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "eslint-comments/no-use",
      "plugin": "eslint-comments"
    },
    "eslint-comments/require-description": {
      "docs": {
        "description": "require include descriptions in ESLint directive-comments",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/require-description.html"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "eslint-comments/require-description",
      "plugin": "eslint-comments"
    },
    "node/callback-return": {
      "type": "suggestion",
      "docs": {
        "description": "require `return` statements after callbacks",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/callback-return.md"
      },
      "fixable": null,
      "name": "node/callback-return",
      "plugin": "node"
    },
    "node/exports-style": {
      "docs": {
        "description": "enforce either `module.exports` or `exports`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/exports-style.md"
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "node/exports-style",
      "plugin": "node"
    },
    "node/file-extension-in-import": {
      "docs": {
        "description": "enforce the style of file extensions in `import` declarations",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/file-extension-in-import.md"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "node/file-extension-in-import",
      "plugin": "node"
    },
    "node/global-require": {
      "type": "suggestion",
      "docs": {
        "description": "require `require()` calls to be placed at top-level module scope",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/global-require.md"
      },
      "fixable": null,
      "name": "node/global-require",
      "plugin": "node"
    },
    "node/handle-callback-err": {
      "type": "suggestion",
      "docs": {
        "description": "require error handling in callbacks",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/handle-callback-err.md"
      },
      "fixable": null,
      "name": "node/handle-callback-err",
      "plugin": "node"
    },
    "node/no-callback-literal": {
      "docs": {
        "description": "enforce Node.js-style error-first callback pattern is followed",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-callback-literal.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "node/no-callback-literal",
      "plugin": "node"
    },
    "node/no-deprecated-api": {
      "docs": {
        "description": "disallow deprecated APIs",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-deprecated-api.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "node/no-deprecated-api",
      "plugin": "node"
    },
    "node/no-exports-assign": {
      "docs": {
        "description": "disallow the assignment to `exports`",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-exports-assign.md"
      },
      "fixable": null,
      "type": "problem",
      "name": "node/no-exports-assign",
      "plugin": "node"
    },
    "node/no-extraneous-import": {
      "docs": {
        "description": "disallow `import` declarations which import extraneous modules",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-extraneous-import.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "node/no-extraneous-import",
      "plugin": "node"
    },
    "node/no-extraneous-require": {
      "docs": {
        "description": "disallow `require()` expressions which import extraneous modules",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-extraneous-require.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "node/no-extraneous-require",
      "plugin": "node"
    },
    "node/no-missing-import": {
      "docs": {
        "description": "disallow `import` declarations which import non-existence modules",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-missing-import.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "node/no-missing-import",
      "plugin": "node"
    },
    "node/no-missing-require": {
      "docs": {
        "description": "disallow `require()` expressions which import non-existence modules",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-missing-require.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "node/no-missing-require",
      "plugin": "node"
    },
    "node/no-mixed-requires": {
      "type": "suggestion",
      "docs": {
        "description": "disallow `require` calls to be mixed with regular variable declarations",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-mixed-requires.md"
      },
      "fixable": null,
      "name": "node/no-mixed-requires",
      "plugin": "node"
    },
    "node/no-new-require": {
      "type": "suggestion",
      "docs": {
        "description": "disallow `new` operators with calls to `require`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-new-require.md"
      },
      "fixable": null,
      "name": "node/no-new-require",
      "plugin": "node"
    },
    "node/no-path-concat": {
      "type": "suggestion",
      "docs": {
        "description": "disallow string concatenation with `__dirname` and `__filename`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-path-concat.md"
      },
      "fixable": null,
      "name": "node/no-path-concat",
      "plugin": "node"
    },
    "node/no-process-env": {
      "type": "suggestion",
      "docs": {
        "description": "disallow the use of `process.env`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-process-env.md"
      },
      "fixable": null,
      "name": "node/no-process-env",
      "plugin": "node"
    },
    "node/no-process-exit": {
      "type": "suggestion",
      "docs": {
        "description": "disallow the use of `process.exit()`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-process-exit.md"
      },
      "fixable": null,
      "name": "node/no-process-exit",
      "plugin": "node"
    },
    "node/no-restricted-import": {
      "type": "suggestion",
      "docs": {
        "description": "disallow specified modules when loaded by `import` declarations",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-restricted-import.md"
      },
      "fixable": null,
      "name": "node/no-restricted-import",
      "plugin": "node"
    },
    "node/no-restricted-require": {
      "type": "suggestion",
      "docs": {
        "description": "disallow specified modules when loaded by `require`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-restricted-require.md"
      },
      "fixable": null,
      "name": "node/no-restricted-require",
      "plugin": "node"
    },
    "node/no-sync": {
      "type": "suggestion",
      "docs": {
        "description": "disallow synchronous methods",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-sync.md"
      },
      "fixable": null,
      "name": "node/no-sync",
      "plugin": "node"
    },
    "node/no-top-level-await": {
      "docs": {
        "description": "disallow top-level `await` in published modules",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-top-level-await.md"
      },
      "fixable": null,
      "type": "problem",
      "name": "node/no-top-level-await",
      "plugin": "node"
    },
    "node/no-unpublished-bin": {
      "docs": {
        "description": "disallow `bin` files that npm ignores",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unpublished-bin.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "node/no-unpublished-bin",
      "plugin": "node"
    },
    "node/no-unpublished-import": {
      "docs": {
        "description": "disallow `import` declarations which import private modules",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unpublished-import.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "node/no-unpublished-import",
      "plugin": "node"
    },
    "node/no-unpublished-require": {
      "docs": {
        "description": "disallow `require()` expressions which import private modules",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unpublished-require.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "node/no-unpublished-require",
      "plugin": "node"
    },
    "node/no-unsupported-features/es-builtins": {
      "docs": {
        "description": "disallow unsupported ECMAScript built-ins on the specified version",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unsupported-features/es-builtins.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "node/no-unsupported-features/es-builtins",
      "plugin": "node"
    },
    "node/no-unsupported-features/es-syntax": {
      "docs": {
        "description": "disallow unsupported ECMAScript syntax on the specified version",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unsupported-features/es-syntax.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "node/no-unsupported-features/es-syntax",
      "plugin": "node"
    },
    "node/no-unsupported-features/node-builtins": {
      "docs": {
        "description": "disallow unsupported Node.js built-in APIs on the specified version",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unsupported-features/node-builtins.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "node/no-unsupported-features/node-builtins",
      "plugin": "node"
    },
    "node/prefer-global/buffer": {
      "docs": {
        "description": "enforce either `Buffer` or `require(\"buffer\").Buffer`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/buffer.md"
      },
      "type": "suggestion",
      "fixable": null,
      "name": "node/prefer-global/buffer",
      "plugin": "node"
    },
    "node/prefer-global/console": {
      "docs": {
        "description": "enforce either `console` or `require(\"console\")`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/console.md"
      },
      "type": "suggestion",
      "fixable": null,
      "name": "node/prefer-global/console",
      "plugin": "node"
    },
    "node/prefer-global/process": {
      "docs": {
        "description": "enforce either `process` or `require(\"process\")`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/process.md"
      },
      "type": "suggestion",
      "fixable": null,
      "name": "node/prefer-global/process",
      "plugin": "node"
    },
    "node/prefer-global/text-decoder": {
      "docs": {
        "description": "enforce either `TextDecoder` or `require(\"util\").TextDecoder`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/text-decoder.md"
      },
      "type": "suggestion",
      "fixable": null,
      "name": "node/prefer-global/text-decoder",
      "plugin": "node"
    },
    "node/prefer-global/text-encoder": {
      "docs": {
        "description": "enforce either `TextEncoder` or `require(\"util\").TextEncoder`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/text-encoder.md"
      },
      "type": "suggestion",
      "fixable": null,
      "name": "node/prefer-global/text-encoder",
      "plugin": "node"
    },
    "node/prefer-global/url-search-params": {
      "docs": {
        "description": "enforce either `URLSearchParams` or `require(\"url\").URLSearchParams`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/url-search-params.md"
      },
      "type": "suggestion",
      "fixable": null,
      "name": "node/prefer-global/url-search-params",
      "plugin": "node"
    },
    "node/prefer-global/url": {
      "docs": {
        "description": "enforce either `URL` or `require(\"url\").URL`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/url.md"
      },
      "type": "suggestion",
      "fixable": null,
      "name": "node/prefer-global/url",
      "plugin": "node"
    },
    "node/prefer-node-protocol": {
      "docs": {
        "description": "enforce using the `node:` protocol when importing Node.js builtin modules.",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-node-protocol.md"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "node/prefer-node-protocol",
      "plugin": "node"
    },
    "node/prefer-promises/dns": {
      "docs": {
        "description": "enforce `require(\"dns\").promises`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-promises/dns.md"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "node/prefer-promises/dns",
      "plugin": "node"
    },
    "node/prefer-promises/fs": {
      "docs": {
        "description": "enforce `require(\"fs\").promises`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-promises/fs.md"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "node/prefer-promises/fs",
      "plugin": "node"
    },
    "node/process-exit-as-throw": {
      "docs": {
        "description": "require that `process.exit()` expressions use the same code path as `throw`",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/process-exit-as-throw.md"
      },
      "type": "problem",
      "fixable": null,
      "supported": false,
      "name": "node/process-exit-as-throw",
      "plugin": "node"
    },
    "node/hashbang": {
      "docs": {
        "description": "require correct usage of hashbang",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/hashbang.md"
      },
      "type": "problem",
      "fixable": "code",
      "name": "node/hashbang",
      "plugin": "node"
    },
    "node/no-hide-core-modules": {
      "docs": {
        "description": "disallow third-party modules which are hiding core modules",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-hide-core-modules.md"
      },
      "type": "problem",
      "deprecated": true,
      "fixable": null,
      "name": "node/no-hide-core-modules",
      "plugin": "node"
    },
    "node/shebang": {
      "docs": {
        "description": "require correct usage of hashbang",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/hashbang.md"
      },
      "type": "problem",
      "fixable": "code",
      "deprecated": true,
      "replacedBy": [
        "n/hashbang"
      ],
      "name": "node/shebang",
      "plugin": "node"
    },
    "style/array-bracket-newline": {
      "type": "layout",
      "docs": {
        "description": "Enforce linebreaks after opening and before closing array brackets",
        "url": "https://eslint.style/rules/array-bracket-newline"
      },
      "fixable": "whitespace",
      "name": "style/array-bracket-newline",
      "plugin": "style"
    },
    "style/array-bracket-spacing": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside array brackets",
        "url": "https://eslint.style/rules/array-bracket-spacing"
      },
      "fixable": "whitespace",
      "name": "style/array-bracket-spacing",
      "plugin": "style"
    },
    "style/array-element-newline": {
      "type": "layout",
      "docs": {
        "description": "Enforce line breaks after each array element",
        "url": "https://eslint.style/rules/array-element-newline"
      },
      "fixable": "whitespace",
      "name": "style/array-element-newline",
      "plugin": "style"
    },
    "style/arrow-parens": {
      "type": "layout",
      "docs": {
        "description": "Require parentheses around arrow function arguments",
        "url": "https://eslint.style/rules/arrow-parens"
      },
      "fixable": "code",
      "name": "style/arrow-parens",
      "plugin": "style"
    },
    "style/arrow-spacing": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after the arrow in arrow functions",
        "url": "https://eslint.style/rules/arrow-spacing"
      },
      "fixable": "whitespace",
      "name": "style/arrow-spacing",
      "plugin": "style"
    },
    "style/block-spacing": {
      "type": "layout",
      "docs": {
        "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
        "url": "https://eslint.style/rules/block-spacing"
      },
      "fixable": "whitespace",
      "name": "style/block-spacing",
      "plugin": "style"
    },
    "style/brace-style": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent brace style for blocks",
        "url": "https://eslint.style/rules/brace-style"
      },
      "fixable": "whitespace",
      "name": "style/brace-style",
      "plugin": "style"
    },
    "style/comma-dangle": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow trailing commas",
        "url": "https://eslint.style/rules/comma-dangle"
      },
      "fixable": "code",
      "name": "style/comma-dangle",
      "plugin": "style"
    },
    "style/comma-spacing": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after commas",
        "url": "https://eslint.style/rules/comma-spacing"
      },
      "fixable": "whitespace",
      "name": "style/comma-spacing",
      "plugin": "style"
    },
    "style/comma-style": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent comma style",
        "url": "https://eslint.style/rules/comma-style"
      },
      "fixable": "code",
      "name": "style/comma-style",
      "plugin": "style"
    },
    "style/computed-property-spacing": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside computed property brackets",
        "url": "https://eslint.style/rules/computed-property-spacing"
      },
      "fixable": "whitespace",
      "name": "style/computed-property-spacing",
      "plugin": "style"
    },
    "style/curly-newline": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent line breaks after opening and before closing braces",
        "url": "https://eslint.style/rules/curly-newline"
      },
      "fixable": "whitespace",
      "name": "style/curly-newline",
      "plugin": "style"
    },
    "style/dot-location": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent newlines before and after dots",
        "url": "https://eslint.style/rules/dot-location"
      },
      "fixable": "code",
      "name": "style/dot-location",
      "plugin": "style"
    },
    "style/eol-last": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow newline at the end of files",
        "url": "https://eslint.style/rules/eol-last"
      },
      "fixable": "whitespace",
      "name": "style/eol-last",
      "plugin": "style"
    },
    "style/function-call-argument-newline": {
      "type": "layout",
      "docs": {
        "description": "Enforce line breaks between arguments of a function call",
        "url": "https://eslint.style/rules/function-call-argument-newline"
      },
      "fixable": "whitespace",
      "name": "style/function-call-argument-newline",
      "plugin": "style"
    },
    "style/function-call-spacing": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing between function identifiers and their invocations",
        "url": "https://eslint.style/rules/function-call-spacing"
      },
      "fixable": "whitespace",
      "name": "style/function-call-spacing",
      "plugin": "style"
    },
    "style/function-paren-newline": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent line breaks inside function parentheses",
        "url": "https://eslint.style/rules/function-paren-newline"
      },
      "fixable": "whitespace",
      "name": "style/function-paren-newline",
      "plugin": "style"
    },
    "style/generator-star-spacing": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing around `*` operators in generator functions",
        "url": "https://eslint.style/rules/generator-star-spacing"
      },
      "fixable": "whitespace",
      "name": "style/generator-star-spacing",
      "plugin": "style"
    },
    "style/implicit-arrow-linebreak": {
      "type": "layout",
      "docs": {
        "description": "Enforce the location of arrow function bodies",
        "url": "https://eslint.style/rules/implicit-arrow-linebreak"
      },
      "fixable": "whitespace",
      "name": "style/implicit-arrow-linebreak",
      "plugin": "style"
    },
    "style/indent": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent indentation",
        "url": "https://eslint.style/rules/indent"
      },
      "fixable": "whitespace",
      "name": "style/indent",
      "plugin": "style"
    },
    "style/indent-binary-ops": {
      "type": "layout",
      "docs": {
        "description": "Indentation for binary operators",
        "url": "https://eslint.style/rules/indent-binary-ops"
      },
      "fixable": "whitespace",
      "name": "style/indent-binary-ops",
      "plugin": "style"
    },
    "style/jsx-child-element-spacing": {
      "type": "layout",
      "docs": {
        "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
        "url": "https://eslint.style/rules/jsx-child-element-spacing"
      },
      "name": "style/jsx-child-element-spacing",
      "plugin": "style"
    },
    "style/jsx-closing-bracket-location": {
      "type": "layout",
      "docs": {
        "description": "Enforce closing bracket location in JSX",
        "url": "https://eslint.style/rules/jsx-closing-bracket-location"
      },
      "fixable": "code",
      "name": "style/jsx-closing-bracket-location",
      "plugin": "style"
    },
    "style/jsx-closing-tag-location": {
      "type": "layout",
      "docs": {
        "description": "Enforce closing tag location for multiline JSX",
        "url": "https://eslint.style/rules/jsx-closing-tag-location"
      },
      "fixable": "whitespace",
      "name": "style/jsx-closing-tag-location",
      "plugin": "style"
    },
    "style/jsx-curly-brace-presence": {
      "type": "layout",
      "docs": {
        "description": "Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes",
        "url": "https://eslint.style/rules/jsx-curly-brace-presence"
      },
      "fixable": "code",
      "name": "style/jsx-curly-brace-presence",
      "plugin": "style"
    },
    "style/jsx-curly-newline": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent linebreaks in curly braces in JSX attributes and expressions",
        "url": "https://eslint.style/rules/jsx-curly-newline"
      },
      "fixable": "whitespace",
      "name": "style/jsx-curly-newline",
      "plugin": "style"
    },
    "style/jsx-curly-spacing": {
      "type": "layout",
      "docs": {
        "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
        "url": "https://eslint.style/rules/jsx-curly-spacing"
      },
      "fixable": "code",
      "name": "style/jsx-curly-spacing",
      "plugin": "style"
    },
    "style/jsx-equals-spacing": {
      "type": "layout",
      "docs": {
        "description": "Enforce or disallow spaces around equal signs in JSX attributes",
        "url": "https://eslint.style/rules/jsx-equals-spacing"
      },
      "fixable": "code",
      "name": "style/jsx-equals-spacing",
      "plugin": "style"
    },
    "style/jsx-first-prop-new-line": {
      "type": "layout",
      "docs": {
        "description": "Enforce proper position of the first property in JSX",
        "url": "https://eslint.style/rules/jsx-first-prop-new-line"
      },
      "fixable": "code",
      "name": "style/jsx-first-prop-new-line",
      "plugin": "style"
    },
    "style/jsx-function-call-newline": {
      "type": "layout",
      "docs": {
        "description": "Enforce line breaks before and after JSX elements when they are used as arguments to a function.",
        "url": "https://eslint.style/rules/jsx-function-call-newline"
      },
      "fixable": "whitespace",
      "name": "style/jsx-function-call-newline",
      "plugin": "style"
    },
    "style/jsx-indent": {
      "type": "layout",
      "docs": {
        "description": "Enforce JSX indentation. Deprecated, use `indent` rule instead.",
        "url": "https://eslint.style/rules/jsx-indent"
      },
      "deprecated": true,
      "fixable": "whitespace",
      "name": "style/jsx-indent",
      "plugin": "style"
    },
    "style/jsx-indent-props": {
      "type": "layout",
      "docs": {
        "description": "Enforce props indentation in JSX",
        "url": "https://eslint.style/rules/jsx-indent-props"
      },
      "fixable": "code",
      "name": "style/jsx-indent-props",
      "plugin": "style"
    },
    "style/jsx-max-props-per-line": {
      "type": "layout",
      "docs": {
        "description": "Enforce maximum of props on a single line in JSX",
        "url": "https://eslint.style/rules/jsx-max-props-per-line"
      },
      "fixable": "code",
      "name": "style/jsx-max-props-per-line",
      "plugin": "style"
    },
    "style/jsx-newline": {
      "type": "layout",
      "docs": {
        "description": "Require or prevent a new line after jsx elements and expressions.",
        "url": "https://eslint.style/rules/jsx-newline"
      },
      "fixable": "code",
      "name": "style/jsx-newline",
      "plugin": "style"
    },
    "style/jsx-one-expression-per-line": {
      "type": "layout",
      "docs": {
        "description": "Require one JSX element per line",
        "url": "https://eslint.style/rules/jsx-one-expression-per-line"
      },
      "fixable": "whitespace",
      "name": "style/jsx-one-expression-per-line",
      "plugin": "style"
    },
    "style/jsx-pascal-case": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce PascalCase for user-defined JSX components",
        "url": "https://eslint.style/rules/jsx-pascal-case"
      },
      "name": "style/jsx-pascal-case",
      "plugin": "style"
    },
    "style/jsx-props-no-multi-spaces": {
      "type": "layout",
      "docs": {
        "description": "Disallow multiple spaces between inline JSX props",
        "url": "https://eslint.style/rules/jsx-props-no-multi-spaces"
      },
      "fixable": "code",
      "name": "style/jsx-props-no-multi-spaces",
      "plugin": "style"
    },
    "style/jsx-quotes": {
      "type": "layout",
      "docs": {
        "description": "Enforce the consistent use of either double or single quotes in JSX attributes",
        "url": "https://eslint.style/rules/jsx-quotes"
      },
      "fixable": "whitespace",
      "name": "style/jsx-quotes",
      "plugin": "style"
    },
    "style/jsx-self-closing-comp": {
      "type": "layout",
      "docs": {
        "description": "Disallow extra closing tags for components without children",
        "url": "https://eslint.style/rules/jsx-self-closing-comp"
      },
      "fixable": "code",
      "name": "style/jsx-self-closing-comp",
      "plugin": "style"
    },
    "style/jsx-sort-props": {
      "type": "layout",
      "docs": {
        "description": "Enforce props alphabetical sorting",
        "url": "https://eslint.style/rules/jsx-sort-props"
      },
      "fixable": "code",
      "name": "style/jsx-sort-props",
      "plugin": "style"
    },
    "style/jsx-tag-spacing": {
      "type": "layout",
      "docs": {
        "description": "Enforce whitespace in and around the JSX opening and closing brackets",
        "url": "https://eslint.style/rules/jsx-tag-spacing"
      },
      "fixable": "whitespace",
      "name": "style/jsx-tag-spacing",
      "plugin": "style"
    },
    "style/jsx-wrap-multilines": {
      "type": "layout",
      "docs": {
        "description": "Disallow missing parentheses around multiline JSX",
        "url": "https://eslint.style/rules/jsx-wrap-multilines"
      },
      "fixable": "code",
      "name": "style/jsx-wrap-multilines",
      "plugin": "style"
    },
    "style/key-spacing": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing between property names and type annotations in types and interfaces",
        "url": "https://eslint.style/rules/key-spacing"
      },
      "fixable": "whitespace",
      "name": "style/key-spacing",
      "plugin": "style"
    },
    "style/keyword-spacing": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after keywords",
        "url": "https://eslint.style/rules/keyword-spacing"
      },
      "fixable": "whitespace",
      "name": "style/keyword-spacing",
      "plugin": "style"
    },
    "style/line-comment-position": {
      "type": "layout",
      "docs": {
        "description": "Enforce position of line comments",
        "url": "https://eslint.style/rules/line-comment-position"
      },
      "name": "style/line-comment-position",
      "plugin": "style"
    },
    "style/linebreak-style": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent linebreak style",
        "url": "https://eslint.style/rules/linebreak-style"
      },
      "fixable": "whitespace",
      "name": "style/linebreak-style",
      "plugin": "style"
    },
    "style/lines-around-comment": {
      "type": "layout",
      "docs": {
        "description": "Require empty lines around comments",
        "url": "https://eslint.style/rules/lines-around-comment"
      },
      "fixable": "whitespace",
      "name": "style/lines-around-comment",
      "plugin": "style"
    },
    "style/lines-between-class-members": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow an empty line between class members",
        "url": "https://eslint.style/rules/lines-between-class-members"
      },
      "fixable": "whitespace",
      "name": "style/lines-between-class-members",
      "plugin": "style"
    },
    "style/max-len": {
      "type": "layout",
      "docs": {
        "description": "Enforce a maximum line length",
        "url": "https://eslint.style/rules/max-len"
      },
      "name": "style/max-len",
      "plugin": "style"
    },
    "style/max-statements-per-line": {
      "type": "layout",
      "docs": {
        "description": "Enforce a maximum number of statements allowed per line",
        "url": "https://eslint.style/rules/max-statements-per-line"
      },
      "name": "style/max-statements-per-line",
      "plugin": "style"
    },
    "style/member-delimiter-style": {
      "type": "layout",
      "docs": {
        "description": "Require a specific member delimiter style for interfaces and type literals",
        "url": "https://eslint.style/rules/member-delimiter-style"
      },
      "fixable": "whitespace",
      "name": "style/member-delimiter-style",
      "plugin": "style"
    },
    "style/multiline-comment-style": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a particular style for multiline comments",
        "url": "https://eslint.style/rules/multiline-comment-style"
      },
      "fixable": "whitespace",
      "name": "style/multiline-comment-style",
      "plugin": "style"
    },
    "style/multiline-ternary": {
      "type": "layout",
      "docs": {
        "description": "Enforce newlines between operands of ternary expressions",
        "url": "https://eslint.style/rules/multiline-ternary"
      },
      "fixable": "whitespace",
      "name": "style/multiline-ternary",
      "plugin": "style"
    },
    "style/new-parens": {
      "type": "layout",
      "docs": {
        "description": "Enforce or disallow parentheses when invoking a constructor with no arguments",
        "url": "https://eslint.style/rules/new-parens"
      },
      "fixable": "code",
      "name": "style/new-parens",
      "plugin": "style"
    },
    "style/newline-per-chained-call": {
      "type": "layout",
      "docs": {
        "description": "Require a newline after each call in a method chain",
        "url": "https://eslint.style/rules/newline-per-chained-call"
      },
      "fixable": "whitespace",
      "name": "style/newline-per-chained-call",
      "plugin": "style"
    },
    "style/no-confusing-arrow": {
      "type": "layout",
      "docs": {
        "description": "Disallow arrow functions where they could be confused with comparisons",
        "url": "https://eslint.style/rules/no-confusing-arrow"
      },
      "fixable": "code",
      "name": "style/no-confusing-arrow",
      "plugin": "style"
    },
    "style/no-extra-parens": {
      "type": "layout",
      "docs": {
        "description": "Disallow unnecessary parentheses",
        "url": "https://eslint.style/rules/no-extra-parens"
      },
      "fixable": "code",
      "name": "style/no-extra-parens",
      "plugin": "style"
    },
    "style/no-extra-semi": {
      "type": "layout",
      "docs": {
        "description": "Disallow unnecessary semicolons",
        "url": "https://eslint.style/rules/no-extra-semi"
      },
      "fixable": "code",
      "name": "style/no-extra-semi",
      "plugin": "style"
    },
    "style/no-floating-decimal": {
      "type": "layout",
      "docs": {
        "description": "Disallow leading or trailing decimal points in numeric literals",
        "url": "https://eslint.style/rules/no-floating-decimal"
      },
      "fixable": "code",
      "name": "style/no-floating-decimal",
      "plugin": "style"
    },
    "style/no-mixed-operators": {
      "type": "layout",
      "docs": {
        "description": "Disallow mixed binary operators",
        "url": "https://eslint.style/rules/no-mixed-operators"
      },
      "name": "style/no-mixed-operators",
      "plugin": "style"
    },
    "style/no-mixed-spaces-and-tabs": {
      "type": "layout",
      "docs": {
        "description": "Disallow mixed spaces and tabs for indentation",
        "url": "https://eslint.style/rules/no-mixed-spaces-and-tabs"
      },
      "name": "style/no-mixed-spaces-and-tabs",
      "plugin": "style"
    },
    "style/no-multi-spaces": {
      "type": "layout",
      "docs": {
        "description": "Disallow multiple spaces",
        "url": "https://eslint.style/rules/no-multi-spaces"
      },
      "fixable": "whitespace",
      "name": "style/no-multi-spaces",
      "plugin": "style"
    },
    "style/no-multiple-empty-lines": {
      "type": "layout",
      "docs": {
        "description": "Disallow multiple empty lines",
        "url": "https://eslint.style/rules/no-multiple-empty-lines"
      },
      "fixable": "whitespace",
      "name": "style/no-multiple-empty-lines",
      "plugin": "style"
    },
    "style/no-tabs": {
      "type": "layout",
      "docs": {
        "description": "Disallow all tabs",
        "url": "https://eslint.style/rules/no-tabs"
      },
      "name": "style/no-tabs",
      "plugin": "style"
    },
    "style/no-trailing-spaces": {
      "type": "layout",
      "docs": {
        "description": "Disallow trailing whitespace at the end of lines",
        "url": "https://eslint.style/rules/no-trailing-spaces"
      },
      "fixable": "whitespace",
      "name": "style/no-trailing-spaces",
      "plugin": "style"
    },
    "style/no-whitespace-before-property": {
      "type": "layout",
      "docs": {
        "description": "Disallow whitespace before properties",
        "url": "https://eslint.style/rules/no-whitespace-before-property"
      },
      "fixable": "whitespace",
      "name": "style/no-whitespace-before-property",
      "plugin": "style"
    },
    "style/nonblock-statement-body-position": {
      "type": "layout",
      "docs": {
        "description": "Enforce the location of single-line statements",
        "url": "https://eslint.style/rules/nonblock-statement-body-position"
      },
      "fixable": "whitespace",
      "name": "style/nonblock-statement-body-position",
      "plugin": "style"
    },
    "style/object-curly-newline": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent line breaks after opening and before closing braces",
        "url": "https://eslint.style/rules/object-curly-newline"
      },
      "fixable": "whitespace",
      "name": "style/object-curly-newline",
      "plugin": "style"
    },
    "style/object-curly-spacing": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside braces",
        "url": "https://eslint.style/rules/object-curly-spacing"
      },
      "fixable": "whitespace",
      "name": "style/object-curly-spacing",
      "plugin": "style"
    },
    "style/object-property-newline": {
      "type": "layout",
      "docs": {
        "description": "Enforce placing object properties on separate lines",
        "url": "https://eslint.style/rules/object-property-newline"
      },
      "fixable": "whitespace",
      "name": "style/object-property-newline",
      "plugin": "style"
    },
    "style/one-var-declaration-per-line": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow newlines around variable declarations",
        "url": "https://eslint.style/rules/one-var-declaration-per-line"
      },
      "fixable": "whitespace",
      "name": "style/one-var-declaration-per-line",
      "plugin": "style"
    },
    "style/operator-linebreak": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent linebreak style for operators",
        "url": "https://eslint.style/rules/operator-linebreak"
      },
      "fixable": "code",
      "name": "style/operator-linebreak",
      "plugin": "style"
    },
    "style/padded-blocks": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow padding within blocks",
        "url": "https://eslint.style/rules/padded-blocks"
      },
      "fixable": "whitespace",
      "name": "style/padded-blocks",
      "plugin": "style"
    },
    "style/padding-line-between-statements": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow padding lines between statements",
        "url": "https://eslint.style/rules/padding-line-between-statements"
      },
      "fixable": "whitespace",
      "hasSuggestions": false,
      "name": "style/padding-line-between-statements",
      "plugin": "style"
    },
    "style/quote-props": {
      "type": "layout",
      "docs": {
        "description": "Require quotes around object literal, type literal, interfaces and enums property names",
        "url": "https://eslint.style/rules/quote-props"
      },
      "fixable": "code",
      "name": "style/quote-props",
      "plugin": "style"
    },
    "style/quotes": {
      "type": "layout",
      "docs": {
        "description": "Enforce the consistent use of either backticks, double, or single quotes",
        "url": "https://eslint.style/rules/quotes"
      },
      "fixable": "code",
      "name": "style/quotes",
      "plugin": "style"
    },
    "style/rest-spread-spacing": {
      "type": "layout",
      "docs": {
        "description": "Enforce spacing between rest and spread operators and their expressions",
        "url": "https://eslint.style/rules/rest-spread-spacing"
      },
      "fixable": "whitespace",
      "name": "style/rest-spread-spacing",
      "plugin": "style"
    },
    "style/semi": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow semicolons instead of ASI",
        "url": "https://eslint.style/rules/semi"
      },
      "fixable": "code",
      "name": "style/semi",
      "plugin": "style"
    },
    "style/semi-spacing": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after semicolons",
        "url": "https://eslint.style/rules/semi-spacing"
      },
      "fixable": "whitespace",
      "name": "style/semi-spacing",
      "plugin": "style"
    },
    "style/semi-style": {
      "type": "layout",
      "docs": {
        "description": "Enforce location of semicolons",
        "url": "https://eslint.style/rules/semi-style"
      },
      "fixable": "whitespace",
      "name": "style/semi-style",
      "plugin": "style"
    },
    "style/space-before-blocks": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before blocks",
        "url": "https://eslint.style/rules/space-before-blocks"
      },
      "fixable": "whitespace",
      "name": "style/space-before-blocks",
      "plugin": "style"
    },
    "style/space-before-function-paren": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before function parenthesis",
        "url": "https://eslint.style/rules/space-before-function-paren"
      },
      "fixable": "whitespace",
      "name": "style/space-before-function-paren",
      "plugin": "style"
    },
    "style/space-in-parens": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside parentheses",
        "url": "https://eslint.style/rules/space-in-parens"
      },
      "fixable": "whitespace",
      "name": "style/space-in-parens",
      "plugin": "style"
    },
    "style/space-infix-ops": {
      "type": "layout",
      "docs": {
        "description": "Require spacing around infix operators",
        "url": "https://eslint.style/rules/space-infix-ops"
      },
      "fixable": "whitespace",
      "name": "style/space-infix-ops",
      "plugin": "style"
    },
    "style/space-unary-ops": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before or after unary operators",
        "url": "https://eslint.style/rules/space-unary-ops"
      },
      "fixable": "whitespace",
      "name": "style/space-unary-ops",
      "plugin": "style"
    },
    "style/spaced-comment": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing after the `//` or `/*` in a comment",
        "url": "https://eslint.style/rules/spaced-comment"
      },
      "fixable": "whitespace",
      "name": "style/spaced-comment",
      "plugin": "style"
    },
    "style/switch-colon-spacing": {
      "type": "layout",
      "docs": {
        "description": "Enforce spacing around colons of switch statements",
        "url": "https://eslint.style/rules/switch-colon-spacing"
      },
      "fixable": "whitespace",
      "name": "style/switch-colon-spacing",
      "plugin": "style"
    },
    "style/template-curly-spacing": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing around embedded expressions of template strings",
        "url": "https://eslint.style/rules/template-curly-spacing"
      },
      "fixable": "whitespace",
      "name": "style/template-curly-spacing",
      "plugin": "style"
    },
    "style/template-tag-spacing": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing between template tags and their literals",
        "url": "https://eslint.style/rules/template-tag-spacing"
      },
      "fixable": "whitespace",
      "name": "style/template-tag-spacing",
      "plugin": "style"
    },
    "style/type-annotation-spacing": {
      "type": "layout",
      "docs": {
        "description": "Require consistent spacing around type annotations",
        "url": "https://eslint.style/rules/type-annotation-spacing"
      },
      "fixable": "whitespace",
      "name": "style/type-annotation-spacing",
      "plugin": "style"
    },
    "style/type-generic-spacing": {
      "type": "layout",
      "docs": {
        "description": "Enforces consistent spacing inside TypeScript type generics",
        "url": "https://eslint.style/rules/type-generic-spacing"
      },
      "fixable": "whitespace",
      "name": "style/type-generic-spacing",
      "plugin": "style"
    },
    "style/type-named-tuple-spacing": {
      "type": "layout",
      "docs": {
        "description": "Expect space before the type declaration in the named tuple",
        "url": "https://eslint.style/rules/type-named-tuple-spacing"
      },
      "fixable": "whitespace",
      "name": "style/type-named-tuple-spacing",
      "plugin": "style"
    },
    "style/wrap-iife": {
      "type": "layout",
      "docs": {
        "description": "Require parentheses around immediate `function` invocations",
        "url": "https://eslint.style/rules/wrap-iife"
      },
      "fixable": "code",
      "name": "style/wrap-iife",
      "plugin": "style"
    },
    "style/wrap-regex": {
      "type": "layout",
      "docs": {
        "description": "Require parenthesis around regex literals",
        "url": "https://eslint.style/rules/wrap-regex"
      },
      "fixable": "code",
      "name": "style/wrap-regex",
      "plugin": "style"
    },
    "style/yield-star-spacing": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing around the `*` in `yield*` expressions",
        "url": "https://eslint.style/rules/yield-star-spacing"
      },
      "fixable": "whitespace",
      "name": "style/yield-star-spacing",
      "plugin": "style"
    },
    "import/no-unresolved": {
      "type": "problem",
      "docs": {
        "category": "Static analysis",
        "description": "Ensure imports point to a file/module that can be resolved.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-unresolved.md"
      },
      "name": "import/no-unresolved",
      "plugin": "import"
    },
    "import/named": {
      "type": "problem",
      "docs": {
        "category": "Static analysis",
        "description": "Ensure named imports correspond to a named export in the remote file.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/named.md"
      },
      "name": "import/named",
      "plugin": "import"
    },
    "import/default": {
      "type": "problem",
      "docs": {
        "category": "Static analysis",
        "description": "Ensure a default export is present, given a default import.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/default.md"
      },
      "name": "import/default",
      "plugin": "import"
    },
    "import/namespace": {
      "type": "problem",
      "docs": {
        "category": "Static analysis",
        "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/namespace.md"
      },
      "name": "import/namespace",
      "plugin": "import"
    },
    "import/no-namespace": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Forbid namespace (a.k.a. \"wildcard\" `*`) imports.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-namespace.md"
      },
      "fixable": "code",
      "name": "import/no-namespace",
      "plugin": "import"
    },
    "import/export": {
      "type": "problem",
      "docs": {
        "category": "Helpful warnings",
        "description": "Forbid any invalid exports, i.e. re-export of the same name.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/export.md"
      },
      "name": "import/export",
      "plugin": "import"
    },
    "import/no-mutable-exports": {
      "type": "suggestion",
      "docs": {
        "category": "Helpful warnings",
        "description": "Forbid the use of mutable exports with `var` or `let`.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-mutable-exports.md"
      },
      "name": "import/no-mutable-exports",
      "plugin": "import"
    },
    "import/extensions": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Ensure consistent use of file extension within the import path.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/extensions.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "import/extensions",
      "plugin": "import"
    },
    "import/no-restricted-paths": {
      "type": "problem",
      "docs": {
        "category": "Static analysis",
        "description": "Enforce which files can be imported in a given folder.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-restricted-paths.md"
      },
      "name": "import/no-restricted-paths",
      "plugin": "import"
    },
    "import/no-internal-modules": {
      "type": "suggestion",
      "docs": {
        "category": "Static analysis",
        "description": "Forbid importing the submodules of other modules.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-internal-modules.md"
      },
      "name": "import/no-internal-modules",
      "plugin": "import"
    },
    "import/group-exports": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Prefer named exports to be grouped together in a single export declaration.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/group-exports.md"
      },
      "name": "import/group-exports",
      "plugin": "import"
    },
    "import/no-relative-packages": {
      "type": "suggestion",
      "docs": {
        "category": "Static analysis",
        "description": "Forbid importing packages through relative paths.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-relative-packages.md"
      },
      "fixable": "code",
      "name": "import/no-relative-packages",
      "plugin": "import"
    },
    "import/no-relative-parent-imports": {
      "type": "suggestion",
      "docs": {
        "category": "Static analysis",
        "description": "Forbid importing modules from parent directories.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-relative-parent-imports.md"
      },
      "name": "import/no-relative-parent-imports",
      "plugin": "import"
    },
    "import/consistent-type-specifier-style": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Enforce or ban the use of inline type-only markers for named imports.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/consistent-type-specifier-style.md"
      },
      "fixable": "code",
      "name": "import/consistent-type-specifier-style",
      "plugin": "import"
    },
    "import/no-self-import": {
      "type": "problem",
      "docs": {
        "category": "Static analysis",
        "description": "Forbid a module from importing itself.",
        "recommended": true,
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-self-import.md"
      },
      "name": "import/no-self-import",
      "plugin": "import"
    },
    "import/no-cycle": {
      "type": "suggestion",
      "docs": {
        "category": "Static analysis",
        "description": "Forbid a module from importing a module with a dependency path back to itself.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-cycle.md"
      },
      "name": "import/no-cycle",
      "plugin": "import"
    },
    "import/no-named-default": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Forbid named default exports.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-named-default.md"
      },
      "name": "import/no-named-default",
      "plugin": "import"
    },
    "import/no-named-as-default": {
      "type": "problem",
      "docs": {
        "category": "Helpful warnings",
        "description": "Forbid use of exported name as identifier of default export.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-named-as-default.md"
      },
      "name": "import/no-named-as-default",
      "plugin": "import"
    },
    "import/no-named-as-default-member": {
      "type": "suggestion",
      "docs": {
        "category": "Helpful warnings",
        "description": "Forbid use of exported name as property of default export.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-named-as-default-member.md"
      },
      "name": "import/no-named-as-default-member",
      "plugin": "import"
    },
    "import/no-anonymous-default-export": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Forbid anonymous values as default exports.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-anonymous-default-export.md"
      },
      "name": "import/no-anonymous-default-export",
      "plugin": "import"
    },
    "import/no-rename-default": {
      "type": "suggestion",
      "docs": {
        "category": "Helpful warnings",
        "description": "Forbid importing a default export by a different name.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-rename-default.md"
      },
      "name": "import/no-rename-default",
      "plugin": "import"
    },
    "import/no-unused-modules": {
      "type": "suggestion",
      "docs": {
        "category": "Helpful warnings",
        "description": "Forbid modules without exports, or exports without matching import in another module.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-unused-modules.md"
      },
      "name": "import/no-unused-modules",
      "plugin": "import"
    },
    "import/no-commonjs": {
      "type": "suggestion",
      "docs": {
        "category": "Module systems",
        "description": "Forbid CommonJS `require` calls and `module.exports` or `exports.*`.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-commonjs.md"
      },
      "name": "import/no-commonjs",
      "plugin": "import"
    },
    "import/no-amd": {
      "type": "suggestion",
      "docs": {
        "category": "Module systems",
        "description": "Forbid AMD `require` and `define` calls.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-amd.md"
      },
      "name": "import/no-amd",
      "plugin": "import"
    },
    "import/no-duplicates": {
      "type": "problem",
      "docs": {
        "category": "Style guide",
        "description": "Forbid repeated import of the same module in multiple places.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-duplicates.md"
      },
      "fixable": "code",
      "name": "import/no-duplicates",
      "plugin": "import"
    },
    "import/first": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Ensure all imports appear before other statements.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/first.md"
      },
      "fixable": "code",
      "name": "import/first",
      "plugin": "import"
    },
    "import/max-dependencies": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Enforce the maximum number of dependencies a module can have.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/max-dependencies.md"
      },
      "name": "import/max-dependencies",
      "plugin": "import"
    },
    "import/no-extraneous-dependencies": {
      "type": "problem",
      "docs": {
        "category": "Helpful warnings",
        "description": "Forbid the use of extraneous packages.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-extraneous-dependencies.md"
      },
      "name": "import/no-extraneous-dependencies",
      "plugin": "import"
    },
    "import/no-absolute-path": {
      "type": "suggestion",
      "docs": {
        "category": "Static analysis",
        "description": "Forbid import of modules using absolute paths.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-absolute-path.md"
      },
      "fixable": "code",
      "name": "import/no-absolute-path",
      "plugin": "import"
    },
    "import/no-nodejs-modules": {
      "type": "suggestion",
      "docs": {
        "category": "Module systems",
        "description": "Forbid Node.js builtin modules.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-nodejs-modules.md"
      },
      "name": "import/no-nodejs-modules",
      "plugin": "import"
    },
    "import/no-webpack-loader-syntax": {
      "type": "problem",
      "docs": {
        "category": "Static analysis",
        "description": "Forbid webpack loader syntax in imports.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-webpack-loader-syntax.md"
      },
      "name": "import/no-webpack-loader-syntax",
      "plugin": "import"
    },
    "import/order": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Enforce a convention in module import order.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/order.md"
      },
      "fixable": "code",
      "name": "import/order",
      "plugin": "import"
    },
    "import/newline-after-import": {
      "type": "layout",
      "docs": {
        "category": "Style guide",
        "description": "Enforce a newline after import statements.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/newline-after-import.md"
      },
      "fixable": "whitespace",
      "name": "import/newline-after-import",
      "plugin": "import"
    },
    "import/prefer-default-export": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Prefer a default export if module exports a single name or multiple names.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/prefer-default-export.md"
      },
      "name": "import/prefer-default-export",
      "plugin": "import"
    },
    "import/prefer-namespace-import": {
      "type": "problem",
      "docs": {
        "category": "Style guide",
        "description": "Enforce using namespace imports for specific modules, like `react`/`react-dom`, etc.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/prefer-namespace-import.md"
      },
      "fixable": "code",
      "name": "import/prefer-namespace-import",
      "plugin": "import"
    },
    "import/no-default-export": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Forbid default exports.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-default-export.md"
      },
      "name": "import/no-default-export",
      "plugin": "import"
    },
    "import/no-named-export": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Forbid named exports.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-named-export.md"
      },
      "name": "import/no-named-export",
      "plugin": "import"
    },
    "import/no-dynamic-require": {
      "type": "suggestion",
      "docs": {
        "category": "Static analysis",
        "description": "Forbid `require()` calls with expressions.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-dynamic-require.md"
      },
      "name": "import/no-dynamic-require",
      "plugin": "import"
    },
    "import/unambiguous": {
      "type": "suggestion",
      "docs": {
        "category": "Module systems",
        "description": "Forbid potentially ambiguous parse goal (`script` vs. `module`).",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/unambiguous.md"
      },
      "name": "import/unambiguous",
      "plugin": "import"
    },
    "import/no-unassigned-import": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Forbid unassigned imports.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-unassigned-import.md"
      },
      "name": "import/no-unassigned-import",
      "plugin": "import"
    },
    "import/no-useless-path-segments": {
      "type": "suggestion",
      "docs": {
        "category": "Static analysis",
        "description": "Forbid unnecessary path segments in import and require statements.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-useless-path-segments.md"
      },
      "fixable": "code",
      "name": "import/no-useless-path-segments",
      "plugin": "import"
    },
    "import/dynamic-import-chunkname": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/dynamic-import-chunkname.md"
      },
      "hasSuggestions": true,
      "name": "import/dynamic-import-chunkname",
      "plugin": "import"
    },
    "import/no-import-module-exports": {
      "type": "problem",
      "docs": {
        "category": "Module systems",
        "description": "Forbid import statements with CommonJS module.exports.",
        "recommended": true,
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-import-module-exports.md"
      },
      "fixable": "code",
      "name": "import/no-import-module-exports",
      "plugin": "import"
    },
    "import/no-empty-named-blocks": {
      "type": "suggestion",
      "docs": {
        "category": "Helpful warnings",
        "description": "Forbid empty named import blocks.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-empty-named-blocks.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "import/no-empty-named-blocks",
      "plugin": "import"
    },
    "import/exports-last": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Ensure all exports appear after other statements.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/exports-last.md"
      },
      "name": "import/exports-last",
      "plugin": "import"
    },
    "import/no-deprecated": {
      "type": "suggestion",
      "docs": {
        "category": "Helpful warnings",
        "description": "Forbid imported names marked with `@deprecated` documentation tag.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-deprecated.md"
      },
      "name": "import/no-deprecated",
      "plugin": "import"
    },
    "import/imports-first": {
      "type": "suggestion",
      "docs": {
        "category": "Style guide",
        "description": "Replaced by `import-x/first`.",
        "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/imports-first.md"
      },
      "fixable": "code",
      "deprecated": {
        "message": "Replaced by `import-x/first`.",
        "url": "https://github.com/import-js/eslint-plugin-import/blob/main/CHANGELOG.md#changed-24",
        "deprecatedSince": "2.0.0",
        "replacedBy": [
          {
            "message": "Replaced by `import-x/first`.",
            "rule": {
              "name": "first",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/first.md"
            }
          }
        ]
      },
      "name": "import/imports-first",
      "plugin": "import"
    },
    "promise/param-names": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent param names and ordering when creating new promises.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/param-names.md"
      },
      "name": "promise/param-names",
      "plugin": "promise"
    },
    "promise/no-return-wrap": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow wrapping values in `Promise.resolve` or `Promise.reject` when not needed.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-return-wrap.md"
      },
      "name": "promise/no-return-wrap",
      "plugin": "promise"
    },
    "promise/always-return": {
      "type": "problem",
      "docs": {
        "description": "Require returning inside each `then()` to create readable and reusable Promise chains.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/always-return.md"
      },
      "name": "promise/always-return",
      "plugin": "promise"
    },
    "promise/catch-or-return": {
      "type": "problem",
      "docs": {
        "description": "Enforce the use of `catch()` on un-returned promises.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/catch-or-return.md"
      },
      "name": "promise/catch-or-return",
      "plugin": "promise"
    },
    "promise/prefer-await-to-callbacks": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `async`/`await` to the callback pattern.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/prefer-await-to-callbacks.md"
      },
      "name": "promise/prefer-await-to-callbacks",
      "plugin": "promise"
    },
    "promise/prefer-await-to-then": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `await` to `then()`/`catch()`/`finally()` for reading Promise values.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/prefer-await-to-then.md"
      },
      "name": "promise/prefer-await-to-then",
      "plugin": "promise"
    },
    "promise/prefer-catch": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `catch` to `then(a, b)`/`then(null, b)` for handling errors.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/prefer-catch.md"
      },
      "fixable": "code",
      "name": "promise/prefer-catch",
      "plugin": "promise"
    },
    "promise/no-native": {
      "type": "suggestion",
      "docs": {
        "description": "Require creating a `Promise` constructor before using it in an ES5 environment.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-native.md"
      },
      "name": "promise/no-native",
      "plugin": "promise"
    },
    "promise/no-callback-in-promise": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow calling `cb()` inside of a `then()` (use [util.callbackify][] instead).",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-callback-in-promise.md"
      },
      "name": "promise/no-callback-in-promise",
      "plugin": "promise"
    },
    "promise/no-promise-in-callback": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow using promises inside of callbacks.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-promise-in-callback.md"
      },
      "name": "promise/no-promise-in-callback",
      "plugin": "promise"
    },
    "promise/no-nesting": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow nested `then()` or `catch()` statements.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-nesting.md"
      },
      "name": "promise/no-nesting",
      "plugin": "promise"
    },
    "promise/avoid-new": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow creating `new` promises outside of utility libs (use [util.promisify][] instead).",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/avoid-new.md"
      },
      "name": "promise/avoid-new",
      "plugin": "promise"
    },
    "promise/no-new-statics": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling `new` on a Promise static method.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-new-statics.md"
      },
      "fixable": "code",
      "name": "promise/no-new-statics",
      "plugin": "promise"
    },
    "promise/no-return-in-finally": {
      "type": "problem",
      "docs": {
        "description": "Disallow return statements in `finally()`.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-return-in-finally.md"
      },
      "name": "promise/no-return-in-finally",
      "plugin": "promise"
    },
    "promise/valid-params": {
      "type": "problem",
      "docs": {
        "description": "Enforces the proper number of arguments are passed to Promise functions.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/valid-params.md"
      },
      "name": "promise/valid-params",
      "plugin": "promise"
    },
    "promise/no-multiple-resolved": {
      "type": "problem",
      "docs": {
        "description": "Disallow creating new promises with paths that resolve multiple times.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-multiple-resolved.md"
      },
      "name": "promise/no-multiple-resolved",
      "plugin": "promise"
    },
    "promise/spec-only": {
      "type": "problem",
      "docs": {
        "description": "Disallow use of non-standard Promise static methods.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/spec-only.md"
      },
      "name": "promise/spec-only",
      "plugin": "promise"
    },
    "perfectionist/sort-variable-declarations": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-variable-declarations",
        "description": "Enforce sorted variable declarations.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-variable-declarations",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-intersection-types": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-intersection-types",
        "description": "Enforce sorted intersection types.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-intersection-types",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-heritage-clauses": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-heritage-clauses",
        "description": "Enforce sorted heritage clauses.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-heritage-clauses",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-array-includes": {
      "docs": {
        "description": "Enforce sorted arrays before include method.",
        "url": "https://perfectionist.dev/rules/sort-array-includes",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-array-includes",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-named-imports": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-named-imports",
        "description": "Enforce sorted named imports.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-named-imports",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-named-exports": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-named-exports",
        "description": "Enforce sorted named exports.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-named-exports",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-object-types": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-object-types",
        "description": "Enforce sorted object types.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-object-types",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-union-types": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-union-types",
        "description": "Enforce sorted union types.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-union-types",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-switch-case": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-switch-case",
        "description": "Enforce sorted switch cases.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-switch-case",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-decorators": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-decorators",
        "description": "Enforce sorted decorators.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-decorators",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-interfaces": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-interfaces",
        "description": "Enforce sorted interface properties.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-interfaces",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-jsx-props": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-jsx-props",
        "description": "Enforce sorted JSX props.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-jsx-props",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-modules": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-modules",
        "description": "Enforce sorted modules.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-modules",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-classes": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-classes",
        "description": "Enforce sorted classes.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-classes",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-imports": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-imports",
        "description": "Enforce sorted imports.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-imports",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-exports": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-exports",
        "description": "Enforce sorted exports.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-exports",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-objects": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-objects",
        "description": "Enforce sorted objects.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-objects",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-enums": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-enums",
        "description": "Enforce sorted TypeScript enums.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-enums",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-sets": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-sets",
        "description": "Enforce sorted sets.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-sets",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-maps": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-maps",
        "description": "Enforce sorted Map elements.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-maps",
      "plugin": "perfectionist"
    },
    "unicorn/better-regex": {
      "type": "suggestion",
      "docs": {
        "description": "Improve regexes by making them shorter, consistent, and safer.",
        "recommended": false,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/better-regex.md"
      },
      "fixable": "code",
      "defaultOptions": [
        {
          "sortCharacterClasses": true
        }
      ],
      "name": "unicorn/better-regex",
      "plugin": "unicorn"
    },
    "unicorn/catch-error-name": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a specific parameter name in catch clauses.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/catch-error-name.md"
      },
      "fixable": "code",
      "defaultOptions": [
        {}
      ],
      "name": "unicorn/catch-error-name",
      "plugin": "unicorn"
    },
    "unicorn/consistent-assert": {
      "type": "problem",
      "docs": {
        "description": "Enforce consistent assertion style with `node:assert`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/consistent-assert.md"
      },
      "fixable": "code",
      "name": "unicorn/consistent-assert",
      "plugin": "unicorn"
    },
    "unicorn/consistent-date-clone": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer passing `Date` directly to the constructor when cloning.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/consistent-date-clone.md"
      },
      "fixable": "code",
      "name": "unicorn/consistent-date-clone",
      "plugin": "unicorn"
    },
    "unicorn/consistent-destructuring": {
      "type": "suggestion",
      "docs": {
        "description": "Use destructured variables over properties.",
        "recommended": false,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/consistent-destructuring.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/consistent-destructuring",
      "plugin": "unicorn"
    },
    "unicorn/consistent-empty-array-spread": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer consistent types when spreading a ternary in an array literal.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/consistent-empty-array-spread.md"
      },
      "fixable": "code",
      "name": "unicorn/consistent-empty-array-spread",
      "plugin": "unicorn"
    },
    "unicorn/consistent-existence-index-check": {
      "type": "problem",
      "docs": {
        "description": "Enforce consistent style for element existence checks with `indexOf()`, `lastIndexOf()`, `findIndex()`, and `findLastIndex()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/consistent-existence-index-check.md"
      },
      "fixable": "code",
      "name": "unicorn/consistent-existence-index-check",
      "plugin": "unicorn"
    },
    "unicorn/consistent-function-scoping": {
      "type": "suggestion",
      "docs": {
        "description": "Move function definitions to the highest possible scope.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/consistent-function-scoping.md"
      },
      "defaultOptions": [
        {
          "checkArrowFunctions": true
        }
      ],
      "name": "unicorn/consistent-function-scoping",
      "plugin": "unicorn"
    },
    "unicorn/custom-error-definition": {
      "type": "problem",
      "docs": {
        "description": "Enforce correct `Error` subclassing.",
        "recommended": false,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/custom-error-definition.md"
      },
      "fixable": "code",
      "name": "unicorn/custom-error-definition",
      "plugin": "unicorn"
    },
    "unicorn/empty-brace-spaces": {
      "type": "layout",
      "docs": {
        "description": "Enforce no spaces between braces.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/empty-brace-spaces.md"
      },
      "fixable": "whitespace",
      "name": "unicorn/empty-brace-spaces",
      "plugin": "unicorn"
    },
    "unicorn/error-message": {
      "type": "problem",
      "docs": {
        "description": "Enforce passing a `message` value when creating a built-in error.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/error-message.md"
      },
      "name": "unicorn/error-message",
      "plugin": "unicorn"
    },
    "unicorn/escape-case": {
      "type": "suggestion",
      "docs": {
        "description": "Require escape sequences to use uppercase or lowercase values.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/escape-case.md"
      },
      "fixable": "code",
      "defaultOptions": [
        "uppercase"
      ],
      "name": "unicorn/escape-case",
      "plugin": "unicorn"
    },
    "unicorn/expiring-todo-comments": {
      "type": "suggestion",
      "docs": {
        "description": "Add expiration conditions to TODO comments.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/expiring-todo-comments.md"
      },
      "defaultOptions": [
        {
          "terms": [
            "todo",
            "fixme",
            "xxx"
          ],
          "ignore": [],
          "ignoreDatesOnPullRequests": true,
          "allowWarningComments": true
        }
      ],
      "name": "unicorn/expiring-todo-comments",
      "plugin": "unicorn"
    },
    "unicorn/explicit-length-check": {
      "type": "problem",
      "docs": {
        "description": "Enforce explicitly comparing the `length` or `size` property of a value.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/explicit-length-check.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/explicit-length-check",
      "plugin": "unicorn"
    },
    "unicorn/filename-case": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a case style for filenames.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/filename-case.md"
      },
      "defaultOptions": [],
      "name": "unicorn/filename-case",
      "plugin": "unicorn"
    },
    "unicorn/import-style": {
      "type": "problem",
      "docs": {
        "description": "Enforce specific import styles per module.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/import-style.md"
      },
      "defaultOptions": [
        {}
      ],
      "name": "unicorn/import-style",
      "plugin": "unicorn"
    },
    "unicorn/new-for-builtins": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of `new` for all builtins, except `String`, `Number`, `Boolean`, `Symbol` and `BigInt`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/new-for-builtins.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/new-for-builtins",
      "plugin": "unicorn"
    },
    "unicorn/no-abusive-eslint-disable": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce specifying rules to disable in `eslint-disable` comments.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-abusive-eslint-disable.md"
      },
      "name": "unicorn/no-abusive-eslint-disable",
      "plugin": "unicorn"
    },
    "unicorn/no-accessor-recursion": {
      "type": "problem",
      "docs": {
        "description": "Disallow recursive access to `this` within getters and setters.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-accessor-recursion.md"
      },
      "defaultOptions": [],
      "name": "unicorn/no-accessor-recursion",
      "plugin": "unicorn"
    },
    "unicorn/no-anonymous-default-export": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow anonymous functions and classes as the default export.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-anonymous-default-export.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/no-anonymous-default-export",
      "plugin": "unicorn"
    },
    "unicorn/no-array-callback-reference": {
      "type": "problem",
      "docs": {
        "description": "Prevent passing a function reference directly to iterator methods.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-array-callback-reference.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/no-array-callback-reference",
      "plugin": "unicorn"
    },
    "unicorn/no-array-for-each": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `for…of` over the `forEach` method.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-array-for-each.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/no-array-for-each",
      "plugin": "unicorn"
    },
    "unicorn/no-array-method-this-argument": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow using the `this` argument in array methods.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-array-method-this-argument.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/no-array-method-this-argument",
      "plugin": "unicorn"
    },
    "unicorn/no-array-reduce": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `Array#reduce()` and `Array#reduceRight()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-array-reduce.md"
      },
      "defaultOptions": [
        {
          "allowSimpleOperations": true
        }
      ],
      "name": "unicorn/no-array-reduce",
      "plugin": "unicorn"
    },
    "unicorn/no-await-expression-member": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow member access from await expression.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-await-expression-member.md"
      },
      "fixable": "code",
      "name": "unicorn/no-await-expression-member",
      "plugin": "unicorn"
    },
    "unicorn/no-await-in-promise-methods": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow using `await` in `Promise` method parameters.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-await-in-promise-methods.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/no-await-in-promise-methods",
      "plugin": "unicorn"
    },
    "unicorn/no-console-spaces": {
      "type": "suggestion",
      "docs": {
        "description": "Do not use leading/trailing space between `console.log` parameters.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-console-spaces.md"
      },
      "fixable": "code",
      "name": "unicorn/no-console-spaces",
      "plugin": "unicorn"
    },
    "unicorn/no-document-cookie": {
      "type": "problem",
      "docs": {
        "description": "Do not use `document.cookie` directly.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-document-cookie.md"
      },
      "name": "unicorn/no-document-cookie",
      "plugin": "unicorn"
    },
    "unicorn/no-empty-file": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow empty files.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-empty-file.md"
      },
      "name": "unicorn/no-empty-file",
      "plugin": "unicorn"
    },
    "unicorn/no-for-loop": {
      "type": "suggestion",
      "docs": {
        "description": "Do not use a `for` loop that can be replaced with a `for-of` loop.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-for-loop.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/no-for-loop",
      "plugin": "unicorn"
    },
    "unicorn/no-hex-escape": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of Unicode escapes instead of hexadecimal escapes.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-hex-escape.md"
      },
      "fixable": "code",
      "name": "unicorn/no-hex-escape",
      "plugin": "unicorn"
    },
    "unicorn/no-instanceof-builtins": {
      "type": "problem",
      "docs": {
        "description": "Disallow `instanceof` with built-in objects",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-instanceof-builtins.md"
      },
      "fixable": "code",
      "defaultOptions": [
        {
          "useErrorIsError": false,
          "strategy": "loose",
          "include": [],
          "exclude": []
        }
      ],
      "hasSuggestions": true,
      "name": "unicorn/no-instanceof-builtins",
      "plugin": "unicorn"
    },
    "unicorn/no-invalid-fetch-options": {
      "type": "problem",
      "docs": {
        "description": "Disallow invalid options in `fetch()` and `new Request()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-invalid-fetch-options.md"
      },
      "name": "unicorn/no-invalid-fetch-options",
      "plugin": "unicorn"
    },
    "unicorn/no-invalid-remove-event-listener": {
      "type": "problem",
      "docs": {
        "description": "Prevent calling `EventTarget#removeEventListener()` with the result of an expression.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-invalid-remove-event-listener.md"
      },
      "name": "unicorn/no-invalid-remove-event-listener",
      "plugin": "unicorn"
    },
    "unicorn/no-keyword-prefix": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow identifiers starting with `new` or `class`.",
        "recommended": false,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-keyword-prefix.md"
      },
      "defaultOptions": [
        {}
      ],
      "name": "unicorn/no-keyword-prefix",
      "plugin": "unicorn"
    },
    "unicorn/no-lonely-if": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `if` statements as the only statement in `if` blocks without `else`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-lonely-if.md"
      },
      "fixable": "code",
      "name": "unicorn/no-lonely-if",
      "plugin": "unicorn"
    },
    "unicorn/no-magic-array-flat-depth": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow a magic number as the `depth` argument in `Array#flat(…).`",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-magic-array-flat-depth.md"
      },
      "name": "unicorn/no-magic-array-flat-depth",
      "plugin": "unicorn"
    },
    "unicorn/no-named-default": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow named usage of default import and export.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-named-default.md"
      },
      "fixable": "code",
      "name": "unicorn/no-named-default",
      "plugin": "unicorn"
    },
    "unicorn/no-negated-condition": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow negated conditions.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-negated-condition.md"
      },
      "fixable": "code",
      "name": "unicorn/no-negated-condition",
      "plugin": "unicorn"
    },
    "unicorn/no-negation-in-equality-check": {
      "type": "problem",
      "docs": {
        "description": "Disallow negated expression in equality check.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-negation-in-equality-check.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/no-negation-in-equality-check",
      "plugin": "unicorn"
    },
    "unicorn/no-nested-ternary": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow nested ternary expressions.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-nested-ternary.md"
      },
      "fixable": "code",
      "name": "unicorn/no-nested-ternary",
      "plugin": "unicorn"
    },
    "unicorn/no-new-array": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `new Array()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-new-array.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/no-new-array",
      "plugin": "unicorn"
    },
    "unicorn/no-new-buffer": {
      "type": "problem",
      "docs": {
        "description": "Enforce the use of `Buffer.from()` and `Buffer.alloc()` instead of the deprecated `new Buffer()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-new-buffer.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/no-new-buffer",
      "plugin": "unicorn"
    },
    "unicorn/no-null": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of the `null` literal.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-null.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "defaultOptions": [
        {
          "checkStrictEquality": false
        }
      ],
      "name": "unicorn/no-null",
      "plugin": "unicorn"
    },
    "unicorn/no-object-as-default-parameter": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of objects as default parameters.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-object-as-default-parameter.md"
      },
      "name": "unicorn/no-object-as-default-parameter",
      "plugin": "unicorn"
    },
    "unicorn/no-process-exit": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `process.exit()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-process-exit.md"
      },
      "name": "unicorn/no-process-exit",
      "plugin": "unicorn"
    },
    "unicorn/no-single-promise-in-promise-methods": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow passing single-element arrays to `Promise` methods.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-single-promise-in-promise-methods.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/no-single-promise-in-promise-methods",
      "plugin": "unicorn"
    },
    "unicorn/no-static-only-class": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow classes that only have static members.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-static-only-class.md"
      },
      "fixable": "code",
      "name": "unicorn/no-static-only-class",
      "plugin": "unicorn"
    },
    "unicorn/no-thenable": {
      "type": "problem",
      "docs": {
        "description": "Disallow `then` property.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-thenable.md"
      },
      "name": "unicorn/no-thenable",
      "plugin": "unicorn"
    },
    "unicorn/no-this-assignment": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow assigning `this` to a variable.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-this-assignment.md"
      },
      "name": "unicorn/no-this-assignment",
      "plugin": "unicorn"
    },
    "unicorn/no-typeof-undefined": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow comparing `undefined` using `typeof`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-typeof-undefined.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "defaultOptions": [
        {
          "checkGlobalVariables": false
        }
      ],
      "name": "unicorn/no-typeof-undefined",
      "plugin": "unicorn"
    },
    "unicorn/no-unnecessary-array-flat-depth": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow using `1` as the `depth` argument of `Array#flat()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unnecessary-array-flat-depth.md"
      },
      "fixable": "code",
      "name": "unicorn/no-unnecessary-array-flat-depth",
      "plugin": "unicorn"
    },
    "unicorn/no-unnecessary-array-splice-count": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow using `.length` or `Infinity` as the `deleteCount` or `skipCount` argument of `Array#{splice,toSpliced}()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unnecessary-array-splice-count.md"
      },
      "fixable": "code",
      "name": "unicorn/no-unnecessary-array-splice-count",
      "plugin": "unicorn"
    },
    "unicorn/no-unnecessary-await": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow awaiting non-promise values.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unnecessary-await.md"
      },
      "fixable": "code",
      "name": "unicorn/no-unnecessary-await",
      "plugin": "unicorn"
    },
    "unicorn/no-unnecessary-polyfills": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of built-in methods instead of unnecessary polyfills.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unnecessary-polyfills.md"
      },
      "defaultOptions": [],
      "name": "unicorn/no-unnecessary-polyfills",
      "plugin": "unicorn"
    },
    "unicorn/no-unnecessary-slice-end": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow using `.length` or `Infinity` as the `end` argument of `{Array,String,TypedArray}#slice()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unnecessary-slice-end.md"
      },
      "fixable": "code",
      "name": "unicorn/no-unnecessary-slice-end",
      "plugin": "unicorn"
    },
    "unicorn/no-unreadable-array-destructuring": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unreadable array destructuring.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unreadable-array-destructuring.md"
      },
      "fixable": "code",
      "name": "unicorn/no-unreadable-array-destructuring",
      "plugin": "unicorn"
    },
    "unicorn/no-unreadable-iife": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unreadable IIFEs.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unreadable-iife.md"
      },
      "hasSuggestions": false,
      "name": "unicorn/no-unreadable-iife",
      "plugin": "unicorn"
    },
    "unicorn/no-unused-properties": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unused object properties.",
        "recommended": false,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unused-properties.md"
      },
      "name": "unicorn/no-unused-properties",
      "plugin": "unicorn"
    },
    "unicorn/no-useless-fallback-in-spread": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow useless fallback when spreading in object literals.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-useless-fallback-in-spread.md"
      },
      "fixable": "code",
      "name": "unicorn/no-useless-fallback-in-spread",
      "plugin": "unicorn"
    },
    "unicorn/no-useless-length-check": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow useless array length check.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-useless-length-check.md"
      },
      "fixable": "code",
      "name": "unicorn/no-useless-length-check",
      "plugin": "unicorn"
    },
    "unicorn/no-useless-promise-resolve-reject": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow returning/yielding `Promise.resolve/reject()` in async functions or promise callbacks",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-useless-promise-resolve-reject.md"
      },
      "fixable": "code",
      "name": "unicorn/no-useless-promise-resolve-reject",
      "plugin": "unicorn"
    },
    "unicorn/no-useless-spread": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary spread.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-useless-spread.md"
      },
      "fixable": "code",
      "name": "unicorn/no-useless-spread",
      "plugin": "unicorn"
    },
    "unicorn/no-useless-switch-case": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow useless case in switch statements.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-useless-switch-case.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/no-useless-switch-case",
      "plugin": "unicorn"
    },
    "unicorn/no-useless-undefined": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow useless `undefined`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-useless-undefined.md"
      },
      "fixable": "code",
      "defaultOptions": [
        {}
      ],
      "name": "unicorn/no-useless-undefined",
      "plugin": "unicorn"
    },
    "unicorn/no-zero-fractions": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow number literals with zero fractions or dangling dots.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-zero-fractions.md"
      },
      "fixable": "code",
      "name": "unicorn/no-zero-fractions",
      "plugin": "unicorn"
    },
    "unicorn/number-literal-case": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce proper case for numeric literals.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/number-literal-case.md"
      },
      "fixable": "code",
      "defaultOptions": [
        {
          "hexadecimalValue": "uppercase"
        }
      ],
      "name": "unicorn/number-literal-case",
      "plugin": "unicorn"
    },
    "unicorn/numeric-separators-style": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the style of numeric separators by correctly grouping digits.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/numeric-separators-style.md"
      },
      "fixable": "code",
      "defaultOptions": [
        {
          "onlyIfContainsSeparator": false,
          "binary": {
            "minimumDigits": 0,
            "groupLength": 4
          },
          "octal": {
            "minimumDigits": 0,
            "groupLength": 4
          },
          "hexadecimal": {
            "minimumDigits": 0,
            "groupLength": 2
          },
          "number": {
            "minimumDigits": 5,
            "groupLength": 3
          }
        }
      ],
      "name": "unicorn/numeric-separators-style",
      "plugin": "unicorn"
    },
    "unicorn/prefer-add-event-listener": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `.addEventListener()` and `.removeEventListener()` over `on`-functions.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-add-event-listener.md"
      },
      "fixable": "code",
      "defaultOptions": [
        {}
      ],
      "name": "unicorn/prefer-add-event-listener",
      "plugin": "unicorn"
    },
    "unicorn/prefer-array-find": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `.find(…)` and `.findLast(…)` over the first or last element from `.filter(…)`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-array-find.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "defaultOptions": [
        {
          "checkFromLast": true
        }
      ],
      "name": "unicorn/prefer-array-find",
      "plugin": "unicorn"
    },
    "unicorn/prefer-array-flat-map": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `.flatMap(…)` over `.map(…).flat()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-array-flat-map.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-array-flat-map",
      "plugin": "unicorn"
    },
    "unicorn/prefer-array-flat": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `Array#flat()` over legacy techniques to flatten arrays.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-array-flat.md"
      },
      "fixable": "code",
      "defaultOptions": [
        {}
      ],
      "name": "unicorn/prefer-array-flat",
      "plugin": "unicorn"
    },
    "unicorn/prefer-array-index-of": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `Array#{indexOf,lastIndexOf}()` over `Array#{findIndex,findLastIndex}()` when looking for the index of an item.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-array-index-of.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-array-index-of",
      "plugin": "unicorn"
    },
    "unicorn/prefer-array-some": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `.some(…)` over `.filter(…).length` check and `.{find,findLast,findIndex,findLastIndex}(…)`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-array-some.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-array-some",
      "plugin": "unicorn"
    },
    "unicorn/prefer-at": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `.at()` method for index access and `String#charAt()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-at.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "defaultOptions": [
        {
          "getLastElementFunctions": [],
          "checkAllIndexAccess": false
        }
      ],
      "name": "unicorn/prefer-at",
      "plugin": "unicorn"
    },
    "unicorn/prefer-blob-reading-methods": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `Blob#arrayBuffer()` over `FileReader#readAsArrayBuffer(…)` and `Blob#text()` over `FileReader#readAsText(…)`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-blob-reading-methods.md"
      },
      "name": "unicorn/prefer-blob-reading-methods",
      "plugin": "unicorn"
    },
    "unicorn/prefer-code-point": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `String#codePointAt(…)` over `String#charCodeAt(…)` and `String.fromCodePoint(…)` over `String.fromCharCode(…)`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-code-point.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/prefer-code-point",
      "plugin": "unicorn"
    },
    "unicorn/prefer-date-now": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `Date.now()` to get the number of milliseconds since the Unix Epoch.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-date-now.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-date-now",
      "plugin": "unicorn"
    },
    "unicorn/prefer-default-parameters": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer default parameters over reassignment.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-default-parameters.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-default-parameters",
      "plugin": "unicorn"
    },
    "unicorn/prefer-dom-node-append": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `Node#append()` over `Node#appendChild()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-dom-node-append.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-dom-node-append",
      "plugin": "unicorn"
    },
    "unicorn/prefer-dom-node-dataset": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer using `.dataset` on DOM elements over calling attribute methods.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-dom-node-dataset.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-dom-node-dataset",
      "plugin": "unicorn"
    },
    "unicorn/prefer-dom-node-remove": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-dom-node-remove.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-dom-node-remove",
      "plugin": "unicorn"
    },
    "unicorn/prefer-dom-node-text-content": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `.textContent` over `.innerText`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-dom-node-text-content.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/prefer-dom-node-text-content",
      "plugin": "unicorn"
    },
    "unicorn/prefer-event-target": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `EventTarget` over `EventEmitter`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-event-target.md"
      },
      "name": "unicorn/prefer-event-target",
      "plugin": "unicorn"
    },
    "unicorn/prefer-export-from": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `export…from` when re-exporting.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-export-from.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "defaultOptions": [
        {
          "ignoreUsedVariables": false
        }
      ],
      "name": "unicorn/prefer-export-from",
      "plugin": "unicorn"
    },
    "unicorn/prefer-global-this": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `globalThis` over `window`, `self`, and `global`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-global-this.md"
      },
      "fixable": "code",
      "hasSuggestions": false,
      "name": "unicorn/prefer-global-this",
      "plugin": "unicorn"
    },
    "unicorn/prefer-import-meta-properties": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `import.meta.{dirname,filename}` over legacy techniques for getting file paths.",
        "recommended": false,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-import-meta-properties.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-import-meta-properties",
      "plugin": "unicorn"
    },
    "unicorn/prefer-includes": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `.includes()` over `.indexOf()`, `.lastIndexOf()`, and `Array#some()` when checking for existence or non-existence.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-includes.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-includes",
      "plugin": "unicorn"
    },
    "unicorn/prefer-json-parse-buffer": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer reading a JSON file as a buffer.",
        "recommended": false,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-json-parse-buffer.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-json-parse-buffer",
      "plugin": "unicorn"
    },
    "unicorn/prefer-keyboard-event-key": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `KeyboardEvent#key` over `KeyboardEvent#keyCode`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-keyboard-event-key.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-keyboard-event-key",
      "plugin": "unicorn"
    },
    "unicorn/prefer-logical-operator-over-ternary": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer using a logical operator over a ternary.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-logical-operator-over-ternary.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/prefer-logical-operator-over-ternary",
      "plugin": "unicorn"
    },
    "unicorn/prefer-math-min-max": {
      "type": "problem",
      "docs": {
        "description": "Prefer `Math.min()` and `Math.max()` over ternaries for simple comparisons.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-math-min-max.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-math-min-max",
      "plugin": "unicorn"
    },
    "unicorn/prefer-math-trunc": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of `Math.trunc` instead of bitwise operators.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-math-trunc.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-math-trunc",
      "plugin": "unicorn"
    },
    "unicorn/prefer-modern-dom-apis": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `.before()` over `.insertBefore()`, `.replaceWith()` over `.replaceChild()`, prefer one of `.before()`, `.after()`, `.append()` or `.prepend()` over `insertAdjacentText()` and `insertAdjacentElement()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-modern-dom-apis.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-modern-dom-apis",
      "plugin": "unicorn"
    },
    "unicorn/prefer-modern-math-apis": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer modern `Math` APIs over legacy patterns.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-modern-math-apis.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-modern-math-apis",
      "plugin": "unicorn"
    },
    "unicorn/prefer-module": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer JavaScript modules (ESM) over CommonJS.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-module.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-module",
      "plugin": "unicorn"
    },
    "unicorn/prefer-native-coercion-functions": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer using `String`, `Number`, `BigInt`, `Boolean`, and `Symbol` directly.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-native-coercion-functions.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-native-coercion-functions",
      "plugin": "unicorn"
    },
    "unicorn/prefer-negative-index": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer negative index over `.length - index` when possible.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-negative-index.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-negative-index",
      "plugin": "unicorn"
    },
    "unicorn/prefer-node-protocol": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer using the `node:` protocol when importing Node.js builtin modules.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-node-protocol.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-node-protocol",
      "plugin": "unicorn"
    },
    "unicorn/prefer-number-properties": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `Number` static properties over global ones.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-number-properties.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "defaultOptions": [
        {
          "checkInfinity": false,
          "checkNaN": true
        }
      ],
      "name": "unicorn/prefer-number-properties",
      "plugin": "unicorn"
    },
    "unicorn/prefer-object-from-entries": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer using `Object.fromEntries(…)` to transform a list of key-value pairs into an object.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-object-from-entries.md"
      },
      "fixable": "code",
      "defaultOptions": [
        {}
      ],
      "name": "unicorn/prefer-object-from-entries",
      "plugin": "unicorn"
    },
    "unicorn/prefer-optional-catch-binding": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer omitting the `catch` binding parameter.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-optional-catch-binding.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-optional-catch-binding",
      "plugin": "unicorn"
    },
    "unicorn/prefer-prototype-methods": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer borrowing methods from the prototype instead of the instance.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-prototype-methods.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-prototype-methods",
      "plugin": "unicorn"
    },
    "unicorn/prefer-query-selector": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `.querySelector()` over `.getElementById()`, `.querySelectorAll()` over `.getElementsByClassName()` and `.getElementsByTagName()` and `.getElementsByName()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-query-selector.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-query-selector",
      "plugin": "unicorn"
    },
    "unicorn/prefer-reflect-apply": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `Reflect.apply()` over `Function#apply()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-reflect-apply.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-reflect-apply",
      "plugin": "unicorn"
    },
    "unicorn/prefer-regexp-test": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `RegExp#test()` over `String#match()` and `RegExp#exec()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-regexp-test.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-regexp-test",
      "plugin": "unicorn"
    },
    "unicorn/prefer-set-has": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `Set#has()` over `Array#includes()` when checking for existence or non-existence.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-set-has.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-set-has",
      "plugin": "unicorn"
    },
    "unicorn/prefer-set-size": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer using `Set#size` instead of `Array#length`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-set-size.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-set-size",
      "plugin": "unicorn"
    },
    "unicorn/prefer-single-call": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce combining multiple `Array#push()`, `Element#classList.{add,remove}()`, and `importScripts()` into one call.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-single-call.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "defaultOptions": [
        {}
      ],
      "name": "unicorn/prefer-single-call",
      "plugin": "unicorn"
    },
    "unicorn/prefer-spread": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer the spread operator over `Array.from(…)`, `Array#concat(…)`, `Array#{slice,toSpliced}()` and `String#split('')`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-spread.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-spread",
      "plugin": "unicorn"
    },
    "unicorn/prefer-string-raw": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer using the `String.raw` tag to avoid escaping `\\`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-string-raw.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-string-raw",
      "plugin": "unicorn"
    },
    "unicorn/prefer-string-replace-all": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `String#replaceAll()` over regex searches with the global flag.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-string-replace-all.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-string-replace-all",
      "plugin": "unicorn"
    },
    "unicorn/prefer-string-slice": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `String#slice()` over `String#substr()` and `String#substring()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-string-slice.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-string-slice",
      "plugin": "unicorn"
    },
    "unicorn/prefer-string-starts-ends-with": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `String#startsWith()` & `String#endsWith()` over `RegExp#test()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-string-starts-ends-with.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/prefer-string-starts-ends-with",
      "plugin": "unicorn"
    },
    "unicorn/prefer-string-trim-start-end": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `String#trimStart()` / `String#trimEnd()` over `String#trimLeft()` / `String#trimRight()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-string-trim-start-end.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-string-trim-start-end",
      "plugin": "unicorn"
    },
    "unicorn/prefer-structured-clone": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer using `structuredClone` to create a deep clone.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-structured-clone.md"
      },
      "hasSuggestions": true,
      "defaultOptions": [
        {}
      ],
      "name": "unicorn/prefer-structured-clone",
      "plugin": "unicorn"
    },
    "unicorn/prefer-switch": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `switch` over multiple `else-if`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-switch.md"
      },
      "fixable": "code",
      "defaultOptions": [
        {
          "minimumCases": 3,
          "emptyDefaultCase": "no-default-comment"
        }
      ],
      "name": "unicorn/prefer-switch",
      "plugin": "unicorn"
    },
    "unicorn/prefer-ternary": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer ternary expressions over simple `if-else` statements.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-ternary.md"
      },
      "fixable": "code",
      "defaultOptions": [
        "always"
      ],
      "name": "unicorn/prefer-ternary",
      "plugin": "unicorn"
    },
    "unicorn/prefer-top-level-await": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer top-level await over top-level promises and async function calls.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-top-level-await.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/prefer-top-level-await",
      "plugin": "unicorn"
    },
    "unicorn/prefer-type-error": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce throwing `TypeError` in type checking conditions.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-type-error.md"
      },
      "fixable": "code",
      "name": "unicorn/prefer-type-error",
      "plugin": "unicorn"
    },
    "unicorn/prevent-abbreviations": {
      "type": "suggestion",
      "docs": {
        "description": "Prevent abbreviations.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prevent-abbreviations.md"
      },
      "fixable": "code",
      "defaultOptions": [
        {}
      ],
      "name": "unicorn/prevent-abbreviations",
      "plugin": "unicorn"
    },
    "unicorn/relative-url-style": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent relative URL style.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/relative-url-style.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "defaultOptions": [
        "never"
      ],
      "name": "unicorn/relative-url-style",
      "plugin": "unicorn"
    },
    "unicorn/require-array-join-separator": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using the separator argument with `Array#join()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/require-array-join-separator.md"
      },
      "fixable": "code",
      "name": "unicorn/require-array-join-separator",
      "plugin": "unicorn"
    },
    "unicorn/require-number-to-fixed-digits-argument": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using the digits argument with `Number#toFixed()`.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/require-number-to-fixed-digits-argument.md"
      },
      "fixable": "code",
      "name": "unicorn/require-number-to-fixed-digits-argument",
      "plugin": "unicorn"
    },
    "unicorn/require-post-message-target-origin": {
      "type": "problem",
      "docs": {
        "description": "Enforce using the `targetOrigin` argument with `window.postMessage()`.",
        "recommended": false,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/require-post-message-target-origin.md"
      },
      "hasSuggestions": true,
      "name": "unicorn/require-post-message-target-origin",
      "plugin": "unicorn"
    },
    "unicorn/string-content": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce better string content.",
        "recommended": false,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/string-content.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "defaultOptions": [
        {}
      ],
      "name": "unicorn/string-content",
      "plugin": "unicorn"
    },
    "unicorn/switch-case-braces": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent brace style for `case` clauses.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/switch-case-braces.md"
      },
      "fixable": "code",
      "defaultOptions": [
        "always"
      ],
      "name": "unicorn/switch-case-braces",
      "plugin": "unicorn"
    },
    "unicorn/template-indent": {
      "type": "suggestion",
      "docs": {
        "description": "Fix whitespace-insensitive template indentation.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/template-indent.md"
      },
      "fixable": "code",
      "defaultOptions": [
        {}
      ],
      "name": "unicorn/template-indent",
      "plugin": "unicorn"
    },
    "unicorn/text-encoding-identifier-case": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent case for text encoding identifiers.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/text-encoding-identifier-case.md"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "unicorn/text-encoding-identifier-case",
      "plugin": "unicorn"
    },
    "unicorn/throw-new-error": {
      "type": "suggestion",
      "docs": {
        "description": "Require `new` when creating an error.",
        "recommended": true,
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/throw-new-error.md"
      },
      "fixable": "code",
      "name": "unicorn/throw-new-error",
      "plugin": "unicorn"
    },
    "unicorn/no-instanceof-array": {
      "docs": {
        "description": "Replaced by `unicorn/no-instanceof-builtins` which covers more cases.",
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/deprecated-rules.md#no-instanceof-array"
      },
      "deprecated": {
        "message": "Replaced by `unicorn/no-instanceof-builtins` which covers more cases.",
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/deprecated-rules.md#no-instanceof-array",
        "replacedBy": [
          "unicorn/no-instanceof-builtins"
        ]
      },
      "name": "unicorn/no-instanceof-array",
      "plugin": "unicorn"
    },
    "unicorn/no-length-as-slice-end": {
      "docs": {
        "description": "Replaced by `unicorn/no-unnecessary-slice-end` which covers more cases.",
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/deprecated-rules.md#no-length-as-slice-end"
      },
      "deprecated": {
        "message": "Replaced by `unicorn/no-unnecessary-slice-end` which covers more cases.",
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/deprecated-rules.md#no-length-as-slice-end",
        "replacedBy": [
          "unicorn/no-unnecessary-slice-end"
        ]
      },
      "name": "unicorn/no-length-as-slice-end",
      "plugin": "unicorn"
    },
    "unicorn/no-array-push-push": {
      "docs": {
        "description": "Replaced by `unicorn/prefer-single-call` which covers more cases.",
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/deprecated-rules.md#no-array-push-push"
      },
      "deprecated": {
        "message": "Replaced by `unicorn/prefer-single-call` which covers more cases.",
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/deprecated-rules.md#no-array-push-push",
        "replacedBy": [
          "unicorn/prefer-single-call"
        ]
      },
      "name": "unicorn/no-array-push-push",
      "plugin": "unicorn"
    },
    "regexp/confusing-quantifier": {
      "docs": {
        "description": "disallow confusing quantifiers",
        "category": "Best Practices",
        "recommended": true,
        "default": "warn",
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/confusing-quantifier.html",
        "ruleId": "regexp/confusing-quantifier",
        "ruleName": "confusing-quantifier"
      },
      "type": "problem",
      "name": "regexp/confusing-quantifier",
      "plugin": "regexp"
    },
    "regexp/control-character-escape": {
      "docs": {
        "description": "enforce consistent escaping of control characters",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/control-character-escape.html",
        "ruleId": "regexp/control-character-escape",
        "ruleName": "control-character-escape"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/control-character-escape",
      "plugin": "regexp"
    },
    "regexp/grapheme-string-literal": {
      "docs": {
        "description": "enforce single grapheme in string literal",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/grapheme-string-literal.html",
        "ruleId": "regexp/grapheme-string-literal",
        "ruleName": "grapheme-string-literal"
      },
      "type": "suggestion",
      "name": "regexp/grapheme-string-literal",
      "plugin": "regexp"
    },
    "regexp/hexadecimal-escape": {
      "docs": {
        "description": "enforce consistent usage of hexadecimal escape",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/hexadecimal-escape.html",
        "ruleId": "regexp/hexadecimal-escape",
        "ruleName": "hexadecimal-escape"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/hexadecimal-escape",
      "plugin": "regexp"
    },
    "regexp/letter-case": {
      "docs": {
        "description": "enforce into your favorite case",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/letter-case.html",
        "ruleId": "regexp/letter-case",
        "ruleName": "letter-case"
      },
      "fixable": "code",
      "type": "layout",
      "name": "regexp/letter-case",
      "plugin": "regexp"
    },
    "regexp/match-any": {
      "docs": {
        "description": "enforce match any character style",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/match-any.html",
        "ruleId": "regexp/match-any",
        "ruleName": "match-any"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/match-any",
      "plugin": "regexp"
    },
    "regexp/negation": {
      "docs": {
        "description": "enforce use of escapes on negation",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/negation.html",
        "ruleId": "regexp/negation",
        "ruleName": "negation"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/negation",
      "plugin": "regexp"
    },
    "regexp/no-contradiction-with-assertion": {
      "docs": {
        "description": "disallow elements that contradict assertions",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-contradiction-with-assertion.html",
        "ruleId": "regexp/no-contradiction-with-assertion",
        "ruleName": "no-contradiction-with-assertion"
      },
      "hasSuggestions": true,
      "type": "problem",
      "name": "regexp/no-contradiction-with-assertion",
      "plugin": "regexp"
    },
    "regexp/no-control-character": {
      "docs": {
        "description": "disallow control characters",
        "category": "Possible Errors",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-control-character.html",
        "ruleId": "regexp/no-control-character",
        "ruleName": "no-control-character"
      },
      "type": "suggestion",
      "hasSuggestions": true,
      "name": "regexp/no-control-character",
      "plugin": "regexp"
    },
    "regexp/no-dupe-characters-character-class": {
      "type": "suggestion",
      "docs": {
        "description": "disallow duplicate characters in the RegExp character class",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-dupe-characters-character-class.html",
        "ruleId": "regexp/no-dupe-characters-character-class",
        "ruleName": "no-dupe-characters-character-class"
      },
      "fixable": "code",
      "name": "regexp/no-dupe-characters-character-class",
      "plugin": "regexp"
    },
    "regexp/no-dupe-disjunctions": {
      "docs": {
        "description": "disallow duplicate disjunctions",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-dupe-disjunctions.html",
        "ruleId": "regexp/no-dupe-disjunctions",
        "ruleName": "no-dupe-disjunctions"
      },
      "hasSuggestions": true,
      "type": "suggestion",
      "name": "regexp/no-dupe-disjunctions",
      "plugin": "regexp"
    },
    "regexp/no-empty-alternative": {
      "docs": {
        "description": "disallow alternatives without elements",
        "category": "Possible Errors",
        "recommended": true,
        "default": "warn",
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-alternative.html",
        "ruleId": "regexp/no-empty-alternative",
        "ruleName": "no-empty-alternative"
      },
      "hasSuggestions": true,
      "type": "problem",
      "name": "regexp/no-empty-alternative",
      "plugin": "regexp"
    },
    "regexp/no-empty-capturing-group": {
      "docs": {
        "description": "disallow capturing group that captures empty.",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-capturing-group.html",
        "ruleId": "regexp/no-empty-capturing-group",
        "ruleName": "no-empty-capturing-group"
      },
      "type": "suggestion",
      "name": "regexp/no-empty-capturing-group",
      "plugin": "regexp"
    },
    "regexp/no-empty-character-class": {
      "docs": {
        "description": "disallow character classes that match no characters",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-character-class.html",
        "ruleId": "regexp/no-empty-character-class",
        "ruleName": "no-empty-character-class"
      },
      "type": "suggestion",
      "name": "regexp/no-empty-character-class",
      "plugin": "regexp"
    },
    "regexp/no-empty-group": {
      "docs": {
        "description": "disallow empty group",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-group.html",
        "ruleId": "regexp/no-empty-group",
        "ruleName": "no-empty-group"
      },
      "type": "suggestion",
      "name": "regexp/no-empty-group",
      "plugin": "regexp"
    },
    "regexp/no-empty-lookarounds-assertion": {
      "docs": {
        "description": "disallow empty lookahead assertion or empty lookbehind assertion",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-lookarounds-assertion.html",
        "ruleId": "regexp/no-empty-lookarounds-assertion",
        "ruleName": "no-empty-lookarounds-assertion"
      },
      "type": "suggestion",
      "name": "regexp/no-empty-lookarounds-assertion",
      "plugin": "regexp"
    },
    "regexp/no-empty-string-literal": {
      "docs": {
        "description": "disallow empty string literals in character classes",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-string-literal.html",
        "ruleId": "regexp/no-empty-string-literal",
        "ruleName": "no-empty-string-literal"
      },
      "type": "suggestion",
      "name": "regexp/no-empty-string-literal",
      "plugin": "regexp"
    },
    "regexp/no-escape-backspace": {
      "docs": {
        "description": "disallow escape backspace (`[\\b]`)",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-escape-backspace.html",
        "ruleId": "regexp/no-escape-backspace",
        "ruleName": "no-escape-backspace"
      },
      "hasSuggestions": true,
      "type": "suggestion",
      "name": "regexp/no-escape-backspace",
      "plugin": "regexp"
    },
    "regexp/no-extra-lookaround-assertions": {
      "docs": {
        "description": "disallow unnecessary nested lookaround assertions",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-extra-lookaround-assertions.html",
        "ruleId": "regexp/no-extra-lookaround-assertions",
        "ruleName": "no-extra-lookaround-assertions"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-extra-lookaround-assertions",
      "plugin": "regexp"
    },
    "regexp/no-invalid-regexp": {
      "docs": {
        "description": "disallow invalid regular expression strings in `RegExp` constructors",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-invalid-regexp.html",
        "ruleId": "regexp/no-invalid-regexp",
        "ruleName": "no-invalid-regexp"
      },
      "type": "problem",
      "name": "regexp/no-invalid-regexp",
      "plugin": "regexp"
    },
    "regexp/no-invisible-character": {
      "docs": {
        "description": "disallow invisible raw character",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-invisible-character.html",
        "ruleId": "regexp/no-invisible-character",
        "ruleName": "no-invisible-character"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-invisible-character",
      "plugin": "regexp"
    },
    "regexp/no-lazy-ends": {
      "docs": {
        "description": "disallow lazy quantifiers at the end of an expression",
        "category": "Possible Errors",
        "recommended": true,
        "default": "warn",
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-lazy-ends.html",
        "ruleId": "regexp/no-lazy-ends",
        "ruleName": "no-lazy-ends"
      },
      "hasSuggestions": true,
      "type": "problem",
      "name": "regexp/no-lazy-ends",
      "plugin": "regexp"
    },
    "regexp/no-legacy-features": {
      "docs": {
        "description": "disallow legacy RegExp features",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-legacy-features.html",
        "ruleId": "regexp/no-legacy-features",
        "ruleName": "no-legacy-features"
      },
      "type": "suggestion",
      "name": "regexp/no-legacy-features",
      "plugin": "regexp"
    },
    "regexp/no-misleading-capturing-group": {
      "docs": {
        "description": "disallow capturing groups that do not behave as one would expect",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-misleading-capturing-group.html",
        "ruleId": "regexp/no-misleading-capturing-group",
        "ruleName": "no-misleading-capturing-group"
      },
      "hasSuggestions": true,
      "type": "problem",
      "name": "regexp/no-misleading-capturing-group",
      "plugin": "regexp"
    },
    "regexp/no-misleading-unicode-character": {
      "docs": {
        "description": "disallow multi-code-point characters in character classes and quantifiers",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-misleading-unicode-character.html",
        "ruleId": "regexp/no-misleading-unicode-character",
        "ruleName": "no-misleading-unicode-character"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "type": "problem",
      "name": "regexp/no-misleading-unicode-character",
      "plugin": "regexp"
    },
    "regexp/no-missing-g-flag": {
      "docs": {
        "description": "disallow missing `g` flag in patterns used in `String#matchAll` and `String#replaceAll`",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-missing-g-flag.html",
        "ruleId": "regexp/no-missing-g-flag",
        "ruleName": "no-missing-g-flag"
      },
      "fixable": "code",
      "type": "problem",
      "name": "regexp/no-missing-g-flag",
      "plugin": "regexp"
    },
    "regexp/no-non-standard-flag": {
      "docs": {
        "description": "disallow non-standard flags",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-non-standard-flag.html",
        "ruleId": "regexp/no-non-standard-flag",
        "ruleName": "no-non-standard-flag"
      },
      "type": "suggestion",
      "name": "regexp/no-non-standard-flag",
      "plugin": "regexp"
    },
    "regexp/no-obscure-range": {
      "docs": {
        "description": "disallow obscure character ranges",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-obscure-range.html",
        "ruleId": "regexp/no-obscure-range",
        "ruleName": "no-obscure-range"
      },
      "type": "suggestion",
      "name": "regexp/no-obscure-range",
      "plugin": "regexp"
    },
    "regexp/no-octal": {
      "docs": {
        "description": "disallow octal escape sequence",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-octal.html",
        "ruleId": "regexp/no-octal",
        "ruleName": "no-octal"
      },
      "type": "suggestion",
      "hasSuggestions": true,
      "name": "regexp/no-octal",
      "plugin": "regexp"
    },
    "regexp/no-optional-assertion": {
      "docs": {
        "description": "disallow optional assertions",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-optional-assertion.html",
        "ruleId": "regexp/no-optional-assertion",
        "ruleName": "no-optional-assertion"
      },
      "type": "problem",
      "name": "regexp/no-optional-assertion",
      "plugin": "regexp"
    },
    "regexp/no-potentially-useless-backreference": {
      "docs": {
        "description": "disallow backreferences that reference a group that might not be matched",
        "category": "Possible Errors",
        "recommended": true,
        "default": "warn",
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-potentially-useless-backreference.html",
        "ruleId": "regexp/no-potentially-useless-backreference",
        "ruleName": "no-potentially-useless-backreference"
      },
      "type": "problem",
      "name": "regexp/no-potentially-useless-backreference",
      "plugin": "regexp"
    },
    "regexp/no-standalone-backslash": {
      "docs": {
        "description": "disallow standalone backslashes (`\\`)",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-standalone-backslash.html",
        "ruleId": "regexp/no-standalone-backslash",
        "ruleName": "no-standalone-backslash"
      },
      "type": "suggestion",
      "name": "regexp/no-standalone-backslash",
      "plugin": "regexp"
    },
    "regexp/no-super-linear-backtracking": {
      "docs": {
        "description": "disallow exponential and polynomial backtracking",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-super-linear-backtracking.html",
        "ruleId": "regexp/no-super-linear-backtracking",
        "ruleName": "no-super-linear-backtracking"
      },
      "fixable": "code",
      "type": "problem",
      "name": "regexp/no-super-linear-backtracking",
      "plugin": "regexp"
    },
    "regexp/no-super-linear-move": {
      "docs": {
        "description": "disallow quantifiers that cause quadratic moves",
        "category": "Possible Errors",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-super-linear-move.html",
        "ruleId": "regexp/no-super-linear-move",
        "ruleName": "no-super-linear-move"
      },
      "type": "problem",
      "name": "regexp/no-super-linear-move",
      "plugin": "regexp"
    },
    "regexp/no-trivially-nested-assertion": {
      "docs": {
        "description": "disallow trivially nested assertions",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-trivially-nested-assertion.html",
        "ruleId": "regexp/no-trivially-nested-assertion",
        "ruleName": "no-trivially-nested-assertion"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-trivially-nested-assertion",
      "plugin": "regexp"
    },
    "regexp/no-trivially-nested-quantifier": {
      "docs": {
        "description": "disallow nested quantifiers that can be rewritten as one quantifier",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-trivially-nested-quantifier.html",
        "ruleId": "regexp/no-trivially-nested-quantifier",
        "ruleName": "no-trivially-nested-quantifier"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-trivially-nested-quantifier",
      "plugin": "regexp"
    },
    "regexp/no-unused-capturing-group": {
      "docs": {
        "description": "disallow unused capturing group",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-unused-capturing-group.html",
        "ruleId": "regexp/no-unused-capturing-group",
        "ruleName": "no-unused-capturing-group"
      },
      "fixable": "code",
      "type": "suggestion",
      "hasSuggestions": true,
      "name": "regexp/no-unused-capturing-group",
      "plugin": "regexp"
    },
    "regexp/no-useless-assertions": {
      "docs": {
        "description": "disallow assertions that are known to always accept (or reject)",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-assertions.html",
        "ruleId": "regexp/no-useless-assertions",
        "ruleName": "no-useless-assertions"
      },
      "hasSuggestions": true,
      "type": "problem",
      "name": "regexp/no-useless-assertions",
      "plugin": "regexp"
    },
    "regexp/no-useless-backreference": {
      "docs": {
        "description": "disallow useless backreferences in regular expressions",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-backreference.html",
        "ruleId": "regexp/no-useless-backreference",
        "ruleName": "no-useless-backreference"
      },
      "type": "suggestion",
      "name": "regexp/no-useless-backreference",
      "plugin": "regexp"
    },
    "regexp/no-useless-character-class": {
      "docs": {
        "description": "disallow character class with one character",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-character-class.html",
        "ruleId": "regexp/no-useless-character-class",
        "ruleName": "no-useless-character-class"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-useless-character-class",
      "plugin": "regexp"
    },
    "regexp/no-useless-dollar-replacements": {
      "docs": {
        "description": "disallow useless `$` replacements in replacement string",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-dollar-replacements.html",
        "ruleId": "regexp/no-useless-dollar-replacements",
        "ruleName": "no-useless-dollar-replacements"
      },
      "type": "suggestion",
      "name": "regexp/no-useless-dollar-replacements",
      "plugin": "regexp"
    },
    "regexp/no-useless-escape": {
      "docs": {
        "description": "disallow unnecessary escape characters in RegExp",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-escape.html",
        "ruleId": "regexp/no-useless-escape",
        "ruleName": "no-useless-escape"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-useless-escape",
      "plugin": "regexp"
    },
    "regexp/no-useless-flag": {
      "docs": {
        "description": "disallow unnecessary regex flags",
        "category": "Best Practices",
        "recommended": true,
        "default": "warn",
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-flag.html",
        "ruleId": "regexp/no-useless-flag",
        "ruleName": "no-useless-flag"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-useless-flag",
      "plugin": "regexp"
    },
    "regexp/no-useless-lazy": {
      "docs": {
        "description": "disallow unnecessarily non-greedy quantifiers",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-lazy.html",
        "ruleId": "regexp/no-useless-lazy",
        "ruleName": "no-useless-lazy"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-useless-lazy",
      "plugin": "regexp"
    },
    "regexp/no-useless-non-capturing-group": {
      "docs": {
        "description": "disallow unnecessary non-capturing group",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-non-capturing-group.html",
        "ruleId": "regexp/no-useless-non-capturing-group",
        "ruleName": "no-useless-non-capturing-group"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-useless-non-capturing-group",
      "plugin": "regexp"
    },
    "regexp/no-useless-quantifier": {
      "docs": {
        "description": "disallow quantifiers that can be removed",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-quantifier.html",
        "ruleId": "regexp/no-useless-quantifier",
        "ruleName": "no-useless-quantifier"
      },
      "fixable": "code",
      "type": "suggestion",
      "hasSuggestions": true,
      "name": "regexp/no-useless-quantifier",
      "plugin": "regexp"
    },
    "regexp/no-useless-range": {
      "docs": {
        "description": "disallow unnecessary character ranges",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-range.html",
        "ruleId": "regexp/no-useless-range",
        "ruleName": "no-useless-range"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-useless-range",
      "plugin": "regexp"
    },
    "regexp/no-useless-set-operand": {
      "docs": {
        "description": "disallow unnecessary elements in expression character classes",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-set-operand.html",
        "ruleId": "regexp/no-useless-set-operand",
        "ruleName": "no-useless-set-operand"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-useless-set-operand",
      "plugin": "regexp"
    },
    "regexp/no-useless-string-literal": {
      "docs": {
        "description": "disallow string disjunction of single characters in `\\q{...}`",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-string-literal.html",
        "ruleId": "regexp/no-useless-string-literal",
        "ruleName": "no-useless-string-literal"
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "regexp/no-useless-string-literal",
      "plugin": "regexp"
    },
    "regexp/no-useless-two-nums-quantifier": {
      "docs": {
        "description": "disallow unnecessary `{n,m}` quantifier",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-two-nums-quantifier.html",
        "ruleId": "regexp/no-useless-two-nums-quantifier",
        "ruleName": "no-useless-two-nums-quantifier"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-useless-two-nums-quantifier",
      "plugin": "regexp"
    },
    "regexp/no-zero-quantifier": {
      "docs": {
        "description": "disallow quantifiers with a maximum of zero",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-zero-quantifier.html",
        "ruleId": "regexp/no-zero-quantifier",
        "ruleName": "no-zero-quantifier"
      },
      "type": "suggestion",
      "hasSuggestions": true,
      "name": "regexp/no-zero-quantifier",
      "plugin": "regexp"
    },
    "regexp/optimal-lookaround-quantifier": {
      "docs": {
        "description": "disallow the alternatives of lookarounds that end with a non-constant quantifier",
        "category": "Best Practices",
        "recommended": true,
        "default": "warn",
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/optimal-lookaround-quantifier.html",
        "ruleId": "regexp/optimal-lookaround-quantifier",
        "ruleName": "optimal-lookaround-quantifier"
      },
      "hasSuggestions": true,
      "type": "problem",
      "name": "regexp/optimal-lookaround-quantifier",
      "plugin": "regexp"
    },
    "regexp/optimal-quantifier-concatenation": {
      "docs": {
        "description": "require optimal quantifiers for concatenated quantifiers",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/optimal-quantifier-concatenation.html",
        "ruleId": "regexp/optimal-quantifier-concatenation",
        "ruleName": "optimal-quantifier-concatenation"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/optimal-quantifier-concatenation",
      "plugin": "regexp"
    },
    "regexp/prefer-character-class": {
      "docs": {
        "description": "enforce using character class",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-character-class.html",
        "ruleId": "regexp/prefer-character-class",
        "ruleName": "prefer-character-class"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-character-class",
      "plugin": "regexp"
    },
    "regexp/prefer-d": {
      "docs": {
        "description": "enforce using `\\d`",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-d.html",
        "ruleId": "regexp/prefer-d",
        "ruleName": "prefer-d"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-d",
      "plugin": "regexp"
    },
    "regexp/prefer-escape-replacement-dollar-char": {
      "docs": {
        "description": "enforces escape of replacement `$` character (`$$`).",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-escape-replacement-dollar-char.html",
        "ruleId": "regexp/prefer-escape-replacement-dollar-char",
        "ruleName": "prefer-escape-replacement-dollar-char"
      },
      "type": "suggestion",
      "name": "regexp/prefer-escape-replacement-dollar-char",
      "plugin": "regexp"
    },
    "regexp/prefer-lookaround": {
      "docs": {
        "description": "prefer lookarounds over capturing group that do not replace",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-lookaround.html",
        "ruleId": "regexp/prefer-lookaround",
        "ruleName": "prefer-lookaround"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-lookaround",
      "plugin": "regexp"
    },
    "regexp/prefer-named-backreference": {
      "docs": {
        "description": "enforce using named backreferences",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-named-backreference.html",
        "ruleId": "regexp/prefer-named-backreference",
        "ruleName": "prefer-named-backreference"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-named-backreference",
      "plugin": "regexp"
    },
    "regexp/prefer-named-capture-group": {
      "docs": {
        "description": "enforce using named capture groups",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-named-capture-group.html",
        "ruleId": "regexp/prefer-named-capture-group",
        "ruleName": "prefer-named-capture-group"
      },
      "type": "suggestion",
      "name": "regexp/prefer-named-capture-group",
      "plugin": "regexp"
    },
    "regexp/prefer-named-replacement": {
      "docs": {
        "description": "enforce using named replacement",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-named-replacement.html",
        "ruleId": "regexp/prefer-named-replacement",
        "ruleName": "prefer-named-replacement"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-named-replacement",
      "plugin": "regexp"
    },
    "regexp/prefer-plus-quantifier": {
      "docs": {
        "description": "enforce using `+` quantifier",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-plus-quantifier.html",
        "ruleId": "regexp/prefer-plus-quantifier",
        "ruleName": "prefer-plus-quantifier"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-plus-quantifier",
      "plugin": "regexp"
    },
    "regexp/prefer-predefined-assertion": {
      "docs": {
        "description": "prefer predefined assertion over equivalent lookarounds",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-predefined-assertion.html",
        "ruleId": "regexp/prefer-predefined-assertion",
        "ruleName": "prefer-predefined-assertion"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-predefined-assertion",
      "plugin": "regexp"
    },
    "regexp/prefer-quantifier": {
      "docs": {
        "description": "enforce using quantifier",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-quantifier.html",
        "ruleId": "regexp/prefer-quantifier",
        "ruleName": "prefer-quantifier"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-quantifier",
      "plugin": "regexp"
    },
    "regexp/prefer-question-quantifier": {
      "docs": {
        "description": "enforce using `?` quantifier",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-question-quantifier.html",
        "ruleId": "regexp/prefer-question-quantifier",
        "ruleName": "prefer-question-quantifier"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-question-quantifier",
      "plugin": "regexp"
    },
    "regexp/prefer-range": {
      "docs": {
        "description": "enforce using character class range",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-range.html",
        "ruleId": "regexp/prefer-range",
        "ruleName": "prefer-range"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-range",
      "plugin": "regexp"
    },
    "regexp/prefer-regexp-exec": {
      "docs": {
        "description": "enforce that `RegExp#exec` is used instead of `String#match` if no global flag is provided",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-regexp-exec.html",
        "ruleId": "regexp/prefer-regexp-exec",
        "ruleName": "prefer-regexp-exec"
      },
      "type": "suggestion",
      "name": "regexp/prefer-regexp-exec",
      "plugin": "regexp"
    },
    "regexp/prefer-regexp-test": {
      "docs": {
        "description": "enforce that `RegExp#test` is used instead of `String#match` and `RegExp#exec`",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-regexp-test.html",
        "ruleId": "regexp/prefer-regexp-test",
        "ruleName": "prefer-regexp-test"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-regexp-test",
      "plugin": "regexp"
    },
    "regexp/prefer-result-array-groups": {
      "docs": {
        "description": "enforce using result array `groups`",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-result-array-groups.html",
        "ruleId": "regexp/prefer-result-array-groups",
        "ruleName": "prefer-result-array-groups"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-result-array-groups",
      "plugin": "regexp"
    },
    "regexp/prefer-set-operation": {
      "docs": {
        "description": "prefer character class set operations instead of lookarounds",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-set-operation.html",
        "ruleId": "regexp/prefer-set-operation",
        "ruleName": "prefer-set-operation"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-set-operation",
      "plugin": "regexp"
    },
    "regexp/prefer-star-quantifier": {
      "docs": {
        "description": "enforce using `*` quantifier",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-star-quantifier.html",
        "ruleId": "regexp/prefer-star-quantifier",
        "ruleName": "prefer-star-quantifier"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-star-quantifier",
      "plugin": "regexp"
    },
    "regexp/prefer-unicode-codepoint-escapes": {
      "docs": {
        "description": "enforce use of unicode codepoint escapes",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-unicode-codepoint-escapes.html",
        "ruleId": "regexp/prefer-unicode-codepoint-escapes",
        "ruleName": "prefer-unicode-codepoint-escapes"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-unicode-codepoint-escapes",
      "plugin": "regexp"
    },
    "regexp/prefer-w": {
      "docs": {
        "description": "enforce using `\\w`",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-w.html",
        "ruleId": "regexp/prefer-w",
        "ruleName": "prefer-w"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-w",
      "plugin": "regexp"
    },
    "regexp/require-unicode-regexp": {
      "docs": {
        "description": "enforce the use of the `u` flag",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/require-unicode-regexp.html",
        "ruleId": "regexp/require-unicode-regexp",
        "ruleName": "require-unicode-regexp"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/require-unicode-regexp",
      "plugin": "regexp"
    },
    "regexp/require-unicode-sets-regexp": {
      "docs": {
        "description": "enforce the use of the `v` flag",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/require-unicode-sets-regexp.html",
        "ruleId": "regexp/require-unicode-sets-regexp",
        "ruleName": "require-unicode-sets-regexp"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/require-unicode-sets-regexp",
      "plugin": "regexp"
    },
    "regexp/simplify-set-operations": {
      "docs": {
        "description": "require simplify set operations",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/simplify-set-operations.html",
        "ruleId": "regexp/simplify-set-operations",
        "ruleName": "simplify-set-operations"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/simplify-set-operations",
      "plugin": "regexp"
    },
    "regexp/sort-alternatives": {
      "docs": {
        "description": "sort alternatives if order doesn't matter",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/sort-alternatives.html",
        "ruleId": "regexp/sort-alternatives",
        "ruleName": "sort-alternatives"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/sort-alternatives",
      "plugin": "regexp"
    },
    "regexp/sort-character-class-elements": {
      "docs": {
        "description": "enforces elements order in character class",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/sort-character-class-elements.html",
        "ruleId": "regexp/sort-character-class-elements",
        "ruleName": "sort-character-class-elements"
      },
      "fixable": "code",
      "type": "layout",
      "name": "regexp/sort-character-class-elements",
      "plugin": "regexp"
    },
    "regexp/sort-flags": {
      "docs": {
        "description": "require regex flags to be sorted",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/sort-flags.html",
        "ruleId": "regexp/sort-flags",
        "ruleName": "sort-flags"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/sort-flags",
      "plugin": "regexp"
    },
    "regexp/strict": {
      "docs": {
        "description": "disallow not strictly valid regular expressions",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/strict.html",
        "ruleId": "regexp/strict",
        "ruleName": "strict"
      },
      "fixable": "code",
      "type": "suggestion",
      "hasSuggestions": true,
      "name": "regexp/strict",
      "plugin": "regexp"
    },
    "regexp/unicode-escape": {
      "docs": {
        "description": "enforce consistent usage of unicode escape or unicode codepoint escape",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/unicode-escape.html",
        "ruleId": "regexp/unicode-escape",
        "ruleName": "unicode-escape"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/unicode-escape",
      "plugin": "regexp"
    },
    "regexp/unicode-property": {
      "docs": {
        "description": "enforce consistent naming of unicode properties",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/unicode-property.html",
        "ruleId": "regexp/unicode-property",
        "ruleName": "unicode-property"
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "regexp/unicode-property",
      "plugin": "regexp"
    },
    "regexp/use-ignore-case": {
      "docs": {
        "description": "use the `i` flag if it simplifies the pattern",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/use-ignore-case.html",
        "ruleId": "regexp/use-ignore-case",
        "ruleName": "use-ignore-case"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/use-ignore-case",
      "plugin": "regexp"
    },
    "unocss/order": {
      "type": "layout",
      "fixable": "code",
      "docs": {
        "description": "Order of UnoCSS utilities in class attribute",
        "url": "https://unocss.dev/integrations/eslint#rules"
      },
      "name": "unocss/order",
      "plugin": "unocss"
    },
    "unocss/order-attributify": {
      "type": "layout",
      "fixable": "code",
      "docs": {
        "description": "Order of UnoCSS attributes",
        "url": "https://unocss.dev/integrations/eslint#rules"
      },
      "name": "unocss/order-attributify",
      "plugin": "unocss"
    },
    "unocss/blocklist": {
      "type": "problem",
      "fixable": "code",
      "docs": {
        "description": "Utilities in UnoCSS blocklist",
        "url": "https://unocss.dev/integrations/eslint#rules"
      },
      "name": "unocss/blocklist",
      "plugin": "unocss"
    },
    "unocss/enforce-class-compile": {
      "type": "problem",
      "fixable": "code",
      "docs": {
        "description": "Enforce class compilation",
        "url": "https://unocss.dev/integrations/eslint#rules"
      },
      "name": "unocss/enforce-class-compile",
      "plugin": "unocss"
    },
    "antfu/consistent-chaining": {
      "type": "layout",
      "docs": {
        "description": "Having line breaks styles to object, array and named imports",
        "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/consistent-chaining.md"
      },
      "fixable": "whitespace",
      "name": "antfu/consistent-chaining",
      "plugin": "antfu"
    },
    "antfu/consistent-list-newline": {
      "type": "layout",
      "docs": {
        "description": "Having line breaks styles to object, array and named imports",
        "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/consistent-list-newline.md"
      },
      "fixable": "whitespace",
      "name": "antfu/consistent-list-newline",
      "plugin": "antfu"
    },
    "antfu/curly": {
      "type": "layout",
      "docs": {
        "description": "Enforce Anthony's style of curly bracket",
        "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/curly.md"
      },
      "fixable": "whitespace",
      "name": "antfu/curly",
      "plugin": "antfu"
    },
    "antfu/if-newline": {
      "type": "layout",
      "docs": {
        "description": "Newline after if",
        "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/if-newline.md"
      },
      "fixable": "whitespace",
      "name": "antfu/if-newline",
      "plugin": "antfu"
    },
    "antfu/import-dedupe": {
      "type": "problem",
      "docs": {
        "description": "Fix duplication in imports",
        "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/import-dedupe.md"
      },
      "fixable": "code",
      "name": "antfu/import-dedupe",
      "plugin": "antfu"
    },
    "antfu/indent-unindent": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent indentation in `unindent` template tag",
        "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/indent-unindent.md"
      },
      "fixable": "code",
      "name": "antfu/indent-unindent",
      "plugin": "antfu"
    },
    "antfu/no-import-dist": {
      "type": "problem",
      "docs": {
        "description": "Prevent importing modules in `dist` folder",
        "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-import-dist.test.ts"
      },
      "name": "antfu/no-import-dist",
      "plugin": "antfu"
    },
    "antfu/no-import-node-modules-by-path": {
      "type": "problem",
      "docs": {
        "description": "Prevent importing modules in `node_modules` folder by relative or absolute path",
        "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-import-node-modules-by-path.test.ts"
      },
      "name": "antfu/no-import-node-modules-by-path",
      "plugin": "antfu"
    },
    "antfu/no-top-level-await": {
      "type": "problem",
      "docs": {
        "description": "Prevent using top-level await",
        "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-top-level-await.test.ts"
      },
      "name": "antfu/no-top-level-await",
      "plugin": "antfu"
    },
    "antfu/no-ts-export-equal": {
      "type": "problem",
      "docs": {
        "description": "Do not use `exports =`",
        "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/no-ts-export-equal.test.ts"
      },
      "name": "antfu/no-ts-export-equal",
      "plugin": "antfu"
    },
    "antfu/top-level-function": {
      "type": "problem",
      "docs": {
        "description": "Enforce top-level functions to be declared with function keyword",
        "url": "https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/top-level-function.md"
      },
      "fixable": "code",
      "name": "antfu/top-level-function",
      "plugin": "antfu"
    },
    "ts/adjacent-overload-signatures": {
      "type": "suggestion",
      "docs": {
        "description": "Require that function overload signatures be consecutive",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/adjacent-overload-signatures"
      },
      "name": "ts/adjacent-overload-signatures",
      "plugin": "ts"
    },
    "ts/array-type": {
      "type": "suggestion",
      "docs": {
        "description": "Require consistently using either `T[]` or `Array<T>` for arrays",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/array-type"
      },
      "fixable": "code",
      "name": "ts/array-type",
      "plugin": "ts"
    },
    "ts/await-thenable": {
      "type": "problem",
      "docs": {
        "description": "Disallow awaiting a value that is not a Thenable",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/await-thenable"
      },
      "hasSuggestions": true,
      "name": "ts/await-thenable",
      "plugin": "ts"
    },
    "ts/ban-ts-comment": {
      "type": "problem",
      "docs": {
        "description": "Disallow `@ts-<directive>` comments or require descriptions after directives",
        "recommended": {
          "recommended": true,
          "strict": [
            {
              "minimumDescriptionLength": 10
            }
          ]
        },
        "url": "https://typescript-eslint.io/rules/ban-ts-comment"
      },
      "hasSuggestions": true,
      "name": "ts/ban-ts-comment",
      "plugin": "ts"
    },
    "ts/ban-tslint-comment": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `// tslint:<rule-flag>` comments",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/ban-tslint-comment"
      },
      "fixable": "code",
      "name": "ts/ban-tslint-comment",
      "plugin": "ts"
    },
    "ts/class-literal-property-style": {
      "type": "problem",
      "docs": {
        "description": "Enforce that literals on classes are exposed in a consistent style",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/class-literal-property-style"
      },
      "hasSuggestions": true,
      "name": "ts/class-literal-property-style",
      "plugin": "ts"
    },
    "ts/class-methods-use-this": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce that class methods utilize `this`",
        "extendsBaseRule": true,
        "requiresTypeChecking": false,
        "url": "https://typescript-eslint.io/rules/class-methods-use-this"
      },
      "name": "ts/class-methods-use-this",
      "plugin": "ts"
    },
    "ts/consistent-generic-constructors": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce specifying generic type arguments on type annotation or constructor name of a constructor call",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/consistent-generic-constructors"
      },
      "fixable": "code",
      "name": "ts/consistent-generic-constructors",
      "plugin": "ts"
    },
    "ts/consistent-indexed-object-style": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow the `Record` type",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/consistent-indexed-object-style"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "ts/consistent-indexed-object-style",
      "plugin": "ts"
    },
    "ts/consistent-return": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "treatUndefinedAsUnspecified": false
        }
      ],
      "docs": {
        "description": "Require `return` statements to either always or never specify values",
        "extendsBaseRule": true,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/consistent-return"
      },
      "name": "ts/consistent-return",
      "plugin": "ts"
    },
    "ts/consistent-type-assertions": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent usage of type assertions",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/consistent-type-assertions"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "ts/consistent-type-assertions",
      "plugin": "ts"
    },
    "ts/consistent-type-definitions": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce type definitions to consistently use either `interface` or `type`",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/consistent-type-definitions"
      },
      "fixable": "code",
      "name": "ts/consistent-type-definitions",
      "plugin": "ts"
    },
    "ts/consistent-type-exports": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent usage of type exports",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/consistent-type-exports"
      },
      "fixable": "code",
      "name": "ts/consistent-type-exports",
      "plugin": "ts"
    },
    "ts/consistent-type-imports": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent usage of type imports",
        "url": "https://typescript-eslint.io/rules/consistent-type-imports"
      },
      "fixable": "code",
      "name": "ts/consistent-type-imports",
      "plugin": "ts"
    },
    "ts/default-param-last": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce default parameters to be last",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/default-param-last"
      },
      "name": "ts/default-param-last",
      "plugin": "ts"
    },
    "ts/dot-notation": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowIndexSignaturePropertyAccess": false,
          "allowKeywords": true,
          "allowPattern": "",
          "allowPrivateClassPropertyAccess": false,
          "allowProtectedClassPropertyAccess": false
        }
      ],
      "docs": {
        "description": "Enforce dot notation whenever possible",
        "extendsBaseRule": true,
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/dot-notation"
      },
      "fixable": "code",
      "name": "ts/dot-notation",
      "plugin": "ts"
    },
    "ts/explicit-function-return-type": {
      "type": "problem",
      "docs": {
        "description": "Require explicit return types on functions and class methods",
        "url": "https://typescript-eslint.io/rules/explicit-function-return-type"
      },
      "name": "ts/explicit-function-return-type",
      "plugin": "ts"
    },
    "ts/explicit-member-accessibility": {
      "type": "problem",
      "docs": {
        "description": "Require explicit accessibility modifiers on class properties and methods",
        "url": "https://typescript-eslint.io/rules/explicit-member-accessibility"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "ts/explicit-member-accessibility",
      "plugin": "ts"
    },
    "ts/explicit-module-boundary-types": {
      "type": "problem",
      "docs": {
        "description": "Require explicit return and argument types on exported functions' and classes' public class methods",
        "url": "https://typescript-eslint.io/rules/explicit-module-boundary-types"
      },
      "name": "ts/explicit-module-boundary-types",
      "plugin": "ts"
    },
    "ts/init-declarations": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow initialization in variable declarations",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/init-declarations"
      },
      "name": "ts/init-declarations",
      "plugin": "ts"
    },
    "ts/max-params": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of parameters in function definitions",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/max-params"
      },
      "name": "ts/max-params",
      "plugin": "ts"
    },
    "ts/member-ordering": {
      "type": "suggestion",
      "docs": {
        "description": "Require a consistent member declaration order",
        "url": "https://typescript-eslint.io/rules/member-ordering"
      },
      "name": "ts/member-ordering",
      "plugin": "ts"
    },
    "ts/method-signature-style": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using a particular method signature syntax",
        "url": "https://typescript-eslint.io/rules/method-signature-style"
      },
      "fixable": "code",
      "name": "ts/method-signature-style",
      "plugin": "ts"
    },
    "ts/naming-convention": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce naming conventions for everything across a codebase",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/naming-convention"
      },
      "name": "ts/naming-convention",
      "plugin": "ts"
    },
    "ts/no-array-constructor": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow generic `Array` constructors",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-array-constructor"
      },
      "fixable": "code",
      "name": "ts/no-array-constructor",
      "plugin": "ts"
    },
    "ts/no-array-delete": {
      "type": "problem",
      "docs": {
        "description": "Disallow using the `delete` operator on array values",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-array-delete"
      },
      "hasSuggestions": true,
      "name": "ts/no-array-delete",
      "plugin": "ts"
    },
    "ts/no-base-to-string": {
      "type": "suggestion",
      "docs": {
        "description": "Require `.toString()` and `.toLocaleString()` to only be called on objects which provide useful information when stringified",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-base-to-string"
      },
      "name": "ts/no-base-to-string",
      "plugin": "ts"
    },
    "ts/no-confusing-non-null-assertion": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertion in locations that may be confusing",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/no-confusing-non-null-assertion"
      },
      "hasSuggestions": true,
      "name": "ts/no-confusing-non-null-assertion",
      "plugin": "ts"
    },
    "ts/no-confusing-void-expression": {
      "type": "problem",
      "docs": {
        "description": "Require expressions of type void to appear in statement position",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-confusing-void-expression"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "ts/no-confusing-void-expression",
      "plugin": "ts"
    },
    "ts/no-deprecated": {
      "type": "problem",
      "docs": {
        "description": "Disallow using code marked as `@deprecated`",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-deprecated"
      },
      "name": "ts/no-deprecated",
      "plugin": "ts"
    },
    "ts/no-dupe-class-members": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate class members",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-dupe-class-members"
      },
      "name": "ts/no-dupe-class-members",
      "plugin": "ts"
    },
    "ts/no-duplicate-enum-values": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate enum member values",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-duplicate-enum-values"
      },
      "hasSuggestions": false,
      "name": "ts/no-duplicate-enum-values",
      "plugin": "ts"
    },
    "ts/no-duplicate-type-constituents": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow duplicate constituents of union or intersection types",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-duplicate-type-constituents"
      },
      "fixable": "code",
      "name": "ts/no-duplicate-type-constituents",
      "plugin": "ts"
    },
    "ts/no-dynamic-delete": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow using the `delete` operator on computed key expressions",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-dynamic-delete"
      },
      "fixable": "code",
      "name": "ts/no-dynamic-delete",
      "plugin": "ts"
    },
    "ts/no-empty-function": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allow": []
        }
      ],
      "docs": {
        "description": "Disallow empty functions",
        "extendsBaseRule": true,
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/no-empty-function"
      },
      "name": "ts/no-empty-function",
      "plugin": "ts"
    },
    "ts/no-empty-interface": {
      "type": "suggestion",
      "deprecated": {
        "deprecatedSince": "8.0.0",
        "replacedBy": [
          {
            "rule": {
              "name": "@typescript-eslint/no-empty-object-type",
              "url": "https://typescript-eslint.io/rules/no-empty-object-type"
            }
          }
        ],
        "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8977"
      },
      "docs": {
        "description": "Disallow the declaration of empty interfaces",
        "url": "https://typescript-eslint.io/rules/no-empty-interface"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "replacedBy": [
        "@typescript-eslint/no-empty-object-type"
      ],
      "name": "ts/no-empty-interface",
      "plugin": "ts"
    },
    "ts/no-empty-object-type": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow accidentally using the \"empty object\" type",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-empty-object-type"
      },
      "hasSuggestions": true,
      "name": "ts/no-empty-object-type",
      "plugin": "ts"
    },
    "ts/no-explicit-any": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the `any` type",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-explicit-any"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "ts/no-explicit-any",
      "plugin": "ts"
    },
    "ts/no-extra-non-null-assertion": {
      "type": "problem",
      "docs": {
        "description": "Disallow extra non-null assertions",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-extra-non-null-assertion"
      },
      "fixable": "code",
      "name": "ts/no-extra-non-null-assertion",
      "plugin": "ts"
    },
    "ts/no-extraneous-class": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow classes used as namespaces",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-extraneous-class"
      },
      "name": "ts/no-extraneous-class",
      "plugin": "ts"
    },
    "ts/no-floating-promises": {
      "type": "problem",
      "docs": {
        "description": "Require Promise-like statements to be handled appropriately",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-floating-promises"
      },
      "hasSuggestions": true,
      "name": "ts/no-floating-promises",
      "plugin": "ts"
    },
    "ts/no-for-in-array": {
      "type": "problem",
      "docs": {
        "description": "Disallow iterating over an array with a for-in loop",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-for-in-array"
      },
      "name": "ts/no-for-in-array",
      "plugin": "ts"
    },
    "ts/no-implied-eval": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `eval()`-like functions",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-implied-eval"
      },
      "name": "ts/no-implied-eval",
      "plugin": "ts"
    },
    "ts/no-import-type-side-effects": {
      "type": "problem",
      "docs": {
        "description": "Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers",
        "url": "https://typescript-eslint.io/rules/no-import-type-side-effects"
      },
      "fixable": "code",
      "name": "ts/no-import-type-side-effects",
      "plugin": "ts"
    },
    "ts/no-inferrable-types": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/no-inferrable-types"
      },
      "fixable": "code",
      "name": "ts/no-inferrable-types",
      "plugin": "ts"
    },
    "ts/no-invalid-this": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "capIsConstructor": true
        }
      ],
      "docs": {
        "description": "Disallow `this` keywords outside of classes or class-like objects",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-invalid-this"
      },
      "name": "ts/no-invalid-this",
      "plugin": "ts"
    },
    "ts/no-invalid-void-type": {
      "type": "problem",
      "docs": {
        "description": "Disallow `void` type outside of generic or return types",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-invalid-void-type"
      },
      "name": "ts/no-invalid-void-type",
      "plugin": "ts"
    },
    "ts/no-loop-func": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow function declarations that contain unsafe references inside loop statements",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-loop-func"
      },
      "name": "ts/no-loop-func",
      "plugin": "ts"
    },
    "ts/no-loss-of-precision": {
      "type": "problem",
      "deprecated": {
        "deprecatedSince": "8.0.0",
        "replacedBy": [
          {
            "rule": {
              "name": "no-loss-of-precision",
              "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
            }
          }
        ],
        "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
      },
      "docs": {
        "description": "Disallow literal numbers that lose precision",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-loss-of-precision"
      },
      "name": "ts/no-loss-of-precision",
      "plugin": "ts"
    },
    "ts/no-magic-numbers": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow magic numbers",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-magic-numbers"
      },
      "name": "ts/no-magic-numbers",
      "plugin": "ts"
    },
    "ts/no-meaningless-void-operator": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the `void` operator except when used to discard a value",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-meaningless-void-operator"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "ts/no-meaningless-void-operator",
      "plugin": "ts"
    },
    "ts/no-misused-new": {
      "type": "problem",
      "docs": {
        "description": "Enforce valid definition of `new` and `constructor`",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-misused-new"
      },
      "name": "ts/no-misused-new",
      "plugin": "ts"
    },
    "ts/no-misused-promises": {
      "type": "problem",
      "docs": {
        "description": "Disallow Promises in places not designed to handle them",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-misused-promises"
      },
      "name": "ts/no-misused-promises",
      "plugin": "ts"
    },
    "ts/no-misused-spread": {
      "type": "problem",
      "docs": {
        "description": "Disallow using the spread operator when it might cause unexpected behavior",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-misused-spread"
      },
      "hasSuggestions": true,
      "name": "ts/no-misused-spread",
      "plugin": "ts"
    },
    "ts/no-mixed-enums": {
      "type": "problem",
      "docs": {
        "description": "Disallow enums from having both number and string members",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-mixed-enums"
      },
      "name": "ts/no-mixed-enums",
      "plugin": "ts"
    },
    "ts/no-namespace": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow TypeScript namespaces",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-namespace"
      },
      "name": "ts/no-namespace",
      "plugin": "ts"
    },
    "ts/no-non-null-asserted-nullish-coalescing": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertions in the left operand of a nullish coalescing operator",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-non-null-asserted-nullish-coalescing"
      },
      "hasSuggestions": true,
      "name": "ts/no-non-null-asserted-nullish-coalescing",
      "plugin": "ts"
    },
    "ts/no-non-null-asserted-optional-chain": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertions after an optional chain expression",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain"
      },
      "hasSuggestions": true,
      "name": "ts/no-non-null-asserted-optional-chain",
      "plugin": "ts"
    },
    "ts/no-non-null-assertion": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertions using the `!` postfix operator",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-non-null-assertion"
      },
      "hasSuggestions": true,
      "name": "ts/no-non-null-assertion",
      "plugin": "ts"
    },
    "ts/no-redeclare": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow variable redeclaration",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-redeclare"
      },
      "name": "ts/no-redeclare",
      "plugin": "ts"
    },
    "ts/no-redundant-type-constituents": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow members of unions and intersections that do nothing or override type information",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-redundant-type-constituents"
      },
      "name": "ts/no-redundant-type-constituents",
      "plugin": "ts"
    },
    "ts/no-require-imports": {
      "type": "problem",
      "docs": {
        "description": "Disallow invocation of `require()`",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-require-imports"
      },
      "name": "ts/no-require-imports",
      "plugin": "ts"
    },
    "ts/no-restricted-imports": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified modules when loaded by `import`",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-restricted-imports"
      },
      "name": "ts/no-restricted-imports",
      "plugin": "ts"
    },
    "ts/no-restricted-types": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow certain types",
        "url": "https://typescript-eslint.io/rules/no-restricted-types"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "ts/no-restricted-types",
      "plugin": "ts"
    },
    "ts/no-shadow": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-shadow"
      },
      "name": "ts/no-shadow",
      "plugin": "ts"
    },
    "ts/no-this-alias": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow aliasing `this`",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-this-alias"
      },
      "name": "ts/no-this-alias",
      "plugin": "ts"
    },
    "ts/no-type-alias": {
      "type": "suggestion",
      "deprecated": {
        "deprecatedSince": "6.0.0",
        "replacedBy": [
          {
            "rule": {
              "name": "@typescript-eslint/consistent-type-definitions",
              "url": "https://typescript-eslint.io/rules/consistent-type-definitions"
            }
          }
        ],
        "url": "https://github.com/typescript-eslint/typescript-eslint/pull/6229"
      },
      "docs": {
        "description": "Disallow type aliases",
        "url": "https://typescript-eslint.io/rules/no-type-alias"
      },
      "name": "ts/no-type-alias",
      "plugin": "ts"
    },
    "ts/no-unnecessary-boolean-literal-compare": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary equality comparisons against boolean literals",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare"
      },
      "fixable": "code",
      "name": "ts/no-unnecessary-boolean-literal-compare",
      "plugin": "ts"
    },
    "ts/no-unnecessary-condition": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow conditionals where the type is always truthy or always falsy",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-condition"
      },
      "hasSuggestions": true,
      "name": "ts/no-unnecessary-condition",
      "plugin": "ts"
    },
    "ts/no-unnecessary-parameter-property-assignment": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary assignment of constructor property parameter",
        "url": "https://typescript-eslint.io/rules/no-unnecessary-parameter-property-assignment"
      },
      "name": "ts/no-unnecessary-parameter-property-assignment",
      "plugin": "ts"
    },
    "ts/no-unnecessary-qualifier": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary namespace qualifiers",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-qualifier"
      },
      "fixable": "code",
      "name": "ts/no-unnecessary-qualifier",
      "plugin": "ts"
    },
    "ts/no-unnecessary-template-expression": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary template expressions",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-template-expression"
      },
      "fixable": "code",
      "name": "ts/no-unnecessary-template-expression",
      "plugin": "ts"
    },
    "ts/no-unnecessary-type-arguments": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow type arguments that are equal to the default",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-arguments"
      },
      "fixable": "code",
      "name": "ts/no-unnecessary-type-arguments",
      "plugin": "ts"
    },
    "ts/no-unnecessary-type-assertion": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow type assertions that do not change the type of an expression",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-assertion"
      },
      "fixable": "code",
      "name": "ts/no-unnecessary-type-assertion",
      "plugin": "ts"
    },
    "ts/no-unnecessary-type-constraint": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary constraints on generic types",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-constraint"
      },
      "hasSuggestions": true,
      "name": "ts/no-unnecessary-type-constraint",
      "plugin": "ts"
    },
    "ts/no-unnecessary-type-conversion": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow conversion idioms when they do not change the type or value of the expression",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-conversion"
      },
      "hasSuggestions": true,
      "name": "ts/no-unnecessary-type-conversion",
      "plugin": "ts"
    },
    "ts/no-unnecessary-type-parameters": {
      "type": "problem",
      "docs": {
        "description": "Disallow type parameters that aren't used multiple times",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-parameters"
      },
      "hasSuggestions": true,
      "name": "ts/no-unnecessary-type-parameters",
      "plugin": "ts"
    },
    "ts/no-unsafe-argument": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling a function with a value with type `any`",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-argument"
      },
      "name": "ts/no-unsafe-argument",
      "plugin": "ts"
    },
    "ts/no-unsafe-assignment": {
      "type": "problem",
      "docs": {
        "description": "Disallow assigning a value with type `any` to variables and properties",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-assignment"
      },
      "name": "ts/no-unsafe-assignment",
      "plugin": "ts"
    },
    "ts/no-unsafe-call": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling a value with type `any`",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-call"
      },
      "name": "ts/no-unsafe-call",
      "plugin": "ts"
    },
    "ts/no-unsafe-declaration-merging": {
      "type": "problem",
      "docs": {
        "description": "Disallow unsafe declaration merging",
        "recommended": "recommended",
        "requiresTypeChecking": false,
        "url": "https://typescript-eslint.io/rules/no-unsafe-declaration-merging"
      },
      "name": "ts/no-unsafe-declaration-merging",
      "plugin": "ts"
    },
    "ts/no-unsafe-enum-comparison": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow comparing an enum value with a non-enum value",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-enum-comparison"
      },
      "hasSuggestions": true,
      "name": "ts/no-unsafe-enum-comparison",
      "plugin": "ts"
    },
    "ts/no-unsafe-function-type": {
      "type": "problem",
      "docs": {
        "description": "Disallow using the unsafe built-in Function type",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-unsafe-function-type"
      },
      "name": "ts/no-unsafe-function-type",
      "plugin": "ts"
    },
    "ts/no-unsafe-member-access": {
      "type": "problem",
      "docs": {
        "description": "Disallow member access on a value with type `any`",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-member-access"
      },
      "name": "ts/no-unsafe-member-access",
      "plugin": "ts"
    },
    "ts/no-unsafe-return": {
      "type": "problem",
      "docs": {
        "description": "Disallow returning a value with type `any` from a function",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-return"
      },
      "name": "ts/no-unsafe-return",
      "plugin": "ts"
    },
    "ts/no-unsafe-type-assertion": {
      "type": "problem",
      "docs": {
        "description": "Disallow type assertions that narrow a type",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-type-assertion"
      },
      "name": "ts/no-unsafe-type-assertion",
      "plugin": "ts"
    },
    "ts/no-unsafe-unary-minus": {
      "type": "problem",
      "docs": {
        "description": "Require unary negation to take a number",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-unary-minus"
      },
      "name": "ts/no-unsafe-unary-minus",
      "plugin": "ts"
    },
    "ts/no-unused-expressions": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowShortCircuit": false,
          "allowTaggedTemplates": false,
          "allowTernary": false
        }
      ],
      "docs": {
        "description": "Disallow unused expressions",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-unused-expressions"
      },
      "name": "ts/no-unused-expressions",
      "plugin": "ts"
    },
    "ts/no-unused-vars": {
      "type": "problem",
      "docs": {
        "description": "Disallow unused variables",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-unused-vars"
      },
      "name": "ts/no-unused-vars",
      "plugin": "ts"
    },
    "ts/no-use-before-define": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of variables before they are defined",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-use-before-define"
      },
      "name": "ts/no-use-before-define",
      "plugin": "ts"
    },
    "ts/no-useless-constructor": {
      "type": "problem",
      "docs": {
        "description": "Disallow unnecessary constructors",
        "extendsBaseRule": true,
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-useless-constructor"
      },
      "hasSuggestions": true,
      "name": "ts/no-useless-constructor",
      "plugin": "ts"
    },
    "ts/no-useless-empty-export": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow empty exports that don't change anything in a module file",
        "url": "https://typescript-eslint.io/rules/no-useless-empty-export"
      },
      "fixable": "code",
      "hasSuggestions": false,
      "name": "ts/no-useless-empty-export",
      "plugin": "ts"
    },
    "ts/no-var-requires": {
      "type": "problem",
      "deprecated": {
        "deprecatedSince": "8.0.0",
        "replacedBy": [
          {
            "rule": {
              "name": "@typescript-eslint/no-require-imports",
              "url": "https://typescript-eslint.io/rules/no-require-imports"
            }
          }
        ],
        "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
      },
      "docs": {
        "description": "Disallow `require` statements except in import statements",
        "url": "https://typescript-eslint.io/rules/no-var-requires"
      },
      "replacedBy": [
        "@typescript-eslint/no-require-imports"
      ],
      "name": "ts/no-var-requires",
      "plugin": "ts"
    },
    "ts/no-wrapper-object-types": {
      "type": "problem",
      "docs": {
        "description": "Disallow using confusing built-in primitive class wrappers",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-wrapper-object-types"
      },
      "fixable": "code",
      "name": "ts/no-wrapper-object-types",
      "plugin": "ts"
    },
    "ts/non-nullable-type-assertion-style": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce non-null assertions over explicit type assertions",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/non-nullable-type-assertion-style"
      },
      "fixable": "code",
      "name": "ts/non-nullable-type-assertion-style",
      "plugin": "ts"
    },
    "ts/only-throw-error": {
      "type": "problem",
      "docs": {
        "description": "Disallow throwing non-`Error` values as exceptions",
        "extendsBaseRule": "no-throw-literal",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/only-throw-error"
      },
      "name": "ts/only-throw-error",
      "plugin": "ts"
    },
    "ts/parameter-properties": {
      "type": "problem",
      "docs": {
        "description": "Require or disallow parameter properties in class constructors",
        "url": "https://typescript-eslint.io/rules/parameter-properties"
      },
      "name": "ts/parameter-properties",
      "plugin": "ts"
    },
    "ts/prefer-as-const": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of `as const` over literal type",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/prefer-as-const"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "ts/prefer-as-const",
      "plugin": "ts"
    },
    "ts/prefer-destructuring": {
      "type": "suggestion",
      "docs": {
        "description": "Require destructuring from arrays and/or objects",
        "extendsBaseRule": true,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-destructuring"
      },
      "fixable": "code",
      "name": "ts/prefer-destructuring",
      "plugin": "ts"
    },
    "ts/prefer-enum-initializers": {
      "type": "suggestion",
      "docs": {
        "description": "Require each enum member value to be explicitly initialized",
        "url": "https://typescript-eslint.io/rules/prefer-enum-initializers"
      },
      "hasSuggestions": true,
      "name": "ts/prefer-enum-initializers",
      "plugin": "ts"
    },
    "ts/prefer-find": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of Array.prototype.find() over Array.prototype.filter() followed by [0] when looking for a single result",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-find"
      },
      "hasSuggestions": true,
      "name": "ts/prefer-find",
      "plugin": "ts"
    },
    "ts/prefer-for-of": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of `for-of` loop over the standard `for` loop where possible",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/prefer-for-of"
      },
      "name": "ts/prefer-for-of",
      "plugin": "ts"
    },
    "ts/prefer-function-type": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using function types instead of interfaces with call signatures",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/prefer-function-type"
      },
      "fixable": "code",
      "name": "ts/prefer-function-type",
      "plugin": "ts"
    },
    "ts/prefer-includes": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce `includes` method over `indexOf` method",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-includes"
      },
      "fixable": "code",
      "name": "ts/prefer-includes",
      "plugin": "ts"
    },
    "ts/prefer-literal-enum-member": {
      "type": "suggestion",
      "docs": {
        "description": "Require all enum members to be literal values",
        "recommended": "strict",
        "requiresTypeChecking": false,
        "url": "https://typescript-eslint.io/rules/prefer-literal-enum-member"
      },
      "name": "ts/prefer-literal-enum-member",
      "plugin": "ts"
    },
    "ts/prefer-namespace-keyword": {
      "type": "suggestion",
      "docs": {
        "description": "Require using `namespace` keyword over `module` keyword to declare custom TypeScript modules",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/prefer-namespace-keyword"
      },
      "fixable": "code",
      "name": "ts/prefer-namespace-keyword",
      "plugin": "ts"
    },
    "ts/prefer-nullish-coalescing": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using the nullish coalescing operator instead of logical assignments or chaining",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-nullish-coalescing"
      },
      "hasSuggestions": true,
      "name": "ts/prefer-nullish-coalescing",
      "plugin": "ts"
    },
    "ts/prefer-optional-chain": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-optional-chain"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "ts/prefer-optional-chain",
      "plugin": "ts"
    },
    "ts/prefer-promise-reject-errors": {
      "type": "suggestion",
      "docs": {
        "description": "Require using Error objects as Promise rejection reasons",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-promise-reject-errors"
      },
      "name": "ts/prefer-promise-reject-errors",
      "plugin": "ts"
    },
    "ts/prefer-readonly": {
      "type": "suggestion",
      "docs": {
        "description": "Require private members to be marked as `readonly` if they're never modified outside of the constructor",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-readonly"
      },
      "fixable": "code",
      "name": "ts/prefer-readonly",
      "plugin": "ts"
    },
    "ts/prefer-readonly-parameter-types": {
      "type": "suggestion",
      "docs": {
        "description": "Require function parameters to be typed as `readonly` to prevent accidental mutation of inputs",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-readonly-parameter-types"
      },
      "name": "ts/prefer-readonly-parameter-types",
      "plugin": "ts"
    },
    "ts/prefer-reduce-type-parameter": {
      "type": "problem",
      "docs": {
        "description": "Enforce using type parameter when calling `Array#reduce` instead of using a type assertion",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-reduce-type-parameter"
      },
      "fixable": "code",
      "name": "ts/prefer-reduce-type-parameter",
      "plugin": "ts"
    },
    "ts/prefer-regexp-exec": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce `RegExp#exec` over `String#match` if no global flag is provided",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-regexp-exec"
      },
      "fixable": "code",
      "name": "ts/prefer-regexp-exec",
      "plugin": "ts"
    },
    "ts/prefer-return-this-type": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce that `this` is used when only `this` type is returned",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-return-this-type"
      },
      "fixable": "code",
      "name": "ts/prefer-return-this-type",
      "plugin": "ts"
    },
    "ts/prefer-string-starts-ends-with": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using `String#startsWith` and `String#endsWith` over other equivalent methods of checking substrings",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-string-starts-ends-with"
      },
      "fixable": "code",
      "name": "ts/prefer-string-starts-ends-with",
      "plugin": "ts"
    },
    "ts/prefer-ts-expect-error": {
      "type": "problem",
      "deprecated": {
        "deprecatedSince": "7.11.0",
        "replacedBy": [
          {
            "rule": {
              "name": "@typescript-eslint/ban-ts-comment",
              "url": "https://typescript-eslint.io/rules/ban-ts-comment"
            }
          }
        ],
        "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
      },
      "docs": {
        "description": "Enforce using `@ts-expect-error` over `@ts-ignore`",
        "url": "https://typescript-eslint.io/rules/prefer-ts-expect-error"
      },
      "fixable": "code",
      "replacedBy": [
        "@typescript-eslint/ban-ts-comment"
      ],
      "name": "ts/prefer-ts-expect-error",
      "plugin": "ts"
    },
    "ts/promise-function-async": {
      "type": "suggestion",
      "docs": {
        "description": "Require any function or method that returns a Promise to be marked async",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/promise-function-async"
      },
      "fixable": "code",
      "name": "ts/promise-function-async",
      "plugin": "ts"
    },
    "ts/related-getter-setter-pairs": {
      "type": "problem",
      "docs": {
        "description": "Enforce that `get()` types should be assignable to their equivalent `set()` type",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/related-getter-setter-pairs"
      },
      "name": "ts/related-getter-setter-pairs",
      "plugin": "ts"
    },
    "ts/require-array-sort-compare": {
      "type": "problem",
      "docs": {
        "description": "Require `Array#sort` and `Array#toSorted` calls to always provide a `compareFunction`",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/require-array-sort-compare"
      },
      "name": "ts/require-array-sort-compare",
      "plugin": "ts"
    },
    "ts/require-await": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow async functions which do not return promises and have no `await` expression",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/require-await"
      },
      "hasSuggestions": true,
      "name": "ts/require-await",
      "plugin": "ts"
    },
    "ts/restrict-plus-operands": {
      "type": "problem",
      "docs": {
        "description": "Require both operands of addition to be the same type and be `bigint`, `number`, or `string`",
        "recommended": {
          "recommended": true,
          "strict": [
            {
              "allowAny": false,
              "allowBoolean": false,
              "allowNullish": false,
              "allowNumberAndString": false,
              "allowRegExp": false
            }
          ]
        },
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/restrict-plus-operands"
      },
      "name": "ts/restrict-plus-operands",
      "plugin": "ts"
    },
    "ts/restrict-template-expressions": {
      "type": "problem",
      "docs": {
        "description": "Enforce template literal expressions to be of `string` type",
        "recommended": {
          "recommended": true,
          "strict": [
            {
              "allowAny": false,
              "allowBoolean": false,
              "allowNever": false,
              "allowNullish": false,
              "allowNumber": false,
              "allowRegExp": false
            }
          ]
        },
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/restrict-template-expressions"
      },
      "name": "ts/restrict-template-expressions",
      "plugin": "ts"
    },
    "ts/return-await": {
      "type": "problem",
      "docs": {
        "description": "Enforce consistent awaiting of returned promises",
        "recommended": {
          "strict": [
            "error-handling-correctness-only"
          ]
        },
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/return-await"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "ts/return-await",
      "plugin": "ts"
    },
    "ts/sort-type-constituents": {
      "type": "suggestion",
      "deprecated": {
        "deprecatedSince": "7.13.0",
        "replacedBy": [
          {
            "plugin": {
              "name": "eslint-plugin-perfectionist",
              "url": "https://perfectionist.dev"
            },
            "rule": {
              "name": "perfectionist/sort-intersection-types",
              "url": "https://perfectionist.dev/rules/sort-intersection-types"
            }
          },
          {
            "plugin": {
              "name": "eslint-plugin-perfectionist",
              "url": "https://perfectionist.dev"
            },
            "rule": {
              "name": "perfectionist/sort-union-types",
              "url": "https://perfectionist.dev/rules/sort-union-types"
            }
          }
        ],
        "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9253"
      },
      "docs": {
        "description": "Enforce constituents of a type union/intersection to be sorted alphabetically",
        "url": "https://typescript-eslint.io/rules/sort-type-constituents"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "replacedBy": [
        "perfectionist/sort-intersection-types",
        "perfectionist/sort-union-types"
      ],
      "name": "ts/sort-type-constituents",
      "plugin": "ts"
    },
    "ts/strict-boolean-expressions": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow certain types in boolean expressions",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/strict-boolean-expressions"
      },
      "hasSuggestions": true,
      "name": "ts/strict-boolean-expressions",
      "plugin": "ts"
    },
    "ts/switch-exhaustiveness-check": {
      "type": "suggestion",
      "docs": {
        "description": "Require switch-case statements to be exhaustive",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/switch-exhaustiveness-check"
      },
      "hasSuggestions": true,
      "name": "ts/switch-exhaustiveness-check",
      "plugin": "ts"
    },
    "ts/triple-slash-reference": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow certain triple slash directives in favor of ES6-style import declarations",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/triple-slash-reference"
      },
      "name": "ts/triple-slash-reference",
      "plugin": "ts"
    },
    "ts/typedef": {
      "type": "suggestion",
      "deprecated": {
        "deprecatedSince": "8.33.0",
        "message": "This is an old rule that is no longer recommended for use."
      },
      "docs": {
        "description": "Require type annotations in certain places",
        "url": "https://typescript-eslint.io/rules/typedef"
      },
      "name": "ts/typedef",
      "plugin": "ts"
    },
    "ts/unbound-method": {
      "type": "problem",
      "docs": {
        "description": "Enforce unbound methods are called with their expected scope",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/unbound-method"
      },
      "name": "ts/unbound-method",
      "plugin": "ts"
    },
    "ts/unified-signatures": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow two overloads that could be unified into one with a union or an optional/rest parameter",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/unified-signatures"
      },
      "name": "ts/unified-signatures",
      "plugin": "ts"
    },
    "ts/use-unknown-in-catch-callback-variable": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce typing arguments in Promise rejection callbacks as `unknown`",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/use-unknown-in-catch-callback-variable"
      },
      "hasSuggestions": true,
      "name": "ts/use-unknown-in-catch-callback-variable",
      "plugin": "ts"
    },
    "markdown/fenced-code-language": {
      "type": "problem",
      "docs": {
        "recommended": true,
        "description": "Require languages for fenced code blocks",
        "url": "https://github.com/eslint/markdown/blob/main/docs/rules/fenced-code-language.md"
      },
      "defaultOptions": [
        {
          "required": []
        }
      ],
      "name": "markdown/fenced-code-language",
      "plugin": "markdown"
    },
    "markdown/heading-increment": {
      "type": "problem",
      "docs": {
        "recommended": true,
        "description": "Enforce heading levels increment by one",
        "url": "https://github.com/eslint/markdown/blob/main/docs/rules/heading-increment.md"
      },
      "name": "markdown/heading-increment",
      "plugin": "markdown"
    },
    "markdown/no-bare-urls": {
      "type": "problem",
      "docs": {
        "description": "Disallow bare URLs",
        "url": "https://github.com/eslint/markdown/blob/main/docs/rules/no-bare-urls.md"
      },
      "fixable": "code",
      "name": "markdown/no-bare-urls",
      "plugin": "markdown"
    },
    "markdown/no-duplicate-definitions": {
      "type": "problem",
      "docs": {
        "recommended": true,
        "description": "Disallow duplicate definitions",
        "url": "https://github.com/eslint/markdown/blob/main/docs/rules/no-duplicate-definitions.md"
      },
      "defaultOptions": [
        {
          "allowDefinitions": [
            "//"
          ],
          "allowFootnoteDefinitions": []
        }
      ],
      "name": "markdown/no-duplicate-definitions",
      "plugin": "markdown"
    },
    "markdown/no-duplicate-headings": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate headings in the same document",
        "url": "https://github.com/eslint/markdown/blob/main/docs/rules/no-duplicate-headings.md"
      },
      "defaultOptions": [
        {
          "checkSiblingsOnly": false
        }
      ],
      "name": "markdown/no-duplicate-headings",
      "plugin": "markdown"
    },
    "markdown/no-empty-definitions": {
      "type": "problem",
      "docs": {
        "recommended": true,
        "description": "Disallow empty definitions",
        "url": "https://github.com/eslint/markdown/blob/main/docs/rules/no-empty-definitions.md"
      },
      "name": "markdown/no-empty-definitions",
      "plugin": "markdown"
    },
    "markdown/no-empty-images": {
      "type": "problem",
      "docs": {
        "recommended": true,
        "description": "Disallow empty images",
        "url": "https://github.com/eslint/markdown/blob/main/docs/rules/no-empty-images.md"
      },
      "name": "markdown/no-empty-images",
      "plugin": "markdown"
    },
    "markdown/no-empty-links": {
      "type": "problem",
      "docs": {
        "recommended": true,
        "description": "Disallow empty links",
        "url": "https://github.com/eslint/markdown/blob/main/docs/rules/no-empty-links.md"
      },
      "name": "markdown/no-empty-links",
      "plugin": "markdown"
    },
    "markdown/no-html": {
      "type": "problem",
      "docs": {
        "description": "Disallow HTML tags",
        "url": "https://github.com/eslint/markdown/blob/main/docs/rules/no-html.md"
      },
      "defaultOptions": [
        {
          "allowed": []
        }
      ],
      "name": "markdown/no-html",
      "plugin": "markdown"
    },
    "markdown/no-invalid-label-refs": {
      "type": "problem",
      "docs": {
        "recommended": true,
        "description": "Disallow invalid label references",
        "url": "https://github.com/eslint/markdown/blob/main/docs/rules/no-invalid-label-refs.md"
      },
      "name": "markdown/no-invalid-label-refs",
      "plugin": "markdown"
    },
    "markdown/no-missing-atx-heading-space": {
      "type": "problem",
      "docs": {
        "recommended": true,
        "description": "Disallow headings without a space after the hash characters",
        "url": "https://github.com/eslint/markdown/blob/main/docs/rules/no-missing-atx-heading-space.md"
      },
      "fixable": "whitespace",
      "name": "markdown/no-missing-atx-heading-space",
      "plugin": "markdown"
    },
    "markdown/no-missing-label-refs": {
      "type": "problem",
      "docs": {
        "recommended": true,
        "description": "Disallow missing label references",
        "url": "https://github.com/eslint/markdown/blob/main/docs/rules/no-missing-label-refs.md"
      },
      "name": "markdown/no-missing-label-refs",
      "plugin": "markdown"
    },
    "markdown/no-missing-link-fragments": {
      "type": "problem",
      "docs": {
        "recommended": true,
        "description": "Disallow link fragments that do not reference valid headings",
        "url": "https://github.com/eslint/markdown/blob/main/docs/rules/no-missing-link-fragments.md"
      },
      "defaultOptions": [
        {
          "ignoreCase": false,
          "allowPattern": ""
        }
      ],
      "name": "markdown/no-missing-link-fragments",
      "plugin": "markdown"
    },
    "markdown/no-multiple-h1": {
      "type": "problem",
      "docs": {
        "recommended": true,
        "description": "Disallow multiple H1 headings in the same document",
        "url": "https://github.com/eslint/markdown/blob/main/docs/rules/no-multiple-h1.md"
      },
      "defaultOptions": [
        {
          "frontmatterTitle": "^(?!\\s*['\"]title[:=]['\"])\\s*\\{?\\s*['\"]?title['\"]?\\s*[:=]"
        }
      ],
      "name": "markdown/no-multiple-h1",
      "plugin": "markdown"
    },
    "markdown/no-reversed-media-syntax": {
      "type": "problem",
      "docs": {
        "recommended": true,
        "description": "Disallow reversed link and image syntax",
        "url": "https://github.com/eslint/markdown/blob/main/docs/rules/no-reversed-media-syntax.md"
      },
      "fixable": "code",
      "name": "markdown/no-reversed-media-syntax",
      "plugin": "markdown"
    },
    "markdown/require-alt-text": {
      "type": "problem",
      "docs": {
        "recommended": true,
        "description": "Require alternative text for images",
        "url": "https://github.com/eslint/markdown/blob/main/docs/rules/require-alt-text.md"
      },
      "name": "markdown/require-alt-text",
      "plugin": "markdown"
    },
    "markdown/table-column-count": {
      "type": "problem",
      "docs": {
        "recommended": true,
        "description": "Disallow data rows in a GitHub Flavored Markdown table from having more cells than the header row",
        "url": "https://github.com/eslint/markdown/blob/main/docs/rules/table-column-count.md"
      },
      "name": "markdown/table-column-count",
      "plugin": "markdown"
    },
    "jsonc/array-bracket-newline": {
      "docs": {
        "description": "enforce line breaks after opening and before closing array brackets",
        "recommended": null,
        "extensionRule": true,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-newline.html",
        "ruleId": "jsonc/array-bracket-newline",
        "ruleName": "array-bracket-newline"
      },
      "type": "layout",
      "fixable": "whitespace",
      "name": "jsonc/array-bracket-newline",
      "plugin": "jsonc"
    },
    "jsonc/array-bracket-spacing": {
      "docs": {
        "description": "disallow or enforce spaces inside of brackets",
        "recommended": null,
        "extensionRule": true,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-spacing.html",
        "ruleId": "jsonc/array-bracket-spacing",
        "ruleName": "array-bracket-spacing"
      },
      "type": "layout",
      "fixable": "whitespace",
      "name": "jsonc/array-bracket-spacing",
      "plugin": "jsonc"
    },
    "jsonc/array-element-newline": {
      "docs": {
        "description": "enforce line breaks between array elements",
        "recommended": null,
        "extensionRule": true,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-element-newline.html",
        "ruleId": "jsonc/array-element-newline",
        "ruleName": "array-element-newline"
      },
      "type": "layout",
      "fixable": "whitespace",
      "name": "jsonc/array-element-newline",
      "plugin": "jsonc"
    },
    "jsonc/auto": {
      "docs": {
        "description": "apply jsonc rules similar to your configured ESLint core rules",
        "recommended": null,
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/auto.html",
        "ruleId": "jsonc/auto",
        "ruleName": "auto"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsonc/auto",
      "plugin": "jsonc"
    },
    "jsonc/comma-dangle": {
      "docs": {
        "description": "require or disallow trailing commas",
        "recommended": [
          "json"
        ],
        "extensionRule": true,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-dangle.html",
        "ruleId": "jsonc/comma-dangle",
        "ruleName": "comma-dangle"
      },
      "type": "layout",
      "fixable": "code",
      "name": "jsonc/comma-dangle",
      "plugin": "jsonc"
    },
    "jsonc/comma-style": {
      "docs": {
        "description": "enforce consistent comma style",
        "recommended": null,
        "extensionRule": true,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-style.html",
        "ruleId": "jsonc/comma-style",
        "ruleName": "comma-style"
      },
      "type": "layout",
      "fixable": "code",
      "name": "jsonc/comma-style",
      "plugin": "jsonc"
    },
    "jsonc/indent": {
      "docs": {
        "description": "enforce consistent indentation",
        "recommended": null,
        "extensionRule": true,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/indent.html",
        "ruleId": "jsonc/indent",
        "ruleName": "indent"
      },
      "type": "layout",
      "fixable": "whitespace",
      "name": "jsonc/indent",
      "plugin": "jsonc"
    },
    "jsonc/key-name-casing": {
      "docs": {
        "description": "enforce naming convention to property key names",
        "recommended": null,
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-name-casing.html",
        "ruleId": "jsonc/key-name-casing",
        "ruleName": "key-name-casing"
      },
      "type": "suggestion",
      "name": "jsonc/key-name-casing",
      "plugin": "jsonc"
    },
    "jsonc/key-spacing": {
      "docs": {
        "description": "enforce consistent spacing between keys and values in object literal properties",
        "recommended": null,
        "extensionRule": true,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-spacing.html",
        "ruleId": "jsonc/key-spacing",
        "ruleName": "key-spacing"
      },
      "type": "layout",
      "fixable": "whitespace",
      "name": "jsonc/key-spacing",
      "plugin": "jsonc"
    },
    "jsonc/no-bigint-literals": {
      "docs": {
        "description": "disallow BigInt literals",
        "recommended": [
          "json",
          "jsonc",
          "json5"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-bigint-literals.html",
        "ruleId": "jsonc/no-bigint-literals",
        "ruleName": "no-bigint-literals"
      },
      "type": "problem",
      "name": "jsonc/no-bigint-literals",
      "plugin": "jsonc"
    },
    "jsonc/no-binary-expression": {
      "docs": {
        "description": "disallow binary expression",
        "recommended": [
          "json",
          "jsonc",
          "json5"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-expression.html",
        "ruleId": "jsonc/no-binary-expression",
        "ruleName": "no-binary-expression"
      },
      "fixable": "code",
      "hasSuggestions": false,
      "type": "problem",
      "name": "jsonc/no-binary-expression",
      "plugin": "jsonc"
    },
    "jsonc/no-binary-numeric-literals": {
      "docs": {
        "description": "disallow binary numeric literals",
        "recommended": [
          "json",
          "jsonc",
          "json5"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-numeric-literals.html",
        "ruleId": "jsonc/no-binary-numeric-literals",
        "ruleName": "no-binary-numeric-literals"
      },
      "fixable": "code",
      "type": "problem",
      "name": "jsonc/no-binary-numeric-literals",
      "plugin": "jsonc"
    },
    "jsonc/no-comments": {
      "docs": {
        "description": "disallow comments",
        "recommended": [
          "json"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-comments.html",
        "ruleId": "jsonc/no-comments",
        "ruleName": "no-comments"
      },
      "type": "problem",
      "name": "jsonc/no-comments",
      "plugin": "jsonc"
    },
    "jsonc/no-dupe-keys": {
      "type": "problem",
      "docs": {
        "description": "disallow duplicate keys in object literals",
        "recommended": [
          "json",
          "jsonc",
          "json5"
        ],
        "extensionRule": true,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-dupe-keys.html",
        "ruleId": "jsonc/no-dupe-keys",
        "ruleName": "no-dupe-keys"
      },
      "deprecated": false,
      "replacedBy": [],
      "name": "jsonc/no-dupe-keys",
      "plugin": "jsonc"
    },
    "jsonc/no-escape-sequence-in-identifier": {
      "docs": {
        "description": "disallow escape sequences in identifiers.",
        "recommended": [
          "json",
          "jsonc",
          "json5"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-escape-sequence-in-identifier.html",
        "ruleId": "jsonc/no-escape-sequence-in-identifier",
        "ruleName": "no-escape-sequence-in-identifier"
      },
      "fixable": "code",
      "type": "problem",
      "name": "jsonc/no-escape-sequence-in-identifier",
      "plugin": "jsonc"
    },
    "jsonc/no-floating-decimal": {
      "deprecated": false,
      "type": "suggestion",
      "docs": {
        "description": "disallow leading or trailing decimal points in numeric literals",
        "recommended": [
          "json",
          "jsonc"
        ],
        "extensionRule": true,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-floating-decimal.html",
        "ruleId": "jsonc/no-floating-decimal",
        "ruleName": "no-floating-decimal"
      },
      "fixable": "code",
      "replacedBy": [],
      "name": "jsonc/no-floating-decimal",
      "plugin": "jsonc"
    },
    "jsonc/no-hexadecimal-numeric-literals": {
      "docs": {
        "description": "disallow hexadecimal numeric literals",
        "recommended": [
          "json",
          "jsonc"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-hexadecimal-numeric-literals.html",
        "ruleId": "jsonc/no-hexadecimal-numeric-literals",
        "ruleName": "no-hexadecimal-numeric-literals"
      },
      "fixable": "code",
      "type": "problem",
      "name": "jsonc/no-hexadecimal-numeric-literals",
      "plugin": "jsonc"
    },
    "jsonc/no-infinity": {
      "docs": {
        "description": "disallow Infinity",
        "recommended": [
          "json",
          "jsonc"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-infinity.html",
        "ruleId": "jsonc/no-infinity",
        "ruleName": "no-infinity"
      },
      "type": "problem",
      "name": "jsonc/no-infinity",
      "plugin": "jsonc"
    },
    "jsonc/no-irregular-whitespace": {
      "type": "problem",
      "defaultOptions": [
        {
          "skipComments": false,
          "skipJSXText": false,
          "skipRegExps": false,
          "skipStrings": true,
          "skipTemplates": false
        }
      ],
      "docs": {
        "description": "disallow irregular whitespace",
        "recommended": null,
        "extensionRule": true,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-irregular-whitespace.html",
        "ruleId": "jsonc/no-irregular-whitespace",
        "ruleName": "no-irregular-whitespace"
      },
      "deprecated": false,
      "replacedBy": [],
      "name": "jsonc/no-irregular-whitespace",
      "plugin": "jsonc"
    },
    "jsonc/no-multi-str": {
      "type": "suggestion",
      "docs": {
        "description": "disallow multiline strings",
        "recommended": [
          "json",
          "jsonc"
        ],
        "extensionRule": true,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-multi-str.html",
        "ruleId": "jsonc/no-multi-str",
        "ruleName": "no-multi-str"
      },
      "deprecated": false,
      "replacedBy": [],
      "name": "jsonc/no-multi-str",
      "plugin": "jsonc"
    },
    "jsonc/no-nan": {
      "docs": {
        "description": "disallow NaN",
        "recommended": [
          "json",
          "jsonc"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-nan.html",
        "ruleId": "jsonc/no-nan",
        "ruleName": "no-nan"
      },
      "type": "problem",
      "name": "jsonc/no-nan",
      "plugin": "jsonc"
    },
    "jsonc/no-number-props": {
      "docs": {
        "description": "disallow number property keys",
        "recommended": [
          "json",
          "jsonc",
          "json5"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-number-props.html",
        "ruleId": "jsonc/no-number-props",
        "ruleName": "no-number-props"
      },
      "fixable": "code",
      "type": "problem",
      "name": "jsonc/no-number-props",
      "plugin": "jsonc"
    },
    "jsonc/no-numeric-separators": {
      "docs": {
        "description": "disallow numeric separators",
        "recommended": [
          "json",
          "jsonc",
          "json5"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-numeric-separators.html",
        "ruleId": "jsonc/no-numeric-separators",
        "ruleName": "no-numeric-separators"
      },
      "fixable": "code",
      "type": "problem",
      "name": "jsonc/no-numeric-separators",
      "plugin": "jsonc"
    },
    "jsonc/no-octal-escape": {
      "type": "suggestion",
      "docs": {
        "description": "disallow octal escape sequences in string literals",
        "recommended": null,
        "extensionRule": true,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-escape.html",
        "ruleId": "jsonc/no-octal-escape",
        "ruleName": "no-octal-escape"
      },
      "deprecated": false,
      "replacedBy": [],
      "name": "jsonc/no-octal-escape",
      "plugin": "jsonc"
    },
    "jsonc/no-octal-numeric-literals": {
      "docs": {
        "description": "disallow octal numeric literals",
        "recommended": [
          "json",
          "jsonc",
          "json5"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-numeric-literals.html",
        "ruleId": "jsonc/no-octal-numeric-literals",
        "ruleName": "no-octal-numeric-literals"
      },
      "fixable": "code",
      "type": "problem",
      "name": "jsonc/no-octal-numeric-literals",
      "plugin": "jsonc"
    },
    "jsonc/no-octal": {
      "type": "suggestion",
      "docs": {
        "description": "disallow legacy octal literals",
        "recommended": [
          "json",
          "jsonc",
          "json5"
        ],
        "extensionRule": true,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal.html",
        "ruleId": "jsonc/no-octal",
        "ruleName": "no-octal"
      },
      "deprecated": false,
      "replacedBy": [],
      "name": "jsonc/no-octal",
      "plugin": "jsonc"
    },
    "jsonc/no-parenthesized": {
      "docs": {
        "description": "disallow parentheses around the expression",
        "recommended": [
          "json",
          "jsonc",
          "json5"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-parenthesized.html",
        "ruleId": "jsonc/no-parenthesized",
        "ruleName": "no-parenthesized"
      },
      "fixable": "code",
      "hasSuggestions": false,
      "type": "problem",
      "name": "jsonc/no-parenthesized",
      "plugin": "jsonc"
    },
    "jsonc/no-plus-sign": {
      "docs": {
        "description": "disallow plus sign",
        "recommended": [
          "json",
          "jsonc"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-plus-sign.html",
        "ruleId": "jsonc/no-plus-sign",
        "ruleName": "no-plus-sign"
      },
      "fixable": "code",
      "type": "problem",
      "name": "jsonc/no-plus-sign",
      "plugin": "jsonc"
    },
    "jsonc/no-regexp-literals": {
      "docs": {
        "description": "disallow RegExp literals",
        "recommended": [
          "json",
          "jsonc",
          "json5"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-regexp-literals.html",
        "ruleId": "jsonc/no-regexp-literals",
        "ruleName": "no-regexp-literals"
      },
      "type": "problem",
      "name": "jsonc/no-regexp-literals",
      "plugin": "jsonc"
    },
    "jsonc/no-sparse-arrays": {
      "type": "problem",
      "docs": {
        "description": "disallow sparse arrays",
        "recommended": [
          "json",
          "jsonc",
          "json5"
        ],
        "extensionRule": true,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-sparse-arrays.html",
        "ruleId": "jsonc/no-sparse-arrays",
        "ruleName": "no-sparse-arrays"
      },
      "deprecated": false,
      "replacedBy": [],
      "name": "jsonc/no-sparse-arrays",
      "plugin": "jsonc"
    },
    "jsonc/no-template-literals": {
      "docs": {
        "description": "disallow template literals",
        "recommended": [
          "json",
          "jsonc",
          "json5"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-template-literals.html",
        "ruleId": "jsonc/no-template-literals",
        "ruleName": "no-template-literals"
      },
      "fixable": "code",
      "type": "problem",
      "name": "jsonc/no-template-literals",
      "plugin": "jsonc"
    },
    "jsonc/no-undefined-value": {
      "docs": {
        "description": "disallow `undefined`",
        "recommended": [
          "json",
          "jsonc",
          "json5"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-undefined-value.html",
        "ruleId": "jsonc/no-undefined-value",
        "ruleName": "no-undefined-value"
      },
      "type": "problem",
      "name": "jsonc/no-undefined-value",
      "plugin": "jsonc"
    },
    "jsonc/no-unicode-codepoint-escapes": {
      "docs": {
        "description": "disallow Unicode code point escape sequences.",
        "recommended": [
          "json",
          "jsonc",
          "json5"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-unicode-codepoint-escapes.html",
        "ruleId": "jsonc/no-unicode-codepoint-escapes",
        "ruleName": "no-unicode-codepoint-escapes"
      },
      "fixable": "code",
      "type": "problem",
      "name": "jsonc/no-unicode-codepoint-escapes",
      "plugin": "jsonc"
    },
    "jsonc/no-useless-escape": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowRegexCharacters": []
        }
      ],
      "docs": {
        "description": "disallow unnecessary escape usage",
        "recommended": [
          "json",
          "jsonc",
          "json5"
        ],
        "extensionRule": true,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-useless-escape.html",
        "ruleId": "jsonc/no-useless-escape",
        "ruleName": "no-useless-escape"
      },
      "hasSuggestions": true,
      "deprecated": false,
      "replacedBy": [],
      "name": "jsonc/no-useless-escape",
      "plugin": "jsonc"
    },
    "jsonc/object-curly-newline": {
      "docs": {
        "description": "enforce consistent line breaks inside braces",
        "recommended": null,
        "extensionRule": true,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-newline.html",
        "ruleId": "jsonc/object-curly-newline",
        "ruleName": "object-curly-newline"
      },
      "type": "layout",
      "fixable": "whitespace",
      "name": "jsonc/object-curly-newline",
      "plugin": "jsonc"
    },
    "jsonc/object-curly-spacing": {
      "docs": {
        "description": "enforce consistent spacing inside braces",
        "recommended": null,
        "extensionRule": true,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-spacing.html",
        "ruleId": "jsonc/object-curly-spacing",
        "ruleName": "object-curly-spacing"
      },
      "type": "layout",
      "fixable": "whitespace",
      "name": "jsonc/object-curly-spacing",
      "plugin": "jsonc"
    },
    "jsonc/object-property-newline": {
      "docs": {
        "description": "enforce placing object properties on separate lines",
        "recommended": null,
        "extensionRule": true,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-property-newline.html",
        "ruleId": "jsonc/object-property-newline",
        "ruleName": "object-property-newline"
      },
      "type": "layout",
      "fixable": "whitespace",
      "name": "jsonc/object-property-newline",
      "plugin": "jsonc"
    },
    "jsonc/quote-props": {
      "docs": {
        "description": "require quotes around object literal property names",
        "recommended": [
          "json",
          "jsonc"
        ],
        "extensionRule": true,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quote-props.html",
        "ruleId": "jsonc/quote-props",
        "ruleName": "quote-props"
      },
      "type": "layout",
      "fixable": "code",
      "name": "jsonc/quote-props",
      "plugin": "jsonc"
    },
    "jsonc/quotes": {
      "docs": {
        "description": "enforce use of double or single quotes",
        "recommended": [
          "json",
          "jsonc"
        ],
        "extensionRule": true,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quotes.html",
        "ruleId": "jsonc/quotes",
        "ruleName": "quotes"
      },
      "type": "layout",
      "fixable": "code",
      "name": "jsonc/quotes",
      "plugin": "jsonc"
    },
    "jsonc/sort-array-values": {
      "docs": {
        "description": "require array values to be sorted",
        "recommended": null,
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-array-values.html",
        "ruleId": "jsonc/sort-array-values",
        "ruleName": "sort-array-values"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsonc/sort-array-values",
      "plugin": "jsonc"
    },
    "jsonc/sort-keys": {
      "docs": {
        "description": "require object keys to be sorted",
        "recommended": null,
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-keys.html",
        "ruleId": "jsonc/sort-keys",
        "ruleName": "sort-keys"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsonc/sort-keys",
      "plugin": "jsonc"
    },
    "jsonc/space-unary-ops": {
      "docs": {
        "description": "disallow spaces after unary operators",
        "recommended": [
          "json",
          "jsonc",
          "json5"
        ],
        "extensionRule": true,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/space-unary-ops.html",
        "ruleId": "jsonc/space-unary-ops",
        "ruleName": "space-unary-ops"
      },
      "fixable": "whitespace",
      "type": "layout",
      "name": "jsonc/space-unary-ops",
      "plugin": "jsonc"
    },
    "jsonc/valid-json-number": {
      "docs": {
        "description": "disallow invalid number for JSON",
        "recommended": [
          "json",
          "jsonc"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/valid-json-number.html",
        "ruleId": "jsonc/valid-json-number",
        "ruleName": "valid-json-number"
      },
      "fixable": "code",
      "type": "problem",
      "name": "jsonc/valid-json-number",
      "plugin": "jsonc"
    },
    "jsonc/vue-custom-block/no-parsing-error": {
      "docs": {
        "description": "disallow parsing errors in Vue custom blocks",
        "recommended": [
          "json",
          "json5",
          "jsonc"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-jsonc/rules/vue-custom-block/no-parsing-error.html",
        "ruleId": "jsonc/vue-custom-block/no-parsing-error",
        "ruleName": "vue-custom-block/no-parsing-error"
      },
      "type": "problem",
      "name": "jsonc/vue-custom-block/no-parsing-error",
      "plugin": "jsonc"
    },
    "yaml/block-mapping-colon-indicator-newline": {
      "docs": {
        "description": "enforce consistent line breaks after `:` indicator",
        "categories": [],
        "extensionRule": false,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-mapping-colon-indicator-newline.html",
        "ruleId": "yml/block-mapping-colon-indicator-newline",
        "ruleName": "block-mapping-colon-indicator-newline"
      },
      "fixable": "whitespace",
      "type": "layout",
      "name": "yaml/block-mapping-colon-indicator-newline",
      "plugin": "yaml"
    },
    "yaml/block-mapping-question-indicator-newline": {
      "docs": {
        "description": "enforce consistent line breaks after `?` indicator",
        "categories": [
          "standard"
        ],
        "extensionRule": false,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-mapping-question-indicator-newline.html",
        "ruleId": "yml/block-mapping-question-indicator-newline",
        "ruleName": "block-mapping-question-indicator-newline"
      },
      "fixable": "whitespace",
      "type": "layout",
      "name": "yaml/block-mapping-question-indicator-newline",
      "plugin": "yaml"
    },
    "yaml/block-mapping": {
      "docs": {
        "description": "require or disallow block style mappings.",
        "categories": [
          "standard"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-mapping.html",
        "ruleId": "yml/block-mapping",
        "ruleName": "block-mapping"
      },
      "fixable": "code",
      "type": "layout",
      "name": "yaml/block-mapping",
      "plugin": "yaml"
    },
    "yaml/block-sequence-hyphen-indicator-newline": {
      "docs": {
        "description": "enforce consistent line breaks after `-` indicator",
        "categories": [
          "standard"
        ],
        "extensionRule": false,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-sequence-hyphen-indicator-newline.html",
        "ruleId": "yml/block-sequence-hyphen-indicator-newline",
        "ruleName": "block-sequence-hyphen-indicator-newline"
      },
      "fixable": "whitespace",
      "type": "layout",
      "name": "yaml/block-sequence-hyphen-indicator-newline",
      "plugin": "yaml"
    },
    "yaml/block-sequence": {
      "docs": {
        "description": "require or disallow block style sequences.",
        "categories": [
          "standard"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/block-sequence.html",
        "ruleId": "yml/block-sequence",
        "ruleName": "block-sequence"
      },
      "fixable": "code",
      "type": "layout",
      "name": "yaml/block-sequence",
      "plugin": "yaml"
    },
    "yaml/file-extension": {
      "docs": {
        "description": "enforce YAML file extension",
        "categories": [],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/file-extension.html",
        "ruleId": "yml/file-extension",
        "ruleName": "file-extension"
      },
      "type": "suggestion",
      "name": "yaml/file-extension",
      "plugin": "yaml"
    },
    "yaml/flow-mapping-curly-newline": {
      "docs": {
        "description": "enforce consistent line breaks inside braces",
        "categories": [
          "standard"
        ],
        "extensionRule": "object-curly-newline",
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/flow-mapping-curly-newline.html",
        "ruleId": "yml/flow-mapping-curly-newline",
        "ruleName": "flow-mapping-curly-newline"
      },
      "fixable": "whitespace",
      "type": "layout",
      "name": "yaml/flow-mapping-curly-newline",
      "plugin": "yaml"
    },
    "yaml/flow-mapping-curly-spacing": {
      "docs": {
        "description": "enforce consistent spacing inside braces",
        "categories": [
          "standard"
        ],
        "extensionRule": "object-curly-spacing",
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/flow-mapping-curly-spacing.html",
        "ruleId": "yml/flow-mapping-curly-spacing",
        "ruleName": "flow-mapping-curly-spacing"
      },
      "type": "layout",
      "fixable": "whitespace",
      "name": "yaml/flow-mapping-curly-spacing",
      "plugin": "yaml"
    },
    "yaml/flow-sequence-bracket-newline": {
      "docs": {
        "description": "enforce linebreaks after opening and before closing flow sequence brackets",
        "categories": [
          "standard"
        ],
        "extensionRule": "array-bracket-newline",
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/flow-sequence-bracket-newline.html",
        "ruleId": "yml/flow-sequence-bracket-newline",
        "ruleName": "flow-sequence-bracket-newline"
      },
      "fixable": "whitespace",
      "type": "layout",
      "name": "yaml/flow-sequence-bracket-newline",
      "plugin": "yaml"
    },
    "yaml/flow-sequence-bracket-spacing": {
      "docs": {
        "description": "enforce consistent spacing inside flow sequence brackets",
        "categories": [
          "standard"
        ],
        "extensionRule": "array-bracket-spacing",
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/flow-sequence-bracket-spacing.html",
        "ruleId": "yml/flow-sequence-bracket-spacing",
        "ruleName": "flow-sequence-bracket-spacing"
      },
      "type": "layout",
      "fixable": "whitespace",
      "name": "yaml/flow-sequence-bracket-spacing",
      "plugin": "yaml"
    },
    "yaml/indent": {
      "docs": {
        "description": "enforce consistent indentation",
        "categories": [
          "standard"
        ],
        "extensionRule": false,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/indent.html",
        "ruleId": "yml/indent",
        "ruleName": "indent"
      },
      "fixable": "whitespace",
      "type": "layout",
      "name": "yaml/indent",
      "plugin": "yaml"
    },
    "yaml/key-name-casing": {
      "docs": {
        "description": "enforce naming convention to key names",
        "categories": null,
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/key-name-casing.html",
        "ruleId": "yml/key-name-casing",
        "ruleName": "key-name-casing"
      },
      "type": "suggestion",
      "name": "yaml/key-name-casing",
      "plugin": "yaml"
    },
    "yaml/key-spacing": {
      "docs": {
        "description": "enforce consistent spacing between keys and values in mapping pairs",
        "categories": [
          "standard"
        ],
        "extensionRule": "key-spacing",
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/key-spacing.html",
        "ruleId": "yml/key-spacing",
        "ruleName": "key-spacing"
      },
      "fixable": "whitespace",
      "type": "layout",
      "name": "yaml/key-spacing",
      "plugin": "yaml"
    },
    "yaml/no-empty-document": {
      "docs": {
        "description": "disallow empty document",
        "categories": [
          "recommended",
          "standard"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-empty-document.html",
        "ruleId": "yml/no-empty-document",
        "ruleName": "no-empty-document"
      },
      "type": "suggestion",
      "name": "yaml/no-empty-document",
      "plugin": "yaml"
    },
    "yaml/no-empty-key": {
      "docs": {
        "description": "disallow empty mapping keys",
        "categories": [
          "recommended",
          "standard"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-empty-key.html",
        "ruleId": "yml/no-empty-key",
        "ruleName": "no-empty-key"
      },
      "type": "suggestion",
      "name": "yaml/no-empty-key",
      "plugin": "yaml"
    },
    "yaml/no-empty-mapping-value": {
      "docs": {
        "description": "disallow empty mapping values",
        "categories": [
          "recommended",
          "standard"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-empty-mapping-value.html",
        "ruleId": "yml/no-empty-mapping-value",
        "ruleName": "no-empty-mapping-value"
      },
      "type": "suggestion",
      "name": "yaml/no-empty-mapping-value",
      "plugin": "yaml"
    },
    "yaml/no-empty-sequence-entry": {
      "docs": {
        "description": "disallow empty sequence entries",
        "categories": [
          "recommended",
          "standard"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-empty-sequence-entry.html",
        "ruleId": "yml/no-empty-sequence-entry",
        "ruleName": "no-empty-sequence-entry"
      },
      "type": "suggestion",
      "name": "yaml/no-empty-sequence-entry",
      "plugin": "yaml"
    },
    "yaml/no-irregular-whitespace": {
      "docs": {
        "description": "disallow irregular whitespace",
        "categories": [
          "recommended",
          "standard"
        ],
        "extensionRule": "no-irregular-whitespace",
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-irregular-whitespace.html",
        "ruleId": "yml/no-irregular-whitespace",
        "ruleName": "no-irregular-whitespace"
      },
      "type": "problem",
      "name": "yaml/no-irregular-whitespace",
      "plugin": "yaml"
    },
    "yaml/no-multiple-empty-lines": {
      "docs": {
        "description": "disallow multiple empty lines",
        "categories": null,
        "extensionRule": "no-multiple-empty-lines",
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-multiple-empty-lines.html",
        "ruleId": "yml/no-multiple-empty-lines",
        "ruleName": "no-multiple-empty-lines"
      },
      "fixable": "whitespace",
      "type": "layout",
      "name": "yaml/no-multiple-empty-lines",
      "plugin": "yaml"
    },
    "yaml/no-tab-indent": {
      "docs": {
        "description": "disallow tabs for indentation.",
        "categories": [
          "recommended",
          "standard"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-tab-indent.html",
        "ruleId": "yml/no-tab-indent",
        "ruleName": "no-tab-indent"
      },
      "type": "problem",
      "name": "yaml/no-tab-indent",
      "plugin": "yaml"
    },
    "yaml/no-trailing-zeros": {
      "docs": {
        "description": "disallow trailing zeros for floats",
        "categories": null,
        "extensionRule": false,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/no-trailing-zeros.html",
        "ruleId": "yml/no-trailing-zeros",
        "ruleName": "no-trailing-zeros"
      },
      "fixable": "code",
      "type": "layout",
      "name": "yaml/no-trailing-zeros",
      "plugin": "yaml"
    },
    "yaml/plain-scalar": {
      "docs": {
        "description": "require or disallow plain style scalar.",
        "categories": [
          "standard"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/plain-scalar.html",
        "ruleId": "yml/plain-scalar",
        "ruleName": "plain-scalar"
      },
      "fixable": "code",
      "type": "layout",
      "name": "yaml/plain-scalar",
      "plugin": "yaml"
    },
    "yaml/quotes": {
      "docs": {
        "description": "enforce the consistent use of either double, or single quotes",
        "categories": [
          "standard"
        ],
        "extensionRule": false,
        "layout": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/quotes.html",
        "ruleId": "yml/quotes",
        "ruleName": "quotes"
      },
      "fixable": "code",
      "type": "layout",
      "name": "yaml/quotes",
      "plugin": "yaml"
    },
    "yaml/require-string-key": {
      "docs": {
        "description": "disallow mapping keys other than strings",
        "categories": null,
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/require-string-key.html",
        "ruleId": "yml/require-string-key",
        "ruleName": "require-string-key"
      },
      "type": "suggestion",
      "name": "yaml/require-string-key",
      "plugin": "yaml"
    },
    "yaml/sort-keys": {
      "docs": {
        "description": "require mapping keys to be sorted",
        "categories": null,
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/sort-keys.html",
        "ruleId": "yml/sort-keys",
        "ruleName": "sort-keys"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "yaml/sort-keys",
      "plugin": "yaml"
    },
    "yaml/sort-sequence-values": {
      "docs": {
        "description": "require sequence values to be sorted",
        "categories": null,
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/sort-sequence-values.html",
        "ruleId": "yml/sort-sequence-values",
        "ruleName": "sort-sequence-values"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "yaml/sort-sequence-values",
      "plugin": "yaml"
    },
    "yaml/spaced-comment": {
      "docs": {
        "description": "enforce consistent spacing after the `#` in a comment",
        "categories": [
          "standard"
        ],
        "extensionRule": "spaced-comment",
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/spaced-comment.html",
        "ruleId": "yml/spaced-comment",
        "ruleName": "spaced-comment"
      },
      "fixable": "whitespace",
      "type": "suggestion",
      "name": "yaml/spaced-comment",
      "plugin": "yaml"
    },
    "yaml/vue-custom-block/no-parsing-error": {
      "docs": {
        "description": "disallow parsing errors in Vue custom blocks",
        "categories": [
          "recommended",
          "standard"
        ],
        "extensionRule": false,
        "layout": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-yml/rules/vue-custom-block/no-parsing-error.html",
        "ruleId": "yml/vue-custom-block/no-parsing-error",
        "ruleName": "vue-custom-block/no-parsing-error"
      },
      "type": "problem",
      "name": "yaml/vue-custom-block/no-parsing-error",
      "plugin": "yaml"
    },
    "toml/array-bracket-newline": {
      "docs": {
        "description": "enforce linebreaks after opening and before closing array brackets",
        "categories": [
          "standard"
        ],
        "extensionRule": "array-bracket-newline",
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/array-bracket-newline.html",
        "ruleId": "toml/array-bracket-newline",
        "ruleName": "array-bracket-newline"
      },
      "type": "layout",
      "fixable": "whitespace",
      "name": "toml/array-bracket-newline",
      "plugin": "toml"
    },
    "toml/array-bracket-spacing": {
      "docs": {
        "description": "enforce consistent spacing inside array brackets",
        "categories": [
          "standard"
        ],
        "extensionRule": "array-bracket-spacing",
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/array-bracket-spacing.html",
        "ruleId": "toml/array-bracket-spacing",
        "ruleName": "array-bracket-spacing"
      },
      "type": "layout",
      "fixable": "whitespace",
      "name": "toml/array-bracket-spacing",
      "plugin": "toml"
    },
    "toml/array-element-newline": {
      "docs": {
        "description": "enforce line breaks between array elements",
        "categories": [
          "standard"
        ],
        "extensionRule": "array-element-newline",
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/array-element-newline.html",
        "ruleId": "toml/array-element-newline",
        "ruleName": "array-element-newline"
      },
      "type": "layout",
      "fixable": "whitespace",
      "name": "toml/array-element-newline",
      "plugin": "toml"
    },
    "toml/comma-style": {
      "docs": {
        "description": "enforce consistent comma style in array",
        "categories": [
          "standard"
        ],
        "extensionRule": "comma-style",
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/comma-style.html",
        "ruleId": "toml/comma-style",
        "ruleName": "comma-style"
      },
      "type": "layout",
      "fixable": "code",
      "name": "toml/comma-style",
      "plugin": "toml"
    },
    "toml/indent": {
      "docs": {
        "description": "enforce consistent indentation",
        "categories": [
          "standard"
        ],
        "extensionRule": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/indent.html",
        "ruleId": "toml/indent",
        "ruleName": "indent"
      },
      "fixable": "whitespace",
      "type": "layout",
      "name": "toml/indent",
      "plugin": "toml"
    },
    "toml/inline-table-curly-spacing": {
      "docs": {
        "description": "enforce consistent spacing inside braces",
        "categories": [
          "standard"
        ],
        "extensionRule": "object-curly-spacing",
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/inline-table-curly-spacing.html",
        "ruleId": "toml/inline-table-curly-spacing",
        "ruleName": "inline-table-curly-spacing"
      },
      "type": "layout",
      "fixable": "whitespace",
      "name": "toml/inline-table-curly-spacing",
      "plugin": "toml"
    },
    "toml/key-spacing": {
      "docs": {
        "description": "enforce consistent spacing between keys and values in key/value pairs",
        "categories": [
          "standard"
        ],
        "extensionRule": "key-spacing",
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/key-spacing.html",
        "ruleId": "toml/key-spacing",
        "ruleName": "key-spacing"
      },
      "fixable": "whitespace",
      "type": "layout",
      "name": "toml/key-spacing",
      "plugin": "toml"
    },
    "toml/keys-order": {
      "docs": {
        "description": "disallow defining pair keys out-of-order",
        "categories": [
          "standard"
        ],
        "extensionRule": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/keys-order.html",
        "ruleId": "toml/keys-order",
        "ruleName": "keys-order"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "toml/keys-order",
      "plugin": "toml"
    },
    "toml/no-mixed-type-in-array": {
      "docs": {
        "description": "disallow mixed data types in array",
        "categories": null,
        "extensionRule": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/no-mixed-type-in-array.html",
        "ruleId": "toml/no-mixed-type-in-array",
        "ruleName": "no-mixed-type-in-array"
      },
      "type": "suggestion",
      "name": "toml/no-mixed-type-in-array",
      "plugin": "toml"
    },
    "toml/no-non-decimal-integer": {
      "docs": {
        "description": "disallow hexadecimal, octal and binary integer",
        "categories": null,
        "extensionRule": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/no-non-decimal-integer.html",
        "ruleId": "toml/no-non-decimal-integer",
        "ruleName": "no-non-decimal-integer"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "toml/no-non-decimal-integer",
      "plugin": "toml"
    },
    "toml/no-space-dots": {
      "docs": {
        "description": "disallow spacing around infix operators",
        "categories": [
          "standard"
        ],
        "extensionRule": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/no-space-dots.html",
        "ruleId": "toml/no-space-dots",
        "ruleName": "no-space-dots"
      },
      "fixable": "whitespace",
      "type": "layout",
      "name": "toml/no-space-dots",
      "plugin": "toml"
    },
    "toml/no-unreadable-number-separator": {
      "docs": {
        "description": "disallow number separators that to not enhance readability.",
        "categories": [
          "recommended",
          "standard"
        ],
        "extensionRule": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/no-unreadable-number-separator.html",
        "ruleId": "toml/no-unreadable-number-separator",
        "ruleName": "no-unreadable-number-separator"
      },
      "type": "suggestion",
      "name": "toml/no-unreadable-number-separator",
      "plugin": "toml"
    },
    "toml/padding-line-between-pairs": {
      "docs": {
        "description": "require or disallow padding lines between pairs",
        "categories": [
          "standard"
        ],
        "extensionRule": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/padding-line-between-pairs.html",
        "ruleId": "toml/padding-line-between-pairs",
        "ruleName": "padding-line-between-pairs"
      },
      "fixable": "whitespace",
      "type": "layout",
      "name": "toml/padding-line-between-pairs",
      "plugin": "toml"
    },
    "toml/padding-line-between-tables": {
      "docs": {
        "description": "require or disallow padding lines between tables",
        "categories": [
          "standard"
        ],
        "extensionRule": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/padding-line-between-tables.html",
        "ruleId": "toml/padding-line-between-tables",
        "ruleName": "padding-line-between-tables"
      },
      "fixable": "whitespace",
      "type": "layout",
      "name": "toml/padding-line-between-tables",
      "plugin": "toml"
    },
    "toml/precision-of-fractional-seconds": {
      "docs": {
        "description": "disallow precision of fractional seconds greater than the specified value.",
        "categories": [
          "recommended",
          "standard"
        ],
        "extensionRule": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/precision-of-fractional-seconds.html",
        "ruleId": "toml/precision-of-fractional-seconds",
        "ruleName": "precision-of-fractional-seconds"
      },
      "type": "problem",
      "name": "toml/precision-of-fractional-seconds",
      "plugin": "toml"
    },
    "toml/precision-of-integer": {
      "docs": {
        "description": "disallow precision of integer greater than the specified value.",
        "categories": [
          "recommended",
          "standard"
        ],
        "extensionRule": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/precision-of-integer.html",
        "ruleId": "toml/precision-of-integer",
        "ruleName": "precision-of-integer"
      },
      "type": "problem",
      "name": "toml/precision-of-integer",
      "plugin": "toml"
    },
    "toml/quoted-keys": {
      "docs": {
        "description": "require or disallow quotes around keys",
        "categories": [
          "standard"
        ],
        "extensionRule": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/quoted-keys.html",
        "ruleId": "toml/quoted-keys",
        "ruleName": "quoted-keys"
      },
      "fixable": "code",
      "type": "layout",
      "name": "toml/quoted-keys",
      "plugin": "toml"
    },
    "toml/space-eq-sign": {
      "docs": {
        "description": "require spacing around equals sign",
        "categories": [
          "standard"
        ],
        "extensionRule": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/space-eq-sign.html",
        "ruleId": "toml/space-eq-sign",
        "ruleName": "space-eq-sign"
      },
      "deprecated": true,
      "replacedBy": [
        "key-spacing"
      ],
      "fixable": "whitespace",
      "type": "layout",
      "name": "toml/space-eq-sign",
      "plugin": "toml"
    },
    "toml/spaced-comment": {
      "docs": {
        "description": "enforce consistent spacing after the `#` in a comment",
        "categories": [
          "standard"
        ],
        "extensionRule": "spaced-comment",
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/spaced-comment.html",
        "ruleId": "toml/spaced-comment",
        "ruleName": "spaced-comment"
      },
      "fixable": "whitespace",
      "type": "suggestion",
      "name": "toml/spaced-comment",
      "plugin": "toml"
    },
    "toml/table-bracket-spacing": {
      "docs": {
        "description": "enforce consistent spacing inside table brackets",
        "categories": [
          "standard"
        ],
        "extensionRule": "array-bracket-spacing",
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/table-bracket-spacing.html",
        "ruleId": "toml/table-bracket-spacing",
        "ruleName": "table-bracket-spacing"
      },
      "fixable": "whitespace",
      "type": "layout",
      "name": "toml/table-bracket-spacing",
      "plugin": "toml"
    },
    "toml/tables-order": {
      "docs": {
        "description": "disallow defining tables out-of-order",
        "categories": [
          "standard"
        ],
        "extensionRule": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/tables-order.html",
        "ruleId": "toml/tables-order",
        "ruleName": "tables-order"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "toml/tables-order",
      "plugin": "toml"
    },
    "toml/vue-custom-block/no-parsing-error": {
      "docs": {
        "description": "disallow parsing errors in Vue custom blocks",
        "categories": [
          "recommended",
          "standard"
        ],
        "extensionRule": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-toml/rules/vue-custom-block/no-parsing-error.html",
        "ruleId": "toml/vue-custom-block/no-parsing-error",
        "ruleName": "vue-custom-block/no-parsing-error"
      },
      "type": "problem",
      "name": "toml/vue-custom-block/no-parsing-error",
      "plugin": "toml"
    },
    "no-use-extend-native/no-use-extend-native": {
      "type": "problem",
      "name": "no-use-extend-native/no-use-extend-native",
      "plugin": "no-use-extend-native"
    },
    "unused-imports/no-unused-vars": {
      "type": "problem",
      "docs": {
        "description": "Disallow unused variables",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "url": "https://github.com/sweepline/eslint-plugin-unused-imports/blob/master/docs/rules/no-unused-vars.md"
      },
      "fixable": "code",
      "name": "unused-imports/no-unused-vars",
      "plugin": "unused-imports"
    },
    "unused-imports/no-unused-imports": {
      "type": "problem",
      "docs": {
        "description": "Disallow unused variables",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "url": "https://github.com/sweepline/eslint-plugin-unused-imports/blob/master/docs/rules/no-unused-imports.md"
      },
      "fixable": "code",
      "name": "unused-imports/no-unused-imports",
      "plugin": "unused-imports"
    },
    "format/prettier": {
      "type": "layout",
      "docs": {
        "description": "Use Prettier to format code",
        "category": "Stylistic"
      },
      "fixable": "whitespace",
      "name": "format/prettier",
      "plugin": "format"
    },
    "format/dprint": {
      "type": "layout",
      "docs": {
        "description": "Use dprint to format code",
        "category": "Stylistic"
      },
      "fixable": "whitespace",
      "name": "format/dprint",
      "plugin": "format"
    }
  },
  "files": [
    {
      "filepath": ".eslint-config-inspector/_nuxt/BVroogsP.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])[jt]s?(x)"
      ],
      "configs": [
        2,
        8,
        54
      ]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/BmNWnaFO.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])[jt]s?(x)"
      ],
      "configs": [
        2,
        8,
        54
      ]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/BupVbMfq.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])[jt]s?(x)"
      ],
      "configs": [
        2,
        8,
        54
      ]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/CTNqAv02.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])[jt]s?(x)"
      ],
      "configs": [
        2,
        8,
        54
      ]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/CVO1_9PV.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])[jt]s?(x)"
      ],
      "configs": [
        2,
        8,
        54
      ]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/Cqmz7tCN.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])[jt]s?(x)"
      ],
      "configs": [
        2,
        8,
        54
      ]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/D0r3Knsf.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])[jt]s?(x)"
      ],
      "configs": [
        2,
        8,
        54
      ]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/D5p1_LJe.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])[jt]s?(x)"
      ],
      "configs": [
        2,
        8,
        54
      ]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/DBS2FFHD.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])[jt]s?(x)"
      ],
      "configs": [
        2,
        8,
        54
      ]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/DBXtF2pt.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])[jt]s?(x)"
      ],
      "configs": [
        2,
        8,
        54
      ]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/DQKmB4pA.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])[jt]s?(x)"
      ],
      "configs": [
        2,
        8,
        54
      ]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/Defcyui7.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])[jt]s?(x)"
      ],
      "configs": [
        2,
        8,
        54
      ]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/Dh-akTWs.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])[jt]s?(x)"
      ],
      "configs": [
        2,
        8,
        54
      ]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/DlAUqK2U.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])[jt]s?(x)"
      ],
      "configs": [
        2,
        8,
        54
      ]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/KJnl7Sfk.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])[jt]s?(x)"
      ],
      "configs": [
        2,
        8,
        54
      ]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/builds/latest.json",
      "globs": [
        "**/*.json"
      ],
      "configs": [
        39
      ]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/builds/meta/2bcac69a-e764-44a1-b78b-051fa4a7a683.json",
      "globs": [
        "**/*.json"
      ],
      "configs": [
        39
      ]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/kw0LVqvE.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])[jt]s?(x)"
      ],
      "configs": [
        2,
        8,
        54
      ]
    },
    {
      "filepath": ".eslint-config-inspector/api/payload.json",
      "globs": [
        "**/*.json"
      ],
      "configs": [
        39
      ]
    },
    {
      "filepath": ".github/renovate.json",
      "globs": [
        "**/*.json"
      ],
      "configs": [
        39
      ]
    },
    {
      "filepath": ".github/workflows/ci.yml",
      "globs": [
        "**/*.y?(a)ml"
      ],
      "configs": [
        43
      ]
    },
    {
      "filepath": ".github/workflows/release.yml",
      "globs": [
        "**/*.y?(a)ml"
      ],
      "configs": [
        43
      ]
    },
    {
      "filepath": ".vscode/settings.json",
      "globs": [
        "**/*.json"
      ],
      "configs": [
        39
      ]
    },
    {
      "filepath": "README.md",
      "globs": [
        "**/*.md"
      ],
      "configs": [
        32,
        33,
        57
      ]
    },
    {
      "filepath": "compat-prettier-config.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])[jt]s?(x)"
      ],
      "configs": [
        2,
        8,
        54
      ]
    },
    {
      "filepath": "compat-typescript.json",
      "globs": [
        "**/*.json"
      ],
      "configs": [
        39
      ]
    },
    {
      "filepath": "eslint.config.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts",
        "**/*.config.?([cm])[jt]s?(x)"
      ],
      "configs": [
        8,
        29,
        30,
        55
      ]
    },
    {
      "filepath": "fixtures/some.tsx",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])tsx"
      ],
      "configs": [
        8,
        29,
        30,
        36
      ]
    },
    {
      "filepath": "jsx.d.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts",
        "**/*.d.?([cm])ts"
      ],
      "configs": [
        8,
        29,
        30,
        53
      ]
    },
    {
      "filepath": "package.json",
      "globs": [
        "**/*.json",
        "**/package.json"
      ],
      "configs": [
        39,
        40
      ]
    },
    {
      "filepath": "scripts/publish.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts",
        "**/scripts/**/*.?([cm])[jt]s?(x)"
      ],
      "configs": [
        8,
        29,
        30,
        50
      ]
    },
    {
      "filepath": "scripts/version.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts",
        "**/scripts/**/*.?([cm])[jt]s?(x)"
      ],
      "configs": [
        8,
        29,
        30,
        50
      ]
    },
    {
      "filepath": "src/airbnb.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts"
      ],
      "configs": [
        8,
        29,
        30
      ]
    },
    {
      "filepath": "src/configs/airbnb.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts"
      ],
      "configs": [
        8,
        29,
        30
      ]
    },
    {
      "filepath": "src/configs/index.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts"
      ],
      "configs": [
        8,
        29,
        30
      ]
    },
    {
      "filepath": "src/configs/nextjs.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts"
      ],
      "configs": [
        8,
        29,
        30
      ]
    },
    {
      "filepath": "src/configs/node.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts"
      ],
      "configs": [
        8,
        29,
        30
      ]
    },
    {
      "filepath": "src/configs/perfectionist.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts"
      ],
      "configs": [
        8,
        29,
        30
      ]
    },
    {
      "filepath": "src/configs/promise.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts"
      ],
      "configs": [
        8,
        29,
        30
      ]
    },
    {
      "filepath": "src/configs/stylistic.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts"
      ],
      "configs": [
        8,
        29,
        30
      ]
    },
    {
      "filepath": "src/configs/tailwindcss.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts"
      ],
      "configs": [
        8,
        29,
        30
      ]
    },
    {
      "filepath": "src/configs/unicorn.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts"
      ],
      "configs": [
        8,
        29,
        30
      ]
    },
    {
      "filepath": "src/configs/unocss.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts"
      ],
      "configs": [
        8,
        29,
        30
      ]
    },
    {
      "filepath": "src/configs/wgw.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts"
      ],
      "configs": [
        8,
        29,
        30
      ]
    },
    {
      "filepath": "src/index.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts"
      ],
      "configs": [
        8,
        29,
        30
      ]
    },
    {
      "filepath": "src/plugins.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts"
      ],
      "configs": [
        8,
        29,
        30
      ]
    },
    {
      "filepath": "src/types.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts"
      ],
      "configs": [
        8,
        29,
        30
      ]
    },
    {
      "filepath": "src/utils.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts"
      ],
      "configs": [
        8,
        29,
        30
      ]
    },
    {
      "filepath": "src/vscode.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts"
      ],
      "configs": [
        8,
        29,
        30
      ]
    },
    {
      "filepath": "tsconfig.json",
      "globs": [
        "**/*.json",
        "**/tsconfig.json"
      ],
      "configs": [
        39,
        41
      ]
    },
    {
      "filepath": "uno.config.ts",
      "globs": [
        "**/*.?([cm])[jt]s?(x)",
        "**/*.?([cm])ts",
        "**/*.config.?([cm])[jt]s?(x)"
      ],
      "configs": [
        8,
        29,
        30,
        55
      ]
    }
  ],
  "meta": {
    "lastUpdate": 1751492768263,
    "basePath": "",
    "configPath": ""
  }
}